tags: static
title: About PETTIL

!!PETTIL
!!!Personal Electronics Transactor Threaded Interpreted Language
!!!(A Forth-like language for my venerable Commodore PET 2001N)
<<<
!!!ven-er-a-ble (adj.)
 3a : calling forth respect through age, character and attainments &lt;a venerable jazz musician&gt;; broadly : conveying an impression of aged goodness and benevolence &lt;encouraged by the venerable doctor's head-nodding&gt;
<<< Merriam Webster Dictionary
!!Origins
Back in 1977, my high school had a few tiny (4K & 8K; cassette tape storage
and BASIC) Wang 2200 computers.  I was instantly hooked.  My senior year,
there was a TRS-80 Model I (with Level 2 BASIC!).  Also that year, I bought a 
PET 2001-16N (second-hand for $1250.00).  I later upgraded it to BASIC4 and 32K.

In 1981 I worked at ~ComputerLand Tysons Corner for several months, just
prior to and after the introduction of the original IBM PC model 5150. While 
working at ~ComputerLand I picked up a copy of R.G. Loeliger's book, "Threaded 
Interpretive Languages." Along with how to bootstrap Forth on a Z-80, that book 
taught me two other things:

# That I could probably write my own Forth.
# Forth doesn't need to conform exactly to specific standards, as long as it is understandable by other Forth programmers.

I was very interested in the idea of Forth being a self-compiled language,
in other words, "Forth is written in Forth."  Also intriguing was the promise
of far greater speed than BASIC could hope to attain.  I had an idea for a
videogame, and I needed something better.

For a time (1984-1985) I worked as a Forth programmer on MMSForth for the
TRS-80&nbsp;Model&nbsp;4.  During the late '80s I explored and coded quite a bit in Blazin'
Forth on the Commodore 64.

I have spared no effort to bring you this Forth for the Commodore PET.  The 
Forth-83 standard forms the basis of PETTIL, with some slight deviations along 
the way.  You get a typical Forth development environment with interpreter, 
compiler, editor and assembler.  These are some of the things that make PETTIL 
unique:

!! Features
* Direct threaded model
* 15 clock cycles NEXT routine
* Virtual memory on cassette tape
* Most nucleus words hand-coded as primitives
* Built-in 6502 assembler features Woz's SWEET-16
* Source code editor leverages the PET's screen editor
* PETSCII graphic characters may be used as word names
* Tweaks and optimizations everywhere to save clocks and bytes
* Small core dictionary, designed for target application development
* Symbol table and development environment not required at runtime
* Bloom filter and Pearson hash to speed dictionary searches and compilation
