tags: static default concepts
title: Virtual Memory

!!Virtual Memory

!!!Virtual memory words
*[[BUFFER]]  ( u -- addr )<br>Returns the //addr// of BUFFER and sets PKT=//u//.  No packet is created in VMBUF until UPDATE occurs, and no initialization of BUFFER occurs.
*[[BLKBUF]]  ( -- addr )<br>Returns the //addr// of BLKBUF.  No packet is registered to the buffer.
*[[BLOCK]]   ( u -- addr )<br>Unpacks the requested block from VMBUF to BUFFER, creating it and any lower-numbered blocks if necessary.  BUFFER is first filled with spaces.
*[[RLENCODE]]   ( source dest srcsize -- finaldest flag )<br>Performs a run-length encoding operation on the region of memory between //source// and (//source//+//srcsize//) with the output delivered to //dest//.  The //finaldest// returned is the next available address following the compressed data, and //flag// indicates if RLENCODE was unable (//flag//=true) to compress the data smaller than its original size, and was simply copied.  Compressed data returns //flag//=false.
*[[RLDECODE]]   ( source dest srcsize -- finaldest )<br>Uncompresses //srcsize// bytes of data beginning at //source//, delivering the output at //dest//.
*[[UPDATE]]   ( -- )<br>commits the current PACKET to the VMBUF
*[[RENEW]]   ( -- )<br>RENEW is the antonym of UPDATE, and will reload the BUFFER or the VIDRAM
*[[VMBUF]]   ( -- addr )<br>User Variable<br>The bottom address of the virtual memory buffer.  The buffer grows downward, and is always marked by a zero-word at the tail.
*[[#VMPKT]]  ( -- addr )<br>User Variable<br>The current number of packets in VMBUF.  EMPTY-BUFFERS resets this to zero.
*[[PKT]]   ( -- addr )<br>User Variable<br>The subject of UPDATE and RENEW
*[[SCR]]   ( -- addr )<br>User Variable<br>Current screen.  The screen most recently edited or listed.  SCR might hold the block number of a data packet, but the editor views data packets in read-only mode.  Writable screen packets are commited to the VMBUF (by UPDATE) when the user navigates away from the screen in the editor or [[exits|STOP-Q]] the editor.
*[[EDITING?]]   ( -- addr )<br>User Variable<br>
*[[VIDRAM]]   ( -- $8000 )<br>Constant<br>The address of the upper left corner of the screen, the start of the memory-mapped video area
*[[SAVE-BUFFERS]]   ( -- )<br>Writes the memory between VMBUF and BUFFER out to tape via the kernel SAVE routine.
*[[LOAD-BUFFERS]]   ( -- )<br>Searches on the DRV# device for the named file stored in FILENAME and reads it in at PAD, initially.   After LOAD completes, the memory will be moved to just below BUFFER, then VMBUF and #PKTS will be set to reflect what was loaded.  If FILENAME is off, or the length is zero, LOAD-BUFFERS will read the next file. 
*[[EMPTY-BUFFERS]]   ( -- )<br>Empties the virtual memory packet buffer by setting VMBUF to BUFFER-2 and storing a zero there, and resets #PKTS to zero.
*[[FLUSH]]   ( -- )<br>performs SAVE-BUFFERS then EMPTY-BUFFERS
*[[FILENAME]]   ( -- addr )<br>User Variable<br>The address of a counted string.  The first 16 characters is the filename for SAVE-BUFFERS or LOAD-BUFFERS
*[[DRV#]]   ( -- addr )<br>User Variable<br>Contains the current device number for SAVE-BUFFERS and LOAD-BUFFERS.  The default value is 1 (cassette #1)
!!!General
There is a single (yes. just one. yes. I know.)  1K block buffer located directly below the symbol table (or below MEMSIZ when the Transient dictionary and symbols aren't present).  During UPDATE, the original contents of BUFFER are not overwritten by their compressed counterpart.  Instead, RLENCODE uses a separate 1K region directly below VMBUF.

!!!Creating blocks
The packet (BLOCK) number is implicit by that packet's position within VMBUF.  The packet header stored at BUFFER-2 is for packet 0, and packets build downward from there.  BLOCK and UPDATE can't refer to a packet that doesn't exist, so when a packet is referenced by BLOCK or the BUFFER is committed to VMBUF by UPDATE, new packets may need to be created.  If EDITING? is false, all newly created blocks will be data packets, otherwise they will be screen packets
