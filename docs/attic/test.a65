; test.a65
;#include cbm.def
;#include pettil.def

;====BASIC====
#define		basic		$0400
		.word basic+1			; this will be the load address
*		= basic+1

		.word basend
		.word 10
		.byt $9e			; SYS token
		.asc "1037",0			; $040f
basend		.word 0

        sei
        lda #<irq
        sta $90
        lda #>irq
        sta $91
        cli
        rts

        .dsb $5000-*,$ea
irq
        lda $9b         ; contents of $e812 for testing stop key
        sta $8000+39
        lda $d9         ; last key input
        sta $8000+38
        lda $cd         ; quote flag
        sta $8000+37
        lda $a6         ; copy of keypress checked by interrupt so that a constant keypress registers once only. #ff=no key
        sta $8000+36
        lda $ac         ; input from screen (#3) or from keyboard (#0) flag
        sta $8000+35
        lda $99         ; jiffy correction "623" clock
        sta $8000+34
        lda $9a
        sta $8000+33
        lda $8f         ; jiffy clock
        sta $8000+32
        lda $8e
        sta $8000+31
        lda $8d
        sta $8000+30
        lda $9e         ; length of keyboard buffer
        sta $8000+29
        lda $cd         ; quotes marker, 0 not in quotes
        sta $8000+28
        lda $dc         ; quotes marker, 0 not in quotes
        sta $8000+27
        jmp $e455
        
        

l1037		lda #10
		sta base
		jsr tryit
		lda #16
		sta base
		jsr tryit
		lda #8
		sta base
		jsr tryit
		lda #36
		sta base
		jsr tryit
		lda #2
		sta base
		jsr tryit
		rts

		
tryit		lda #'0'
		jsr asc2bin1
		lda #'1'
		jsr asc2bin1
		lda #'2'
		jsr asc2bin1
		lda #'7'
		jsr asc2bin1
		lda #'8'
		jsr asc2bin1
		lda #'9'
		jsr asc2bin1
		lda #'A'
		jsr asc2bin1
		lda #'F'
		jsr asc2bin1
		lda #'H'
		jsr asc2bin1
		lda #'M'
		jsr asc2bin1
		lda #'Z'
		jsr asc2bin1

		lda #'!'
		jsr asc2bin1
		lda #'?'
		jsr asc2bin1
		lda #'@'
		jsr asc2bin1
		lda #'['
		jsr asc2bin1
		rts

asc2bin1	sec
		sbc #$3a
		bpl skip
		sbc #7
skip		bmi bad
		cmp base
		bpl bad
		sta num
		.byt $24
bad		inx
		ora #$7f
		bmi neg
		lda #0
neg		eor #$ff
		tay
		sta flag
		sty flag+1
good		rts
		
base		.byt 0
num		.byt 0
flag		.word $dead
