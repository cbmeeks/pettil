EDITOR

Forth blocks and the PET full screen editor are a natural symbiosis.
To accomplish this, all I had to do was hook the IRQ vector to escape 
the STOP key.  The screen flashes, and the following keystroke is an
editor command.  Entire screens, including the linewrap table, are 
compressed and then moved, where they build downward from  the top of
memory.  This region is preserved on mass storage in sequential files.  
There are also editor commands to import/export screens in an unpacked,
CR-delimited format for non-native editing.

screens to/from CR-delimited only? 
	no line wrap tables
	simplifies UI design to just STOP-S / STOP-L
	probably easier for INTERPRET loop
	uses CHRIN kernel routine to copy screen
what about reverse-field, just a screen full of graphics?  Should there
be an option to store screens as RLE-compressed screen codes and a copy
of the line-wrap table?  What about 1K blocks of binary data?

edit - invoke the editor on the most recent screen or whatever is displayed

Editor commands begin with STOP, which flashes the screen

general
STOP SPACE - cancel editor command
STOP Q - save current screen, exit the editor
STOP CLR - reset linewrap table to all 40-char lines

screen navigations
STOP HOME - first screen
STOP UP - previous screen
STOP DOWN - next screen
STOP INS - insert a blank screen before the current screen
STOP DEL - delete the current screen.  go to next then prev then blank
STOP I - index, displays top 40 characters of active buffers

mass storage
STOP S - save screens to file
STOP L - load a file of screens

line copy/paste buffer
STOP Z - zilch the paste buffer.  There is no undo, only do.
STOP X - cut the current line, append to paste buffer
STOP C - copy the current line, append to paste buffer
STOP V - paste the buffer (whole lines only) here


Screens are compressed/decompressed on the fly with some combination
of RLE/LZ/Rad50

7C00 - 7FFF   1024 byte work buffer (1000 chars + line wrap table)
7BFE - 7BFF   link address of "current" buffer
7BFC - 7BFD   1st buffer link (0 if no buffers)
7x   - 7BFB   compressed buffer 1 (home)
7x-2          address of next buffer link (chain ends with 0)
PAD           copy/paste buffer


Events / Multitasking

Have some sort of event queue, where high level words are triggered
by the jiffy clock IRQ.  See Garth's design

The IRQ counts down a timer, with events triggered at their expiration

oneshot   ( jiffies cfa -- ; add a one-time event to the queue )
repeat   ( jiffies cfa -- ; add a repeating event to the queue )

use the event queue to flash the screen in the editor for 5 jiffies


DICTIONARY
inner interpreter primitives
nucleus layer
device layer
interpreter layer
compiler layer


setirq pla
 sta n
 pla
 sta n+1
 sei           ; disable interrupts
 brk
 .byt inr | N0 ; bump the RTS address
 .byt ldd | N0 ; retrieve the word
 .byt set | N0 ; IRQ vector
 .word $0090
 .byt std | N0 ; set the new IRQ vector
 .byt rtn      ; done
 cli           ; enable interrupts
 rts
 
 jsr hookirq
irqhandler

hookirq
 sei
 pla
 tay
 pla
 sta $91
 iny
 sty $90
 bne +
 inc $91
+ cli
 jmp next

CREATE
need to align the code field to avoid jmp ($xxFF) bug
