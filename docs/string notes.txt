word
    (create) exists? ?char interpret petscii
?char
skip
scan
move
$,
$!
"
."
(
.(


doqchar
    jsr slide
    ldy #2
    lda (ip),y
    sta tos
    jsr dodoes
#include "page.i65"
    .word cfetch
#include "page.i65"
    .word _word
#include "page.i65"
    .word toin
#include "page.i65"
    .word oneplusstore
#include "pass.i65"
    .word exit

name=$,
e.g. `" FOO" $,`

|addr|before|<|after|<|h
|2000|here|-||3|
|2001||-||'F'|
|2002||-||'O'|
|2003||-||'O'|
|2004||-|here|-|
|2005||-||-|
|2006||-||-|
||||||
|2050|pad|3||3|
|2051||'F'||'F'|
|2052||'O'||'O'|
|2053||'O'||'O'|
|2054||-|pad|-|
|2055||-||-|

;--------------------------------------------------------------
#if 0
name=>"
stack=( text" == ) ( -- addr )
tags=string
flags=immediate
State-smart common code used by [["]] and [[."]]. Either encloses a
string in the dictionary preceded by its execution token, or performs
a runtime operation depending on [[STATE]]


d;m 0 8f;m 1f0 1ff;m 1ae0 1aff;z


```
: >"   ( text" == ) ( -- addr )
    @+ swap @ state @ ?: nip drop  ?: xt, execute ;
```
!!!pronounced: "do-quote"
#endif
#include "align.i65"
doquote
    jsr enter
#include "page.i65"
    .word _caller
#include "page.i65"
    .word cfetchplus
#include "page.i65"
    .word state
#include "page.i65"
    .word fetch
#include "pass.i65"
    .word duptor
#include "page.i65"
    .word rot
#include "page.i65"
    .word fetch
#include "page.i65"
    .word rfetch
#include "pass.i65"
    .word pquerycolon
    .word _xtcomma
    .word drop
#include "page.i65"
    .word rot
#include "page.i65"
    .word rot

    .word plus
#include "page.i65"
    .word twostar
#include "pass.i65"
    .word plit
    .word doquote01
#include "page.i65"
    .word plus
#include "page.i65"
    .word fetch
#include "page.i65"
    .word execute
#include "pass.i65"
    .word exit
doquote01
    .word

;--------------------------------------------------------------
#if 0
name="
stack=( text" == ) ( -- addr )
tags=string
flags=immediate

+    jsr doquote
+    .word _pquote               ; (")       compile
+    .word _stringtopad          ; $>PAD     runtime

State-smart string literal.  In compile mode, encloses a string
in the dictionary.  In interpret mode, returns the address of a
string ([[PAD]])

```
: "   ( text" == ) ( -- addr )
    [ ' (") ] literal   (."")  $>pad ;
```
!!!pronounced: "quote"
#endif
quote
    jsr doquote
    .byt 1

;--------------------------------------------------------------
#if 0
name=." ".&quot;"
stack=( text" == ) ( -- addr )
tags=string
flags=immediate

+    jsr doquote
+    .word _pquote               ; (")       compile
+    .word _stringtopad          ; $>PAD     runtime

State-smart string literal.  In compile mode, encloses a string
in the dictionary.  In interpret mode, returns the address of a
string ([[PAD]])

```
: "   ( text" == ) ( -- addr )
    [ ' (") ] literal   (."")  $>pad ;
```
!!!pronounced: "quote"
#endif
dotq
    jsr doquote
    .byt 3

