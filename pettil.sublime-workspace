{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "[Return to Main Page] NMOS 6502 Opcodes by John Pickens, Updated by Bruce Clark and by Ed Spittles \n[Up to Tutorials and Aids] \nINDEX\nBranches\tDecimal Mode\tInterrupt Flag\tOverflow Flag\tProgram Counter\tStack\tTimes\tWrap-around\nADC\tAND\tASL\tBCC\tBCS\tBEQ\tBIT\tBMI\tBNE\tBPL\tBRK\tBVC\tBVS\tCLC\nCLD\tCLI\tCLV\tCMP\tCPX\tCPY\tDEC\tDEX\tDEY\tEOR\tINC\tINX\tINY\tJMP\nJSR\tLDA\tLDX\tLDY\tLSR\tNOP\tORA\tPHA\tPHP\tPLA\tPLP\tROL\tROR\tRTI\nRTS\tSBC\tSEC\tSED\tSEI\tSTA\tSTX\tSTY\tTAX\tTAY\tTSX\tTXA\tTXS\tTYA\n \n\nADC (ADd with Carry)\nAffects Flags: S V Z C\n\nMODE           SYNTAX       HEX LEN TIM\nImmediate     ADC #$44      $69  2   2\nZero Page     ADC $44       $65  2   3\nZero Page,X   ADC $44,X     $75  2   4\nAbsolute      ADC $4400     $6D  3   4\nAbsolute,X    ADC $4400,X   $7D  3   4+\nAbsolute,Y    ADC $4400,Y   $79  3   4+\nIndirect,X    ADC ($44,X)   $61  2   6\nIndirect,Y    ADC ($44),Y   $71  2   5+\n\n+ add 1 cycle if page boundary crossed\n\nADC results are dependant on the setting of the decimal flag. In decimal mode, addition is carried out on the assumption that the values involved are packed BCD (Binary Coded Decimal).\nThere is no way to add without carry.\n\n \n\nAND (bitwise AND with accumulator)\nAffects Flags: S Z\n\nMODE           SYNTAX       HEX LEN TIM\nImmediate     AND #$44      $29  2   2\nZero Page     AND $44       $25  2   3\nZero Page,X   AND $44,X     $35  2   4\nAbsolute      AND $4400     $2D  3   4\nAbsolute,X    AND $4400,X   $3D  3   4+\nAbsolute,Y    AND $4400,Y   $39  3   4+\nIndirect,X    AND ($44,X)   $21  2   6\nIndirect,Y    AND ($44),Y   $31  2   5+\n\n+ add 1 cycle if page boundary crossed\n \n\nASL (Arithmetic Shift Left)\nAffects Flags: S Z C\n\nMODE           SYNTAX       HEX LEN TIM\nAccumulator   ASL A         $0A  1   2\nZero Page     ASL $44       $06  2   5\nZero Page,X   ASL $44,X     $16  2   6\nAbsolute      ASL $4400     $0E  3   6\nAbsolute,X    ASL $4400,X   $1E  3   7\n\nASL shifts all bits left one position. 0 is shifted into bit 0 and the original bit 7 is shifted into the Carry.\n \n\nBIT (test BITs)\nAffects Flags: N V Z\n\nMODE           SYNTAX       HEX LEN TIM\nZero Page     BIT $44       $24  2   3\nAbsolute      BIT $4400     $2C  3   4\n\nBIT sets the Z flag as though the value in the address tested were ANDed with the accumulator. The S and V flags are set to match bits 7 and 6 respectively in the value stored at the tested address.\nBIT is often used to skip one or two following bytes as in:\n\nCLOSE1 LDX #$10   If entered here, we\n       .BYTE $2C  effectively perform\nCLOSE2 LDX #$20   a BIT test on $20A2,\n       .BYTE $2C  another one on $30A2,\nCLOSE3 LDX #$30   and end up with the X\nCLOSEX LDA #12    register still at $10\n       STA ICCOM,X upon arrival here.\n\nBeware: a BIT instruction used in this way as a NOP does have effects: the flags may be modified, and the read of the absolute address, if it happens to access an I/O device, may cause an unwanted action.\n                 \n\nBranch Instructions\nAffect Flags: none\n\nAll branches are relative mode and have a length of two bytes. Syntax is \"Bxx Displacement\" or (better) \"Bxx Label\". See the notes on the Program Counter for more on displacements.\n\nBranches are dependant on the status of the flag bits when the op code is encountered. A branch not taken requires two machine cycles. Add one if the branch is taken and add one more if the branch crosses a page boundary.\n\nMNEMONIC                       HEX\nBPL (Branch on PLus)           $10\nBMI (Branch on MInus)          $30\nBVC (Branch on oVerflow Clear) $50\nBVS (Branch on oVerflow Set)   $70\nBCC (Branch on Carry Clear)    $90\nBCS (Branch on Carry Set)      $B0\nBNE (Branch on Not Equal)      $D0\nBEQ (Branch on EQual)          $F0\n\nThere is no BRA (BRanch Always) instruction but it can be easily emulated by branching on the basis of a known condition. One of the best flags to use for this purpose is the oVerflow which is unchanged by all but addition and subtraction operations.\nA page boundary crossing occurs when the branch destination is on a different page than the instruction AFTER the branch instruction. For example:\n\n  SEC\n  BCS LABEL\n  NOP\nA page boundary crossing occurs (i.e. the BCS takes 4 cycles) when (the address of) LABEL and the NOP are on different pages. This means that\n        CLV\n        BVC LABEL\n  LABEL NOP\nthe BVC instruction will take 3 cycles no matter what address it is located at.\n \n\nBRK (BReaK)\nAffects Flags: B\n\nMODE           SYNTAX       HEX LEN TIM\nImplied       BRK           $00  1   7\n\nBRK causes a non-maskable interrupt and increments the program counter by one. Therefore an RTI will go to the address of the BRK +2 so that BRK may be used to replace a two-byte instruction for debugging and the subsequent RTI will be correct.\n \n\nCMP (CoMPare accumulator)\nAffects Flags: S Z C\n\nMODE           SYNTAX       HEX LEN TIM\nImmediate     CMP #$44      $C9  2   2\nZero Page     CMP $44       $C5  2   3\nZero Page,X   CMP $44,X     $D5  2   4\nAbsolute      CMP $4400     $CD  3   4\nAbsolute,X    CMP $4400,X   $DD  3   4+\nAbsolute,Y    CMP $4400,Y   $D9  3   4+\nIndirect,X    CMP ($44,X)   $C1  2   6\nIndirect,Y    CMP ($44),Y   $D1  2   5+\n\n+ add 1 cycle if page boundary crossed\n\nCompare sets flags as if a subtraction had been carried out. If the value in the accumulator is equal or greater than the compared value, the Carry will be set. The equal (Z) and sign (S) flags will be set based on equality or lack thereof and the sign (i.e. A>=$80) of the accumulator.\n \n\nCPX (ComPare X register)\nAffects Flags: S Z C\n\nMODE           SYNTAX       HEX LEN TIM\nImmediate     CPX #$44      $E0  2   2\nZero Page     CPX $44       $E4  2   3\nAbsolute      CPX $4400     $EC  3   4\n\nOperation and flag results are identical to equivalent mode accumulator CMP ops.\n \n\nCPY (ComPare Y register)\nAffects Flags: S Z C\n\nMODE           SYNTAX       HEX LEN TIM\nImmediate     CPY #$44      $C0  2   2\nZero Page     CPY $44       $C4  2   3\nAbsolute      CPY $4400     $CC  3   4\n\nOperation and flag results are identical to equivalent mode accumulator CMP ops.\n \n\nDEC (DECrement memory)\nAffects Flags: S Z\n\nMODE           SYNTAX       HEX LEN TIM\nZero Page     DEC $44       $C6  2   5\nZero Page,X   DEC $44,X     $D6  2   6\nAbsolute      DEC $4400     $CE  3   6\nAbsolute,X    DEC $4400,X   $DE  3   7\n\n \n\nEOR (bitwise Exclusive OR)\nAffects Flags: S Z\n\nMODE           SYNTAX       HEX LEN TIM\nImmediate     EOR #$44      $49  2   2\nZero Page     EOR $44       $45  2   3\nZero Page,X   EOR $44,X     $55  2   4\nAbsolute      EOR $4400     $4D  3   4\nAbsolute,X    EOR $4400,X   $5D  3   4+\nAbsolute,Y    EOR $4400,Y   $59  3   4+\nIndirect,X    EOR ($44,X)   $41  2   6\nIndirect,Y    EOR ($44),Y   $51  2   5+\n\n+ add 1 cycle if page boundary crossed\n             \n\nFlag (Processor Status) Instructions\nAffect Flags: as noted\n\nThese instructions are implied mode, have a length of one byte and require two machine cycles.\n\nMNEMONIC                       HEX\nCLC (CLear Carry)              $18\nSEC (SEt Carry)                $38\nCLI (CLear Interrupt)          $58\nSEI (SEt Interrupt)            $78\nCLV (CLear oVerflow)           $B8\nCLD (CLear Decimal)            $D8\nSED (SEt Decimal)              $F8\n\nNotes:\n  The Interrupt flag is used to prevent (SEI) or enable (CLI) maskable interrupts (aka IRQ's). It does not signal the presence or absence of an interrupt condition. The 6502 will set this flag automatically in response to an interrupt and restore it to its prior status on completion of the interrupt service routine. If you want your interrupt service routine to permit other maskable interrupts, you must clear the I flag in your code.\n\n  The Decimal flag controls how the 6502 adds and subtracts. If set, arithmetic is carried out in packed binary coded decimal. This flag is unchanged by interrupts and is unknown on power-up. The implication is that a CLD should be included in boot or interrupt coding.\n\n  The Overflow flag is generally misunderstood and therefore under-utilised. After an ADC or SBC instruction, the overflow flag will be set if the twos complement result is less than -128 or greater than +127, and it will cleared otherwise. In twos complement, $80 through $FF represents -128 through -1, and $00 through $7F represents 0 through +127. Thus, after:\n\n  CLC\n  LDA #$7F ;   +127\n  ADC #$01 ; +   +1\nthe overflow flag is 1 (+127 + +1 = +128), and after:\n  CLC\n  LDA #$81 ;   -127\n  ADC #$FF ; +   -1\nthe overflow flag is 0 (-127 + -1 = -128). The overflow flag is not affected by increments, decrements, shifts and logical operations i.e. only ADC, BIT, CLV, PLP, RTI and SBC affect it. There is no op code to set the overflow but a BIT test on an RTS instruction will do the trick.\n \n\nINC (INCrement memory)\nAffects Flags: S Z\n\nMODE           SYNTAX       HEX LEN TIM\nZero Page     INC $44       $E6  2   5\nZero Page,X   INC $44,X     $F6  2   6\nAbsolute      INC $4400     $EE  3   6\nAbsolute,X    INC $4400,X   $FE  3   7\n \n\nJMP (JuMP)\nAffects Flags: none\n\nMODE           SYNTAX       HEX LEN TIM\nAbsolute      JMP $5597     $4C  3   3\nIndirect      JMP ($5597)   $6C  3   5\n\nJMP transfers program execution to the following address (absolute) or to the location contained in the following address (indirect). Note that there is no carry associated with the indirect jump so:\nAN INDIRECT JUMP MUST NEVER USE A\nVECTOR BEGINNING ON THE LAST BYTE\nOF A PAGE\nFor example if address $3000 contains $40, $30FF contains $80, and $3100 contains $50, the result of JMP ($30FF) will be a transfer of control to $4080 rather than $5080 as you intended i.e. the 6502 took the low byte of the address from $30FF and the high byte from $3000.\n \n\nJSR (Jump to SubRoutine)\nAffects Flags: none\n\nMODE           SYNTAX       HEX LEN TIM\nAbsolute      JSR $5597     $20  3   6\n\nJSR pushes the address-1 of the next operation on to the stack before transferring program control to the following address. Subroutines are normally terminated by a RTS op code.\n \n\nLDA (LoaD Accumulator)\nAffects Flags: S Z\n\nMODE           SYNTAX       HEX LEN TIM\nImmediate     LDA #$44      $A9  2   2\nZero Page     LDA $44       $A5  2   3\nZero Page,X   LDA $44,X     $B5  2   4\nAbsolute      LDA $4400     $AD  3   4\nAbsolute,X    LDA $4400,X   $BD  3   4+\nAbsolute,Y    LDA $4400,Y   $B9  3   4+\nIndirect,X    LDA ($44,X)   $A1  2   6\nIndirect,Y    LDA ($44),Y   $B1  2   5+\n\n+ add 1 cycle if page boundary crossed\n \n\nLDX (LoaD X register)\nAffects Flags: S Z\n\nMODE           SYNTAX       HEX LEN TIM\nImmediate     LDX #$44      $A2  2   2\nZero Page     LDX $44       $A6  2   3\nZero Page,Y   LDX $44,Y     $B6  2   4\nAbsolute      LDX $4400     $AE  3   4\nAbsolute,Y    LDX $4400,Y   $BE  3   4+\n\n+ add 1 cycle if page boundary crossed\n \n\nLDY (LoaD Y register)\nAffects Flags: S Z\n\nMODE           SYNTAX       HEX LEN TIM\nImmediate     LDY #$44      $A0  2   2\nZero Page     LDY $44       $A4  2   3\nZero Page,X   LDY $44,X     $B4  2   4\nAbsolute      LDY $4400     $AC  3   4\nAbsolute,X    LDY $4400,X   $BC  3   4+\n\n+ add 1 cycle if page boundary crossed\n \n\nLSR (Logical Shift Right)\nAffects Flags: S Z C\n\nMODE           SYNTAX       HEX LEN TIM\nAccumulator   LSR A         $4A  1   2\nZero Page     LSR $44       $46  2   5\nZero Page,X   LSR $44,X     $56  2   6\nAbsolute      LSR $4400     $4E  3   6\nAbsolute,X    LSR $4400,X   $5E  3   7\n\nLSR shifts all bits right one position. 0 is shifted into bit 7 and the original bit 0 is shifted into the Carry.\n \n\nWrap-Around\nUse caution with indexed zero page operations as they are subject to wrap-around. For example, if the X register holds $FF and you execute LDA $80,X you will not access $017F as you might expect; instead you access $7F i.e. $80-1. This characteristic can be used to advantage but make sure your code is well commented.\n\nIt is possible, however, to access $017F when X = $FF by using the Absolute,X addressing mode of LDA $80,X. That is, instead of:\n\n  LDA $80,X    ; ZeroPage,X - the resulting object code is: B5 80\nwhich accesses $007F when X=$FF, use:\n  LDA $0080,X  ; Absolute,X - the resulting object code is: BD 80 00\nwhich accesses $017F when X = $FF (a at cost of one additional byte and one additional cycle). All of the ZeroPage,X and ZeroPage,Y instructions except STX ZeroPage,Y and STY ZeroPage,X have a corresponding Absolute,X and Absolute,Y instruction. Unfortunately, a lot of 6502 assemblers don't have an easy way to force Absolute addressing, i.e. most will assemble a LDA $0080,X as B5 80. One way to overcome this is to insert the bytes using the .BYTE pseudo-op (on some 6502 assemblers this pseudo-op is called DB or DFB, consult the assembler documentation) as follows:\n  .BYTE $BD,$80,$00  ; LDA $0080,X (absolute,X addressing mode)\nThe comment is optional, but highly recommended for clarity.\nIn cases where you are writing code that will be relocated you must consider wrap-around when assigning dummy values for addresses that will be adjusted. Both zero and the semi-standard $FFFF should be avoided for dummy labels. The use of zero or zero page values will result in assembled code with zero page opcodes when you wanted absolute codes. With $FFFF, the problem is in addresses+1 as you wrap around to page 0.\n\n \n\nProgram Counter\nWhen the 6502 is ready for the next instruction it increments the program counter before fetching the instruction. Once it has the op code, it increments the program counter by the length of the operand, if any. This must be accounted for when calculating branches or when pushing bytes to create a false return address (i.e. jump table addresses are made up of addresses-1 when it is intended to use an RTS rather than a JMP).\n\nThe program counter is loaded least signifigant byte first. Therefore the most signifigant byte must be pushed first when creating a false return address.\n\nWhen calculating branches a forward branch of 6 skips the following 6 bytes so, effectively the program counter points to the address that is 8 bytes beyond the address of the branch opcode; and a backward branch of $FA (256-6) goes to an address 4 bytes before the branch instruction.\n\n \n\nExecution Times\nOp code execution times are measured in machine cycles; one machine cycle equals one clock cycle. Many instructions require one extra cycle for execution if a page boundary is crossed; these are indicated by a + following the time values shown.\n\n \n\nNOP (No OPeration)\nAffects Flags: none\n\nMODE           SYNTAX       HEX LEN TIM\nImplied       NOP           $EA  1   2\n\nNOP is used to reserve space for future modifications or effectively REM out existing code.\n \n\nORA (bitwise OR with Accumulator)\nAffects Flags: S Z\n\nMODE           SYNTAX       HEX LEN TIM\nImmediate     ORA #$44      $09  2   2\nZero Page     ORA $44       $05  2   3\nZero Page,X   ORA $44,X     $15  2   4\nAbsolute      ORA $4400     $0D  3   4\nAbsolute,X    ORA $4400,X   $1D  3   4+\nAbsolute,Y    ORA $4400,Y   $19  3   4+\nIndirect,X    ORA ($44,X)   $01  2   6\nIndirect,Y    ORA ($44),Y   $11  2   5+\n\n+ add 1 cycle if page boundary crossed\n               \n\nRegister Instructions\nAffect Flags: S Z\n\nThese instructions are implied mode, have a length of one byte and require two machine cycles.\n\nMNEMONIC                 HEX\nTAX (Transfer A to X)    $AA\nTXA (Transfer X to A)    $8A\nDEX (DEcrement X)        $CA\nINX (INcrement X)        $E8\nTAY (Transfer A to Y)    $A8\nTYA (Transfer Y to A)    $98\nDEY (DEcrement Y)        $88\nINY (INcrement Y)        $C8\n \n\nROL (ROtate Left)\nAffects Flags: S Z C\n\nMODE           SYNTAX       HEX LEN TIM\nAccumulator   ROL A         $2A  1   2\nZero Page     ROL $44       $26  2   5\nZero Page,X   ROL $44,X     $36  2   6\nAbsolute      ROL $4400     $2E  3   6\nAbsolute,X    ROL $4400,X   $3E  3   7\n\nROL shifts all bits left one position. The Carry is shifted into bit 0 and the original bit 7 is shifted into the Carry.\n \n\nROR (ROtate Right)\nAffects Flags: S Z C\n\nMODE           SYNTAX       HEX LEN TIM\nAccumulator   ROR A         $6A  1   2\nZero Page     ROR $44       $66  2   5\nZero Page,X   ROR $44,X     $76  2   6\nAbsolute      ROR $4400     $6E  3   6\nAbsolute,X    ROR $4400,X   $7E  3   7\n\nROR shifts all bits right one position. The Carry is shifted into bit 7 and the original bit 0 is shifted into the Carry.\n \n\nRTI (ReTurn from Interrupt)\nAffects Flags: all\n\nMODE           SYNTAX       HEX LEN TIM\nImplied       RTI           $40  1   6\n\nRTI retrieves the Processor Status Word (flags) and the Program Counter from the stack in that order (interrupts push the PC first and then the PSW).\nNote that unlike RTS, the return address on the stack is the actual address rather than the address-1.\n\n \n\nRTS (ReTurn from Subroutine)\nAffects Flags: none\n\nMODE           SYNTAX       HEX LEN TIM\nImplied       RTS           $60  1   6\n\nRTS pulls the top two bytes off the stack (low byte first) and transfers program control to that address+1. It is used, as expected, to exit a subroutine invoked via JSR which pushed the address-1.\nRTS is frequently used to implement a jump table where addresses-1 are pushed onto the stack and accessed via RTS eg. to access the second of four routines:\n\n LDX #1\n JSR EXEC\n JMP SOMEWHERE\n\nLOBYTE\n .BYTE <ROUTINE0-1,<ROUTINE1-1\n .BYTE <ROUTINE2-1,<ROUTINE3-1\n\nHIBYTE\n .BYTE >ROUTINE0-1,>ROUTINE1-1\n .BYTE >ROUTINE2-1,>ROUTINE3-1\n\nEXEC\n LDA HIBYTE,X\n PHA\n LDA LOBYTE,X\n PHA\n RTS\n \n\nSBC (SuBtract with Carry)\nAffects Flags: S V Z C\n\nMODE           SYNTAX       HEX LEN TIM\nImmediate     SBC #$44      $E9  2   2\nZero Page     SBC $44       $E5  2   3\nZero Page,X   SBC $44,X     $F5  2   4\nAbsolute      SBC $4400     $ED  3   4\nAbsolute,X    SBC $4400,X   $FD  3   4+\nAbsolute,Y    SBC $4400,Y   $F9  3   4+\nIndirect,X    SBC ($44,X)   $E1  2   6\nIndirect,Y    SBC ($44),Y   $F1  2   5+\n\n+ add 1 cycle if page boundary crossed\n\nSBC results are dependant on the setting of the decimal flag. In decimal mode, subtraction is carried out on the assumption that the values involved are packed BCD (Binary Coded Decimal).\nThere is no way to subtract without the carry which works as an inverse borrow. i.e, to subtract you set the carry before the operation. If the carry is cleared by the operation, it indicates a borrow occurred.\n\n \n\nSTA (STore Accumulator)\nAffects Flags: none\n\nMODE           SYNTAX       HEX LEN TIM\nZero Page     STA $44       $85  2   3\nZero Page,X   STA $44,X     $95  2   4\nAbsolute      STA $4400     $8D  3   4\nAbsolute,X    STA $4400,X   $9D  3   5\nAbsolute,Y    STA $4400,Y   $99  3   5\nIndirect,X    STA ($44,X)   $81  2   6\nIndirect,Y    STA ($44),Y   $91  2   6\n             \n\nStack Instructions\nThese instructions are implied mode, have a length of one byte and require machine cycles as indicated. The \"PuLl\" operations are known as \"POP\" on most other microprocessors. With the 6502, the stack is always on page one ($100-$1FF) and works top down.\n\nMNEMONIC                        HEX TIM\nTXS (Transfer X to Stack ptr)   $9A  2\nTSX (Transfer Stack ptr to X)   $BA  2\nPHA (PusH Accumulator)          $48  3\nPLA (PuLl Accumulator)          $68  4\nPHP (PusH Processor status)     $08  3\nPLP (PuLl Processor status)     $28  4\n \n\nSTX (STore X register)\nAffects Flags: none\n\nMODE           SYNTAX       HEX LEN TIM\nZero Page     STX $44       $86  2   3\nZero Page,Y   STX $44,Y     $96  2   4\nAbsolute      STX $4400     $8E  3   4\n \n\nSTY (STore Y register)\nAffects Flags: none\n\nMODE           SYNTAX       HEX LEN TIM\nZero Page     STY $44       $84  2   3\nZero Page,X   STY $44,X     $94  2   4\nAbsolute      STY $4400     $8C  3   4\nLast Updated May 5, 2017.",
			"settings":
			{
				"buffer_size": 19500,
				"line_ending": "Unix",
				"name": "[Return to Main Page] NMOS 6502 Opcodes by John Pi"
			}
		},
		{
			"file": "studio/src/pettil-editor.a65",
			"settings":
			{
				"buffer_size": 27284,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "core/src/core-io.a65",
			"settings":
			{
				"buffer_size": 16796,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "core/src/inc/cbm.def",
			"settings":
			{
				"buffer_size": 9830,
				"line_ending": "Unix"
			}
		},
		{
			"file": "studio/src/pettil-name.a65",
			"settings":
			{
				"buffer_size": 13260,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 32 files for \"eighty\" (regex)\n\n/home/chitselb/Documents/dev/commodore/pettil/core/src/core-io.a65:\n  185  #else\n  186  #include \"page.i65\"\n  187:     .word eighty\n  188  #endif\n  189  #include \"pass.i65\"\n\n/home/chitselb/Documents/dev/commodore/pettil/core/src/core-nucleus.a65:\n  900  ;--------------------------------------------------------------\n  901  #if 0\n  902: name=EIGHTY\n  903  stack=( -- 80 )\n  904  tags=nucleus,const\n  905  Constant: `80`\n  906  #endif\n  907: eighty\n  908      lda #80\n  909      .byt $2c                    ; BIT abs opcode\n  ...\n 2131      .word here\n 2132  #include \"page.i65\"\n 2133:     .word eighty\n 2134  #include \"page.i65\"\n 2135      .word plus\n\n/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-name.a65:\n  108              forty\n  109          else\n  110:             lin 1+! eighty\n  111          then                    ( 40|80 )\n  112          dup    LNMX c!\n\n5 matches across 3 files\n",
			"settings":
			{
				"buffer_size": 952,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "studio/src/pettil-interpreter.a65",
			"settings":
			{
				"buffer_size": 13649,
				"line_ending": "Unix"
			}
		},
		{
			"file": "core/src/core-vm.a65",
			"settings":
			{
				"buffer_size": 40147,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "studio/src/pettil-studio.a65",
			"settings":
			{
				"buffer_size": 10338,
				"line_ending": "Unix"
			}
		},
		{
			"file": "core/src/core-extra.a65",
			"settings":
			{
				"buffer_size": 10842,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "_qrefill\n    jsr enter\n    .word span\n    .word fetch\n    .word _qexit\n    .word blkfetch\n    .word qbranch               ; keyboard? go directly to `query`\n    .byt <(qrefill01-*+1)\n    .word blkfetch\n    .word _block\n    \n    .word clit\n    .byt PNT                    ; ($C4) pointer current screen line address\n    .word store\n    .word in\n    .word cfetchplus            ; `in.l` cursor offset on logical line\n    .word clit\n    .byt PNTR                   ; $C6 Cursor Column on Current Line\n    .word cstore\n    .word cfetch                ; `in.h` cursor physical line number\n    .word clit\n    .byt TBLX                   ; $D8 Current Cursor Physical Line Number\n    .word cstore\n    .word three                 ; get input from screen device #3\n    .word clit\n    .byt DFLTN                  ; $AF Default Input Device (0)\n    .word cstore\n    .word pqrefill\nqrefill01\n    .word _query\n    .word exit\n\n;--------------------------------------------------------------\n#if 0\nname=(?REFILL)\nstack=( -- )\ntags=interpreter,nosymbol\n|Three possible states coming in|<|<|h\n|1|span is 0||\n|2|||\n|3|||\n\n* 'force refill' check first -- exit to outer caller ( of INTERPRET )\n* 'end of line/buffer' check next\n\n    lda userin\n    sta PNTR                    ; $C6\n    lda userin+1\n    sta TBLX                    ; $D8\n    lda #39\n    sta LNMX                    ; $D5 39 or 79\n\n#endif\npqrefill\n    jmp next\n\n\n;--------------------------------------------------------------\n#if 0\nname=NAME\nstack=( char -- nfa | false )\ntags=outer,extra\nParse the next `word` from the `input stream`.  Return `false` if the\n`input stream` is exhausted, or the `nfa` of the found word, built\ndirectly within the input stream.  Advance `in` past the parsed `word`.\n\nLeading delimiters are ignored.   If the delimiter is not found the value of\nIN is the size of the input stream.  If the delimiter is found IN is\n adjusted to indicate the offset to the character following\n the delimiter.  `span` is unmodified.\n\nIn PETTIL `name` replaces the function of Forth-83 //required// reserved\nword `word`, which is //omitted//.\n\nAs much of the `ugly` as I could for the `blk` conspiracy goes in here.\nIsolating conspiracy support in as few words as possible will hopefully\nreduce overall system complexity and present clear transitions between the\nphases of the outer interpreter.\n\n```\n: name   ( nfa -- xfa flag )\n     ?refill 'stream swap >n6 2drop\n     dup skip dup>r 1- <n6 +\n     swap scan r> - >n8 dup\n     if  over c! in 1+!\n     dup \\ something for nip\n     then nip ;\n```\n#endif\n_name\n    jsr enter\n    .word _qrefill\n    .word _tickstream\n    .word swap\n    .word tozp\n    .byt ACC+2*N6               ; set up buffer pointer `n6`\n    .word twodrop\n    .word dup\n    .word skip                  ; start of name\n    .word duptor\n    .word oneminus\n    .word zpfrom\n    .byt ACC+2*N6               ; buf\n    .word plus\n    .word swap\n    .word scan                  ; end of name (and/or buffer)\n    .word rfrom\n    .word minus\n    .word tozp\n    .byt ACC+2*N8               ; name.len\n    .word dup\n    .word qbranch\n    .byt <(name01-*+1)\n    .word over\n    .word cstore                ; prepend name in buffer with name.len\n    .word in\n    .word oneplusstore          ; move `in` past the space that stopped us\n    .word dup                   ; something for `nip` to consume\nname01\n    .word nip\n    .word exit\n\n#print (*-skip)\n",
			"settings":
			{
				"buffer_size": 3411,
				"line_ending": "Unix",
				"name": "_qrefill"
			}
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ui",
				"UI: Select Color Scheme"
			],
			[
				"pack",
				"Package Control: Install Package"
			]
		],
		"width": 497.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": true,
		"show_open_files": false,
		"show_tabs": true,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/chitselb/Documents/dev/commodore/pettil",
		"/home/chitselb/Documents/dev/commodore/pettil/core",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src"
	],
	"file_history":
	[
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-utils.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/t.t",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-extra.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-inner.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-nucleus.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-studio.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-vm.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/tmp/pettil.mon",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/pettil-core.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/pettil.dbg",
		"/home/chitselb/Documents/dev/commodore/pettil/Makefile",
		"/home/chitselb/Documents/dev/commodore/vice-3.2/src/arch/unix/x11/gnome/uimon.c",
		"/mnt/data/chitselb/Documents/dev/commodore/pettil/pettil.mon",
		"/mnt/data/chitselb/Documents/dev/commodore/pettil/foo.mon",
		"/mnt/data/chitselb/Documents/dev/commodore/pettil/mon1.mon",
		"/mnt/data/chitselb/Documents/dev/commodore/pettil/enter.mon",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-name.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-editor.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-interpreter.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/wrapper.mon",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/inc/pettil-tdict.def",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-compiler.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-user.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-io.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/inc/cbm.def",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-user.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-double.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-dictionary.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-locals.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/docs/statictiddlers/EditorDesign.tid",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-number.a65",
		"/home/chitselb/Documents/pettilmobile/resources/history/end.vsf",
		"/home/chitselb/Documents/pettilmobile/resources/history/start.vsf",
		"/home/chitselb/.config/sublime-text-3/Packages/DA UI/DA Color.sublime-settings",
		"/home/chitselb/.config/sublime-text-3/Packages/DA UI/DA Dark.tmTheme",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/; pettil-editor.old2",
		"/home/chitselb/Documents/dev/commodore/pettil/src/pettil-editor.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/src/core-vm.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-editor.old",
		"/home/chitselb/Documents/dev/commodore/pettil/tools/xap.rb",
		"/home/chitselb/.config/autokey/data/My Phrases/pds.txt",
		"/home/chitselb/dev/commodore/pettil/studio/src/pettil-user.a65",
		"/home/chitselb/dev/commodore/pettil/core/src/core-nucleus.a65",
		"/home/chitselb/dev/commodore/pettil/studio/src/pettil-assembler.a65",
		"/home/chitselb/dev/commodore/pettil/studio/src/pettil-editor.a65",
		"/home/chitselb/dev/commodore/pettil/core/src/core-user.a65",
		"/home/chitselb/dev/commodore/pettil/studio/src/pettil-utils.a65",
		"/home/chitselb/dev/commodore/pettil/studio/src/pettil-interpreter.a65",
		"/home/chitselb/dev/commodore/pettil/studio/src/pettil-studio.a65",
		"/home/chitselb/dev/commodore/pettil/studio/src/pettil-dictionary.a65",
		"/home/chitselb/dev/commodore/pettil/core/src/core-extra.a65",
		"/home/chitselb/dev/commodore/pettil/core/src/pettil-core.a65",
		"/home/chitselb/core-vm.a65",
		"/home/chitselb/dev/commodore/pettil/tools/xap.rb",
		"/home/chitselb/dev/commodore/pettil/docs/statictiddlers/tiddlywiki.info",
		"/home/chitselb/dev/commodore/pettil/core/src/pettil-corewtf.a65",
		"/home/chitselb/dev/commodore/pettil/core/src/core-locals.a65",
		"/home/chitselb/dev/commodore/pettil/core/src/sweet16.a65",
		"/home/chitselb/dev/commodore/pettil/studio/src/pettil-compiler.a65",
		"/home/chitselb/dev/commodore/pettil/core/src/core-inner.a65",
		"/home/chitselb/dev/commodore/pettil/core/src/core-double.a65",
		"/mnt/sdc1/chitselb/dev/commodore/otherpet/kenross/download",
		"/home/chitselb/.local/share/applications/xpet.desktop",
		"/home/chitselb/.local/share/applications/xvic.desktop",
		"/home/chitselb/dev/commodore/pettil/core/src/inc/pettil.def",
		"/home/chitselb/dev/commodore/pettil/studio/src/inc/pettil-studio.def",
		"/home/chitselb/dev/commodore/pettil/core/src/inc/cbm.def",
		"/home/chitselb/dev/commodore/pettil/core/src/core-vm.a65",
		"/home/chitselb/dev/commodore/pettil/pettil.dbg",
		"/home/chitselb/dev/commodore/pettil/core/src/core-io.a65",
		"/home/chitselb/.vice/PET/chitselb.vpl",
		"/mnt/sdc1/chitselb/dev/commodore/emulators/vice-2.4.28/configure.ac",
		"/mnt/sdc1/chitselb/dev/commodore/emulators/vice-2.4.28/configure.proto",
		"/mnt/sdc1/chitselb/dev/commodore/emulators/vice-2.4.28/config.guess",
		"/mnt/sdc1/chitselb/dev/commodore/emulators/vice-2.4.28/config.log",
		"/mnt/sdc1/chitselb/dev/commodore/emulators/vice-2.4.28/config.rpath",
		"/mnt/sdc1/chitselb/dev/commodore/emulators/vice-2.4.28/config.status",
		"/mnt/sdc1/chitselb/dev/commodore/emulators/vice-2.4.28/config.sub",
		"/mnt/sdc1/chitselb/dev/commodore/emulators/vice-2.4.28/configure",
		"/mnt/sdc1/chitselb/dev/commodore/emulators/vice-2.4.28/t.t",
		"/home/chitselb/dev/commodore/pettil/Makefile",
		"/home/chitselb/dev/commodore/vic20/vickeymap.txt",
		"/home/chitselb/vickeymap.txt",
		"/home/chitselb/dev/commodore/pettil/tmp/symtab.csv",
		"/home/chitselb/dev/commodore/activity.log",
		"/home/chitselb/dev/commodore/pettil/docs/statictiddlers/F83 05. Definitions of Terms.tid",
		"/home/chitselb/dev/commodore/pettil/docs/statictiddlers/AboutPETTIL.tid",
		"/home/chitselb/dev/commodore/pettil/README",
		"/home/chitselb/dev/commodore/pettil/docs/statictiddlers/F83 Appendix B. Uncontrolled Reference Words.tid",
		"/home/chitselb/.vice/sdl-vicerc",
		"/home/chitselb/dev/commodore/pettil/t.t"
	],
	"find":
	{
		"height": 56.0
	},
	"find_in_files":
	{
		"height": 135.0,
		"where_history":
		[
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src",
			"/home/chitselb/Documents/dev/commodore/vice-3.2/src",
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src",
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src,/home/chitselb/.config/sublime-text-3/Packages/DA UI",
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src",
			"/home/chitselb/Documents/dev/commodore/pettil/src",
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src,/home/chitselb/Documents/dev/commodore/pettil/src",
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src",
			"/home/chitselb/dev/commodore/pettil/core/src,/home/chitselb/dev/commodore/pettil/studio/src",
			"/home/chitselb/dev/commodore/pettil/core/src,/home/chitselb/dev/commodore/pettil/studio/src,/home/chitselb/dev/commodore/pettil/docs/statictiddlers",
			"/home/chitselb/dev/commodore/pettil/core/src,/home/chitselb/dev/commodore/pettil/studio/src",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"eighty",
			"plugh",
			"userspan",
			"userin",
			"userspan",
			".word span",
			"^_name",
			".word _name",
			".word skip",
			"skip",
			"eighty",
			"ACC+2*N7",
			"N7",
			"N7+1",
			"40|80",
			"tickstream",
			"wraprolls",
			"_block",
			"bufwrap",
			"dwrapfetch",
			"drwapfetch",
			"iddot",
			".word _block",
			"userpwrap",
			"forty",
			"^#include \".*$",
			"xyzzy",
			"plugh",
			"expect",
			"_query",
			"blkfetch",
			"SIB",
			"plugh",
			"eoss",
			"RVSOFF",
			"_editchongo",
			".word scr",
			".word scr ",
			"\\.word scr ",
			"scr",
			"editrestore",
			"INFO",
			"donp",
			"RVS",
			"_info",
			"pdq",
			"_info",
			"_block",
			"drop",
			"_editmode",
			"_block",
			"_list",
			"restore",
			"__editin",
			"_list",
			".word scr",
			".word _block",
			".word scr",
			"scr",
			"_list",
			"xyzzy",
			"pquerycolon",
			"pquerycolon02",
			"_bufwrap",
			"_block",
			"\\$..,y",
			"compilingq",
			".word rdrop",
			"swaps",
			"wraprolls",
			"wrapstore",
			"twodrop",
			"psize",
			"_pktsize",
			"wraprolls",
			"deadbeef",
			"wrapumax",
			"pettil.mon",
			"wrapstore",
			"size",
			"VICE monitor",
			"mon_out",
			"wrapumax",
			"^swap",
			"wrapumax",
			"lda stack",
			"wrapumax",
			"LPERSCR",
			"wrapstore",
			"wrapumax",
			"wrapstore",
			"^wraprolls",
			"wrapumax",
			"^_block",
			"editingq",
			"numblk",
			"pupd2",
			"_editmode",
			"editing",
			"_list",
			"editing",
			"^wrap",
			"dwrapfetch",
			"wrapumax",
			"qrefill",
			"N7",
			"CR,CR",
			"fail",
			"userwarning",
			"_errormsg",
			"errptr",
			"welcome to pettil",
			"wrap",
			"wrapumax",
			"qrefill",
			"reload",
			"qreload",
			"name=LOAD",
			"dwrap",
			"^lin",
			"userlin",
			"threecfetch",
			"xyzzy",
			"plugh",
			"blk",
			"sib[^a-z]",
			"sib",
			"250"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"",
			" ",
			"",
			"^$",
			"$",
			"",
			";",
			"bk .",
			"^bk .",
			"crap",
			"wget https://web.archive.org/web/20051201020459/http://freespace.virgin.net:80/ken.ross1/\\1",
			"\\2",
			" ",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19500,
						"regions":
						{
						},
						"selection":
						[
							[
								10119,
								10119
							]
						],
						"settings":
						{
							"auto_name": "[Return to Main Page] NMOS 6502 Opcodes by John Pi",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4370.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "studio/src/pettil-editor.a65",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27284,
						"regions":
						{
						},
						"selection":
						[
							[
								1759,
								1759
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1149.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "core/src/core-io.a65",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16796,
						"regions":
						{
						},
						"selection":
						[
							[
								4032,
								4032
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2700.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "core/src/inc/cbm.def",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9830,
						"regions":
						{
						},
						"selection":
						[
							[
								1186,
								1186
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "studio/src/pettil-name.a65",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13260,
						"regions":
						{
						},
						"selection":
						[
							[
								10711,
								10711
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6331.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 952,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										166,
										172
									],
									[
										384,
										390
									],
									[
										483,
										489
									],
									[
										637,
										643
									],
									[
										840,
										846
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								172,
								172
							]
						],
						"settings":
						{
							"color_scheme": "Packages/BetterFindBuffer/FindResults.hidden-tmTheme",
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "studio/src/pettil-interpreter.a65",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13649,
						"regions":
						{
						},
						"selection":
						[
							[
								2502,
								2502
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1889.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "core/src/core-vm.a65",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40147,
						"regions":
						{
						},
						"selection":
						[
							[
								14110,
								14110
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11269.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "studio/src/pettil-studio.a65",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10338,
						"regions":
						{
						},
						"selection":
						[
							[
								8723,
								8723
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5513.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "core/src/core-extra.a65",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10842,
						"regions":
						{
						},
						"selection":
						[
							[
								7220,
								7220
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7151.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 10,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3411,
						"regions":
						{
						},
						"selection":
						[
							[
								223,
								223
							]
						],
						"settings":
						{
							"auto_name": "_qrefill",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 33.0
	},
	"input":
	{
		"height": 36.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 103.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "pettil.sublime-project",
	"replace":
	{
		"height": 95.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"tiddly",
				"docs/statictiddlers/tiddlywiki.info"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 199.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
