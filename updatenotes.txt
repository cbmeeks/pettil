
: pkt.size    ( pkt -- pkt size )
    dup @ psize ;

: pkt.next    ( pkt -- pkt' )
    pkt.size - ;

: floor   ( pkt -- addr )
	pkt.nxt 2+ ;

: vmbottom   ( -- addr )
	vmbuf @  dup @
	if  floor  then ;

: update   ( -- )
( bottom ) ( bottom - 1024 + size ) ( floor - bottom )


	vmbottom dup 1024 - <n8 pkt.size dup>r +under r> - third -



    vmbottom 					\ bottom
	<n8 pkt.next 2+				\ bottom floor
	over - 						\ bottom howmany

	vmbottom 					\ bottom
	<n8 pkt.size  				\ bottom pkt size
	dup>r 						\ bottom pkt size      		r; size
 	- 2+ 						\ bottom floor 				r; size
 	over - rswap 				\ bottom size 				r; howmany
 	over b/buf - + 				\ from to






	dup>r - 2+ 					\ bottom floor 				r; size




	2dup - 2+ 2>r r@ 			\ pkt floor  			r; floor size

	dup>r - 2+ 					\ bottom top  				r; size
	over - 						\ bottom howmany
	over b/buf - r> +  dup>r 	\ from howmany to 			r; newbottom
	swap cmove



bottom - b/buf + size = to
top - bottom = howmany




    2dup - 						\ bottom howmany
    over b/buf - r> +

	tuck - 2+ 					\ bottom size pkt'
	third	  					\ bottom size pkt' bottom
	2over + b/buf - 2>r 		\ bottom size pkt'    		r; newbottom bottom
	rot -
	over + b/buf - dup>r 		\ bottom target  r; newbottom

    2dup + b/buf - dup>r 		\ pkt size bottom bottom+size-1024

    dup b/buf -
    2dup - 						\ size
	  2>r
	r@  2r@ + b/buf -  2r> -
	cmove


		2dup 2dup + b/buf - -rot
		-

    cmove
    rlencode



code update
	brk
	set | N0 , uservmbuf
	ldd | N0
	st | N0
	ldd | N0
	popd | N0
