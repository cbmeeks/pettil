#define	CLRSCR		$93
#define	TIME		$8d	; Real-Time Jiffy Clock (approx) 1/60 Sec, lowest zeropage used by kernel
#define	CINV		$90	;"Vector: Hardware Interrupt [3: E62E, 4: E455]
#define	CBINV		$92	;"Vector: BRK Instr. Interrupt [3: FD17, 4: D478]
#define	NMINV		$94	;"Vector: Non-Maskable Interrupt [3:C389,4: B3FF]
#define	STATUS		$96	; Kernel I/O Status byte (ST)
#define	LSTX		$97	; Current Key Pressed 255 = No Key
#define	STKEY		$9b	;"Flag: STOP key / RVS key
#define	VERCK		$9d	; Flag 0 = Load, 1 = Verify (Kernel & BASIC)
#define	INDX		$a1	; Pointer End of Logical Line for INPUT
#define	CRSW		$ac	; Flag INPUT or GET from Keyboard
#define	LDTND		$ae	; No. of Open Files / Index to File Table
#define	DFLTN		$af	; Default Input Device (0)
#define	TAPEID		$b4	; Tape buffer leading character (eg 1=PRG 2=DATA 3= 4=SEQ 5=EOT)
#define	CNTDN		$ba	; Cassette Write/Sync Countdown (64=00A5)
#define	BUFPNT		$bb	;"Pointer: Tape I/O Buffer #1 (00-C0)
			;bc	 "Pointer: Tape I/O Buffer #2 (00-C0)
#define RIPRTY		$c3	; "Cassette Short Cnt (64=00AB): counter of seconds before tape write / checksum
#define	PNT		$c4	; pointer current screen line address
#define	PNTR		$c6	; Cursor Column on Current Line
#define	SAL		$c7	; pointer - tape buffer/screen scrolling
#define	EAL		$c9	; Tape End Addresses/End of Program
#define	FNLEN		$d1	; Length of Current File Name
#define	LA		$d2	; Current Logical File Number
#define	SA		$d3	; Current Secondary Address
#define	FA		$d4	; First Address (current device number)
#define TAPE1		$d6	; pointer - start of tape buffer (027a or 033a)
#define	DATAX		$d9	; Current Character to Print
#define	FNADR		$da	; file name address
#define	LDTB1		$e0	; 25-byte screen wrap table
#define	STAL		$fb	; I/O Start Address
#define	BUF		$200	; System input buffer 0200-0250
#define	KBBUF		$026f	; keyboard input buffer
#define	CAS1BUF		$027a
#define	CAS2BUF		$033a

VIDRAM		= $8000

#define	KBDECODE	$e60b	; keyboard decode table (80 characters)
#define	SCRLINLO	$e65b	; Table of 25 low bytes marking the end of each line
#define	DLSTRUN		$e673	; dL"*<cr>run<cr>

; low-level tape i/o entry points
#define PRESSRECORD	$f88c	; press play & record
#define TAPEWRITE	$f8d3	; write arbitrary data to tape 
#define SAVEHEADER	$f619	; write file header

; see "Programming The PET/CBM" p. 384
PIA1		= $e810
PIA1PORTA	= PIA1+0
PIA1CRA		= PIA1+1
PIA1PORTB	= PIA1+2
PIA1CRB		= PIA1+3

PIA2		= $e820
PIA2PORTA	= PIA2+0
PIA2CRA		= PIA2+1
PIA2PORTB	= PIA2+2
PIA2CRB		= PIA2+3

VIA		= $e840
VIAORB		= VIA+0		; internal to PET
VIAORA		= VIA+1		; data with handshake
VIAPDRB		= VIA+2
VIADDRA		= VIA+3		; data direction
VIAT1LW		= VIA+4
VIAT1CH		= VIA+5
VIAT1LL		= VIA+6
VIAT1LH		= VIA+7
VIAT2LW		= VIA+8
VIAT2CH		= VIA+9
VIASR		= VIA+$a	; shift register
VIAACR		= VIA+$b	; auxilliary control
VIAPCR		= VIA+$c	; peripheral control
VIAIFR		= VIA+$d	; interrupt flags
VIAIER		= VIA+$e	; interrupt enable
VIAORAN		= VIA+$f	; data no handshake

; new ROM only
#ifdef PET_ROM4
#define	CONCAT		$ff93
#define	DOPEN		$ff96
#define	DCLOSE		$ff99
#define	RECORD		$ff9c
#define	HEADER		$ff9f
#define	COLLECT		$ffa2
#define	BACKUP		$ffa5
#define	COPY		$ffa8
#define	APPEND		$ffab
#define	DSAVE		$ffae
#define	DLOAD		$ffb1
#define	DIRECTORY	$ffb4
#define	RENAME		$ffb7
#define	SCRATCH		$ffba
#define	UNKNOWN		$ffbd
#define	OPEN		$f563	; ($ffc0)+3 skips over the BASIC param setup
#define	CLOSE		$f2e0	; ($ffc3)+3 skips over param setup
#define	MSGOUT		$f185	; print out a system message
#endif
; all ROMs
#define	CHKIN		$ffc6	; Set input device
#define	CHKOUT		$ffc9	; Set output device
#define	CLRCHN		$ffcc	; Restore default I/0 devices
#define	CHRIN		$ffcf	; Input character
#define	CHROUT		$ffd2	; Output character
#define	LOAD		$ffd5
#define	SAVE		$ffd8
#define	SETTIM		$ffdb ; VERIFY in original ROM ~ Is this still VERIFY?
#define	RDTIM		$ffde ; SYS in original ROM ~ Is this still SYS?
#define	STOP		$ffe1 ; GETSTOP in original ROM
#define	GETIN		$ffe4	; Get character 
#define	CLALL		$ffe7
#define	UDTIM		$ffea

NMI		= $fffa
RES		= $fffc
IRQ		= $fffe


