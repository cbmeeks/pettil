#define	CLRSCR		$93
#define	TIME		$8d	; Real-Time Jiffy Clock (approx) 1/60 Sec, lowest zeropage used by kernel
#define	CINV		$90	;"Vector: Hardware Interrupt [3: E62E, 4: E455]
#define	CBINV		$92	;"Vector: BRK Instr. Interrupt [3: FD17, 4: D478]
#define	NMINV		$94	;"Vector: Non-Maskable Interrupt [3:C389,4: B3FF]
#define	STATUS		$96	; Kernel I/O Status byte (ST)
#define	LSTX		$97	; Current Key Pressed 255 = No Key
#define	VERCK		$9D	; Flag 0 = Load, 1 = Verify (Kernel & BASIC)
#define	INDX		$a1	; Pointer End of Logical Line for INPUT
#define	CRSW		$ac	; Flag INPUT or GET from Keyboard
#define	DFLTN		$af	; Default Input Device (0)
#define	TAPEID		$b4	; Tape buffer leading character (eg 1=PRG 2=DATA 3= 4=SEQ 5=EOT)
#define RIPRTY		$c3	; "Cassette Short Cnt (64=00AB): counter of seconds before tape write / checksum
#define	PNT		$c4	; pointer current screen line address
#define	PNTR		$c6	; Cursor Column on Current Line
#define	SAL		$c7	; pointer - tape buffer/screen scrolling
#define	EAL		$c9	; Tape End Addresses/End of Program
#define	FNLEN		$d1	; Length of Current File Name
#define	FA		$d4	; First Address (current device number)
#define TAPE1		$d6	; pointer - start of tape buffer (027a or 033a)
#define	DATAX		$d9	; Current Character to Print
#define	FNADR		$da	; file name address
#define	LDTB1		$e0	; 25-byte screen wrap table
#define	STAL		$fb	; I/O Start Address
#define	BUF		$200	; System input buffer 0200-0250
#define	KBBUF		$026f	; keyboard input buffer
#define	CAS1BUF		$027a
#define	CAS2BUF		$033a

#define	VIDRAM		$8000

#define	KBDECODE	$e60b	; keyboard decode table (80 characters)
#define	SCRLINLO	$e65b	; Table of 25 low bytes marking the end of each line
#define	DLSTRUN		$e673	; dL"*<cr>run<cr>

; low-level tape i/o entry points
#define PRESSRECORD	$f88c	; press play & record
#define TAPEWRITE	$f8d3	; write arbitrary data to tape 
#define SAVEHEADER	$f619	; write file header

; see "Programming The PET/CBM" p. 384
#define	PIA1		$e810
#define	PIA1PORTA	PIA1+0
#define	PIA1CRA		PIA1+1
#define	PIA1PORTB	PIA1+2
#define	PIA1CRB		PIA1+3

#define	PIA2		$e820
#define	PIA2PORTA	PIA2+0
#define	PIA2CRA		PIA2+1
#define	PIA2PORTB	PIA2+2
#define	PIA2CRB		PIA2+3

#define	VIA			$e840
#define	VIAORB		VIA+0		; internal to PET
#define	VIAORA		VIA+1		; data with handshake
#define	VIAPDRB		VIA+2
#define	VIADDRA		VIA+3		; data direction
#define	VIAT1LW		VIA+4
#define	VIAT1CH		VIA+5
#define	VIAT1LL		VIA+6
#define	VIAT1LH		VIA+7
#define	VIAT2LW		VIA+8
#define	VIAT2CH		VIA+9
#define	VIASR		VIA+$a	; shift register
#define	VIAACR		VIA+$b	; auxilliary control
#define	VIAPCR		VIA+$c	; peripheral control
#define	VIAIFR		VIA+$d	; interrupt flags
#define	VIAIER		VIA+$e	; interrupt enable
#define	VIAORAN		VIA+$f	; data no handshake

; new ROM only
#ifdef PET_ROM4
#define	CONCAT		$ff93
#define	DOPEN		$ff96
#define	DCLOSE		$ff99
#define	RECORD		$ff9c
#define	HEADER		$ff9f
#define	COLLECT		$ffa2
#define	BACKUP		$ffa5
#define	COPY		$ffa8
#define	APPEND		$ffab
#define	DSAVE		$ffae
#define	DLOAD		$ffb1
#define	DIRECTORY	$ffb4
#define	RENAME		$ffb7
#define	SCRATCH		$ffba
#define	UNKNOWN		$ffbd
#endif
; all ROMs
#define	OPEN		$ffc0
#define	CLOSE		$ffc3
#define	CHKIN		$ffc6	; Set input device
#define	CHKOUT		$ffc9	; Set output device
#define	CLRCHN		$ffcc	; Restore default I/0 devices
#define	CHRIN		$ffcf	; Input character
#define	CHROUT		$ffd2	; Output character
#define	LOAD		$ffd5
#define	SAVE		$ffd8
#define	SETTIM		$ffdb ; VERIFY in original ROM ~ Is this still VERIFY?
#define	RDTIM		$ffde ; SYS in original ROM ~ Is this still SYS?
#define	STOP		$ffe1 ; GETSTOP in original ROM
#define	GETIN		$ffe4	; Get character 
#define	CLALL		$ffe7
#define	UDTIM		$ffea

#define	NMI			$fffa
#define	RES			$fffc
#define	IRQ			$fffe


