;--------------------------------------------------------------
;
;       WRAPABOVE   ( logline -- d )
;
; Reads (a portion of) the linewrap table above the current physical
; line (stored at $d8) up to but not including the current logical line.  
; Returns a right-aligned double with a copy of those high bit values
;
;wrapabovelfa
;    .byt $de,$ad
;    .byt (wrapabove-*-1)|bit7
;    .asc "WRAPABOV","E"|bit7
wrapabove
    stx storex      ; preserve Forth data stack pointer
    ldy tos         ; first physical line of this logical line
    sty n+2
    ldx #0
    stx n+1
    stx n
    stx tos+1
    stx tos
    ldx #$ff
wrapabove02
    inx
    cpx n+2         ; are we there yet?
    beq wrapabove03 ; leave if done
    lda $e0,x 
    asl             ; nondestructively
    rol tos
    rol tos+1
    rol n
    rol n+1         ; append the next high bit to the double
    beq wrapabove02 ; this should always take the branch
wrapabove03
    lda n
    ldy n+1         ; high half of the double is going on the stack
    ldx storex      ; restore Forth data stack pointer
    jmp pushya

;--------------------------------------------------------------
;
;       WRAPFILL   ( d 40|80 -- d flag )
;
; Shift and append one or two bits to the double.  Return nonzero
; once 25 bits have been stored.  40 = <<,1; 80 = <<,1 <<,0
;
;wrapfilllfa
;    .byt $de,$ad
;    .byt (wrapfill-*-1)|bit7
;    .asc "WRAPFIL","L"|bit7
wrapfill
    sec             ; always shift in a 1
wrapfill01
    ldy stackh,x
    bne wrapfill03
    rol stackl+1,x  ; shift in a single bit
    rol stackh+1,x
    rol stackl,x
    rol stackh,x
    lda #40
    cmp tos
    sta tos         ; so we only do this once
    bcc wrapfill01  ; maybe shift in a 0 (if 80-column)
wrapfill03
    ldy stackh,x
    tya
    jmp put

;--------------------------------------------------------------
;
;       WRAP!   ( d -- )
;
; Updates the linewrap table at $E0 to reflect the bits
; stored in d.  Since line 0 is *always* $80, never a continuation 
; line, only 24 bits are required, not 25.
;
wrapstore
    ldy #1
    jsr locals
    stx storex
    ldx #24
wrapstore01
    asl $e0,x
    lsr tos+1
    ror tos
    ror n+1
    ror n
    ror $e0,x
    dex
    bne wrapstore01
    ldx storex
    jmp pops

;--------------------------------------------------------------
;
;       LINEINFO   ( logline -- addr 40|80 )
;
; return the start address and length of the logical line
; logline must already point to the first line of the logical line
;
;lineinfolfa
;    .byt $de,$ad
;    .byt (lineinfo-*-1)|bit7
;    .asc "LINEINF","O"|bit7
lineinfo
    stx storex
    ldx tos
    lda WRAPLO,x
    sta tos
    lda $e0,x
    sta tos+1
    lda #40
    cpx #24
    beq lineinfo01
    ldy $e1,x
    bmi lineinfo01
    asl                     ; 80 char
lineinfo01
    ldy #0
    ldx storex
    jmp pushya

;--------------------------------------------------------------
;
;       LOGLINE   ( -- logline )
;
; return the physical line number of the current logical line.
; The return value is the first line of the logical line, which
; may be the physical line of the cursor or the line above it.
; From this position, leapfrogging forward through the screen will
; always return addresses with bit7 set.
;
; A man with a watch always knows what time it is.  A man 
; with two watches is never sure.
;
;loglinelfa
;    .byt $de,$ad
;    .byt (logline-*-1)|bit7
;    .asc "LOGLIN","E"|bit7
logline
    stx storex
    ldx $d8
    inx
logline01
    dex
    ldy $e0,x
    bpl logline01
    txa
    ldy #0
    ldx storex
    jmp pushya

;--------------------------------------------------------------
;
;       LOGLINE+   ( logline -- logline+|0 )
;
; Return the next logical line number or 0 after bottom of screen
;
;loglinepluslfa
;    .byt $de,$ad
;    .byt (_loglineplus-*-1)|bit7
;    .asc "LOGLINE","+"|bit7
loglineplus
    stx storex
    lda #0
    ldx tos
loglineplus01
    cpx #24
    beq loglineplus02
    inx
    ldy $e0,x
    bpl loglineplus01
    txa
loglineplus02
    ldy #0
    ldx storex
    jmp put

;--------------------------------------------------------------
;
;       PASTE   ( -- addr )
;
; Return the tail of the paste buffer, marked by 0
;
; The paste buffer begins at PAD and consists of zero or more
; screen lines, stored as a length (40|80) followed by that many
; screen codes.  Each record is 41 or 81 bytes long.
;
;": paste
;    pad                     ( pad )
;    begin
;        dup                 ( addr addr )
;        c@                  ( addr len )
;        ?dup                ( addr 0 | addr len len )
;    while                   ( addr len )
;        +                   ( len+addr )
;        1+                  ( newaddr )
;    repeat ; [19]           ( addr )
;
pastelfa
    .byt $de,$ad
    .byt (_paste-*-1)|bit7
    .asc "PAST","E"|bit7
_paste
#include "enter.i65"
    .word _pad
#include "page.i65"
    .word to6502
    brk
paste01
    .byt ldi | TOS
    .byt bz , <(paste02-*-2)
    .byt add | TOS
    .byt st | TOS
    .byt br , <(paste01-*-2)
paste02
    .byt nxt    ; [16]

;--------------------------------------------------------------
;
;       (>PASTE)   ( paste screen 40|80 -- paste+len+1 screen+len screen paste+1 len )
;
; set up the stack to append the line on the screen to the paste buffer with cmove
;
;": (>paste)
;     >r swap r@ over c!   ( screen paste ; 40|80 )
;     1+ 2dup r@ cmove   ( screen paste+1 ) 
;     r@ + dup off swap r> + ; [37]
;
;
;ptopastelfa
;    .byt $de,$ad
;    .byt (ptopaste-*-1)|bit7
;    .asc "(>PASTE",")"|bit7
;_ptopaste
;#include "enter.i65"
;    .word tor
;#include "page.i65"
;    .word swap
;#include "page.i65"
;    .word rfetch
;#include "page.i65"
;    .word over
;#include "page.i65"
;    .word cstore
;#include "page.i65"
;    .word oneplus
;#include "page.i65"
;    .word _twodup
;#include "page.i65"
;    .word rfetch
;#include "page.i65"
;    .word cmove
;#include "page.i65"
;    .word rfetch
;#include "page.i65"
;    .word plus
;#include "page.i65"
;    .word dup
;#include "page.i65"
;    .word off
;#include "page.i65"
;    .word swap
;#include "page.i65"
;    .word rfrom
;#include "page.i65"
;    .word plus
;#include "page.i65"
;    .word exit
;
ptopaste
    ldy #2
    jsr locals
    brk                         ; TOS = len; N0 = paste; N1 = screen
    .byt ld | TOS
    .byt sti | N0               ; len paste c! paste 1+!
    .byt st | N2                ; copy of len
    .byt add | N0
    .byt st | TOS               ; paste+len+1
    .byt st | N3
    .byt sub | R0
    .byt std | N3               ; off
    .byt ld | N1
    .byt add | N2
    .byt push                   ; screen+len
    .byt ld | N1
    .byt push                   ; screen
    .byt ld | N0
    .byt push                   ; paste+1
    .byt ld | N2
    .byt push                   ; len
    .byt nxt                    ; [27]

;--------------------------------------------------------------
;
;       EOS>PASTE   ( paste logline -- )
;
; append every line from the logical line passed in (expected to be
; nonzero ) to the end of screen to the paste buffer.
;    
;": eos>paste   ( paste logline -- )
;     begin
;         ?dup
;     while
;         dup logline+ >r       ( paste logline ) ( R; logline+ )
;         lineinfo              ( paste screen 40|80 ) ( R; logline+ )
;         >paste drop           ( paste+ ) ( R; logline+ )
;         r>
;     repeat
;     drop ;
;
;eostopastelfa
;    .byt $de,$ad
;    .byt (_eostopaste-*-1)|bit7
;    .asc "EOS>PAST","E"|bit7
_eostopaste
#include "enter.i65"
eostopaste01                    ; BEGIN
    .word qdup
#include "page.i65"
    .word qbranch               ; WHILE
    .byt <(eostopaste02-*+1)
#include "pad.i65"
    .word dup
#include "page.i65"
    .word loglineplus
#include "page.i65"
    .word tor
#include "page.i65"
    .word lineinfo
#include "page.i65"
    .word ptopaste              ; ( paste+ screen+ screen paste+1 len )
#include "page.i65"
    .word cmove
#include "page.i65"
    .word drop
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word branch                ; REPEAT
    .byt <(eostopaste01-*+1)
#include "pad.i65"
eostopaste02
    .word drop
#include "page.i65"
    .word exit


;--------------------------------------------------------------
;
;       TEST25   ( screenaddr offset -- screenaddr offset|40 )
;
; Adjusts the offset from anything to 40 if offset+screenaddr is 
; beyond the end of the screen
;   a) to prevent overflowing the screen
;   b) for use as a flag
;
;": test25   ( offset screenaddr -- offset' screenaddr )
;     2dup + 33767 >
;     if
;         drop 40
;     then ;
;~wut? this is awful
_test25
#include "enter.i65"
    .word _twodup
#include "page.i65"
    .word plus
#include "page.i65"
    .word plit
    .word VIDRAM+1000
#include "pad.i65"
    .word gt
#include "page.i65"
    .word qbranch
    .byt <(test2501-*+1)        ; IF
#include "pad.i65"
    .word drop
#include "page.i65"
    .word clit
    .byt 40
#include "pad.i65"
test2501                        ; THEN
    .word exit

;--------------------------------------------------------------
;
;       FLAGAB   ( paste screen -- flagab )
;
; true if we've hit exit condition A or B
;
;flagablfa
;    .byt $de,$ad
;    .byt (_flagab-*-1)|bit7
;    .asc "FLAGA","B"|bit7
_flagab
#include "enter.i65"
    .word zero                  ; ( paste screen 0 )
#include "page.i65"
    .word _test25               ; ( paste screen 0|40 )
#include "page.i65"
    .word rot                   ; ( screen flagb paste )
#include "page.i65"
    .word cfetch                ; ( screen flagb len )
#include "page.i65"
    .word zeq                   ; ( screen flagb flaga )
#include "page.i65"
    .word orx                   ; ( screen flagab )
#include "page.i65"
    .word swap                  ; ( flagab screen )
#include "page.i65"
    .word drop                  ; ( flagab )
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       PASTE>   ( paste screen -- d paste+ screen+ )
;
; copy logical lines from the paste buffer to screen until
;   a) we exhaust the paste buffer
;   b) we run past the bottom of the screen
;   c) we fill up the linewrap table
;
; returns a double with the linewrap bits from line 0 until
; PASTE> reaches an exit condition, also the next paste
; buffer source address and next screen target address
;
;": paste>
;     logline ?dup
;     if
;         wrapabove             ( paste screen d )
;     else
;         1 0
;     then
;     2swap
;     begin
;         2dup flagab dup >r 0= ( d paste screen !flagab ) ( R; flagab )
;         if
;             over c@           ( d paste screen len ) ( R; flagab )
;             swap over test25  ( d paste len screen len' ) ( R; flagab )
;             2dup + >r         ( d paste len screen len' ) ( R; flagab screen' )
;             2over + 1+ >r     ( d paste len screen len' ) ( R; flagab screen' paste' )
;             2swap swap 1+     ( d screen len' len paste+1 ) ( R; flagab screen' paste' )
;             2swap cmove       ( d len ) ( R; flagab screen' paste' )
;             wrapfill          ( d flag ) ( R; flagab screen' paste' )
;             r> r> rot r>      ( d flag paste' screen' flagc flagab ) ( R; )
;             or >r             ( d paste' screen' ) ( R; flagabc )
;         then
;         r>
;     until ;
;
;pastefromlfa
;    .byt $de,$ad
;    .byt (_pastefrom-*-1)|bit7
;    .asc "PASTE",">"|bit7
_pastefrom
#include "enter.i65"
    .word logline               ; ( paste screen logline )
#include "page.i65"
    .word qdup
#include "page.i65"
    .word qbranch               ; IF
    .byt <(pastefrom01-*+1)
#include "page.i65"
    .word wrapabove
#include "page.i65"
    .word branch                ; ELSE
    .byt <(pastefrom02-*+1)
#include "page.i65"
pastefrom01
    .word zero
#include "page.i65"
    .word zero
#include "page.i65"
pastefrom02                     ; THEN
#include "page.i65"
    .word twoswap               ; ( d paste screen )
#include "page.i65"
pastefrom03
    .word _twodup               ; ( d paste screen paste screen )
#include "page.i65"
    .word _flagab               ; ( d paste screen flagab )
#include "page.i65"
    .word dup                   ; ( d paste screen flagab flagab )
#include "page.i65"
    .word tor                   ; ( d paste screen flagab ) ( R; flagab )
#include "page.i65"
    .word zeq                   ; ( d paste screen !flagab ) ( R; flagab )
#include "page.i65"
    .word qbranch               ; IF
    .byt <(pastefrom04-*+1)
#include "pad.i65"
    .word over                  ; ( d paste screen paste ) ( R; flagab )
#include "page.i65"
    .word cfetch                ; ( d paste screen len ) ( R; flagab )
#include "page.i65"
    .word swap                  ; ( d paste len screen ) ( R; flagab )
#include "page.i65"
    .word over                  ; ( d paste len screen len ) ( R; flagab )
#include "page.i65"
    .word _test25               ; ( d paste len screen len' ) ( R; flagab )
#include "page.i65"
    .word _twodup               ; ( d paste len screen len' screen len' ) ( R; flagab )
#include "page.i65"
    .word plus                  ; ( d paste len screen len' screen' ) ( R; flagab )
#include "page.i65"
    .word tor                   ; ( d paste len screen len' ) ( R; flagab screen' )
#include "page.i65"
    .word twoover               ; ( d paste len screen len' paste len ) ( R; flagab screen' )
#include "page.i65"
    .word plus                  ; ( d paste len screen len' paste+len ) ( R; flagab screen' )
#include "page.i65"
    .word oneplus               ; ( d paste len screen len' paste' ) ( R; flagab screen' )
#include "page.i65"
    .word tor                   ; ( d paste len screen len' ) ( R; flagab screen' paste' )
#include "page.i65"
    .word twoswap               ; ( d screen len' paste len ) ( R; flagab screen' paste' )
#include "page.i65"
    .word swap                  ; ( d screen len' len paste ) ( R; flagab screen' paste' )
#include "page.i65"
    .word oneplus               ; ( d screen len' len paste+1 ) ( R; flagab screen' paste' )
#include "page.i65"
    .word twoswap               ; ( d len paste+1 screen len' ) ( R; flagab screen' paste' )
#include "page.i65"
    .word cmove                 ; ( d len ) ( R; flagab screen' paste' )
#include "page.i65"
    .word wrapfill              ; ( d flagc ) ( R; flagab screen' paste' )
#include "page.i65"
    .word rfrom                 ; ( d flagc paste' ) ( R; flagab screen' )
#include "page.i65"
    .word rfrom                 ; ( d flagc paste' screen' ) ( R; flagab )
#include "page.i65"
    .word rot                   ; ( d paste' screen' flagc ) ( R; flagab )
#include "page.i65"
    .word rfrom                 ; ( d paste' screen' flagc flagab ) ( R; )
#include "page.i65"
    .word orx                   ; ( d paste' screen' flagabc ) ( R; )
#include "page.i65"
    .word tor                   ; ( d paste' screen' ) ( R; flagabc )
#include "page.i65"
pastefrom04                     ; THEN
    .word rfrom
#include "page.i65"
    .word qbranch               ; UNTIL 
    .byt <(pastefrom03-*+1)
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       PKT@ ( n -- packet )
;
; Return the packet address of block n
;
;": pkt@   ( n -- packet )
;     blkbuf 2-
;     begin
;         over 0>
;     while
;         dup @
;         - swap 1- swap
;     repeat
;     swap drop ;
;
pktfetchlfa
    .byt $de,$ad
    .byt (_pktfetch-*-1)|bit7
    .asc "PKT","@"|bit7
_pktfetch
#include "enter.i65"
    .word _blkbuf
#include "page.i65"
    .word twominus
#include "page.i65"
pktfetch01
    .word over
#include "page.i65"
    .word zgt
#include "page.i65"
    .word qbranch
    .byt <(pktfetch02-*+1)
#include "pad.i65"
    .word dup
#include "page.i65"
    .word fetch
#include "page.i65"
    .word minus
#include "page.i65"
    .word swap
#include "page.i65"
    .word oneminus
#include "page.i65"
    .word swap
#include "page.i65"
    .word branch
    .byt <(pktfetch01-*+1)
#include "pad.i65"
pktfetch02
    .word swap
#include "page.i65"
    .word drop
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       PKT+ (  -- packet )
;
; Append a new packet to the bottom of vmbuf, return its address
;
;": pkt+   ( -- packet )
;     vmbuf @ 14 2dup 2dup - tuck   ( vmbuf 14 vmbuf vmbuf-14 14 vmbuf-14 )
;     vmbuf !  erase  !             ( vmbuf )
;     vmsiz 1+! ;                   ( vmbuf )
;
pktpluslfa
    .byt $de,$ad
    .byt (_pktplus-*-1)|bit7
    .asc "PKT","+"|bit7
_pktplus
#include "enter.i65"
    .word vmbuf
#include "page.i65"
    .word fetch
#include "page.i65"
    .word clit
    .byt 14
#include "pad.i65"
    .word _twodup
#include "page.i65"
    .word _twodup
#include "page.i65"
    .word minus
#include "page.i65"
    .word _tuck
#include "page.i65"
    .word vmbuf
#include "page.i65"
    .word store
#include "page.i65"
    .word _erase
#include "page.i65"
    .word store
#include "page.i65"
    .word vmsiz
#include "page.i65"
    .word oneplusstore
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       UNPKT ( packet -- blkbuf )
;
; Given the address of a packet (its size word, at the end)
; this will unpack the packet to the block buffer and return
; the address of the unpacked block
;
;": unpkt   ( packet -- blkbuf )
;     >r                             ( ) ( R; packet )
;     blkbuf dup dup b/buf blank     ( blkbuf blkbuf ) ( R; packet )
;     r@ @ 2- r>                     ( blkbuf blkbuf srclen packet )
;     over -                         ( blkbuf blkbuf srclen source )
;     -rot                           ( blkbuf source blkbuf srclen )
;     rldecode ;                     ( blkbuf )
;
unpktlfa
    .byt $de,$ad
    .byt (_unpkt-*-1)|bit7
    .asc "UNPK","T"|bit7
_unpkt
#include "enter.i65"
    .word tor
#include "page.i65"
    .word _blkbuf
#include "page.i65"
    .word dup
#include "page.i65"
    .word dup
#include "page.i65"
    .word bperbuf
#include "page.i65"
    .word _blank
#include "page.i65"
    .word rfetch
#include "page.i65"
    .word fetch
#include "page.i65"
    .word twominus
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word over
#include "page.i65"
    .word minus
#include "page.i65"
    .word _dashrot
#include "page.i65"
    .word rldecode
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       (BLOCK)   ( blk -- addr new? )
;
; return the buffer address of block N. Create it if necessary.
; flag is true if the block is new, false if it already exists
;
; *** TRICK ALERT ***
; Uses the address on the return stack to determine if the caller 
; was the screen editor.  Then does an OR with $8000 (VIDRAM)
; on the packet length, setting the "editable" flag on the block.
;
; Any other caller creates a data block.
;
;": (block)   ( blk -- addr new? )
;     vmsiz @ over >  dup       ( blk flag flag )
;     if
;                               ( block does not exist, create it )
;                               ( blk flag 
;         0 swap 1+ vmsiz @
;         do
;             drop pkt+
;         loop
;     else
;                               ( block exists, get the packet addr )
;         pkt@
;     then





;     swap unpkt swap ;
;
;pblocklfa
;    .byt $de,$ad
;    .byt (_pblock-*-1)|bit7
;    .asc "(BLOCK",")"|bit7
_pblock
#include "enter.i65"
    .word vmsiz
#include "page.i65"
    .word fetch
#include "page.i65"
    .word over
#include "page.i65"
    .word gt
#include "page.i65"
    .word dup
#include "page.i65"
    .word qbranch           ; IF
    .byt <(pblock01-*+1)
#include "pad.i65"
    .word _pktfetch
#include "page.i65"
    .word false
#include "page.i65"
    .word branch
    .byt <(pblock03-*+1)
#include "page.i65"
pblock01                    ; ELSE
    .word zero
#include "page.i65"
    .word swap
#include "page.i65"
    .word oneplus
#include "page.i65"
    .word vmsiz
#include "page.i65"
    .word fetch
#include "page.i65"
    .word pdo               ; DO
#include "page.i65"
pblock02
#include "page.i65"
    .word xyzzy
#include "page.i65"
    .word rfetch
#include "page.i65"
    .word plit
    .word screencreatedblock
#include "pad.i65"
    .word eq
#include "page.i65"
    .word twodrop
#include "page.i65"
    .word _pktplus
#include "page.i65"
    .word ploop             ; LOOP
    .byt <(pblock02-*+1)
#include "pad.i65"
    .word true
#include "page.i65"
pblock03                    ; THEN
    .word swap
#include "page.i65"
    .word _unpkt
#include "page.i65"
    .word swap
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       (SCR!)   ( pkt blkbuf newsize oldsize vmbuf -- blkbuf pkt-newsize+2 newsize vmbuf vmbuf+oldsize-newsize pkt-oldsize-vmbuf+2 )
;
; Uses Sweet16 to take a lot of the ridiculousness out of the 
; pointer math involved in juggling packets in the buffer.
; This sets up for two MOVE operations.  The first move opens
; a hole correctly sized for the replacement packet.  The new
; packet is then moved into the hole.
;
;pscrstorelfa
;    .byt $de,$ad
;    .byt (pscrstore-*-1)|bit7
;    .asc "(SCR!",")"|bit7
pscrstore
    ldy #4
    jsr locals    ; TOS = vmbuf; N0 = pkt; N1 = blkbuf; N2 = newsize; N3 = oldsize
    brk
    .byt ld | TOS
    .byt st | R9                ; vmbuf -> R9
    .byt ld | N1
    .byt st | TOS               ; blkbuf
    .byt ldd | N0               ; pkt += 2
    .byt ld | N0
    .byt sub | N2
    .byt push                   ; pkt-newsize+2
    .byt ld | N2
    .byt push                   ; newsize               
    .byt ld | R9
    .byt push                   ; vmbuf
    .byt add | N3
    .byt sub | N2
    .byt push                   ; vmbuf+oldsize-newsize
    .byt ld | N0
    .byt sub | N3
    .byt sub | R9
    .byt push                   ; pkt-oldsize-vmbuf+2
    .byt nxt
    
;--------------------------------------------------------------
;
;       SCR!   ( scr -- )
;
; store the current screen in the block buffer.  It invokes a
; helper word to set up the pointers, then does two moves
;
;": scr!   ( scr -- )
;     pkt@ blkbuf 2dup            ( pkt blkbuf pkt blkbuf )
;     mkpkt swap @ vmbuf @        ( pkt blkbuf newsize oldsize vmbuf )
;     (scr!) move move ;
;
scrstorelfa
    .byt $de,$ad
    .byt (_scrstore-*-1)|bit7
    .asc "SCR","!"|bit7
_scrstore
#include "enter.i65"
    .word _pktfetch
#include "page.i65"
    .word _blkbuf
#include "page.i65"
    .word _twodup
#include "page.i65"
    .word _mkpkt
#include "page.i65"
    .word swap
#include "page.i65"
    .word fetch
#include "page.i65"
    .word vmbuf
#include "page.i65"
    .word fetch
#include "page.i65"
    .word pscrstore
#include "page.i65"
    .word _move
#include "page.i65"
    .word _move
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       ZBITS   ( d -- n )
;
; analyzes the double and returns the longest consecutive run of
; 0 bits in it.  e.g. $ffffffff -> 0, $deadbeef -> 1, 
; $80806502 -> 7, $00000000 -> 32
;
zbits
    ldy #1
    jsr locals
    sty n+2
    stx storex
    ldx #32
zbits02
    ldy #0
zbits03
    lsr tos+1
    ror tos
    ror n+1
    ror n
    dex
    bmi zbits04 ; done?
    bcs zbits02
    iny
    cpy n+2
    bcc zbits03
    sty n+2
    bcs zbits03 ; bra
zbits04
    ldx storex
    lda n+2
    ldy #0
    jmp put

;--------------------------------------------------------------
;
;       WRAP?   ( addr -- flag )
;
; Variable reflecting whether the current screen is text (true)
; or a data block (false)
; returns true if the three bytes at addr is valid linewrap
; (containing no double-0 bit pairs)
;": wrap?  ( 7c00 -- flag )
;     3c@ ff00 or zbits 2 < ;
wrapquerylfa
    .byt $de,$ad
    .byt (_wrapquery-*-1)|bit7
    .asc "WRAP","?"|bit7
_wrapquery
#include "enter.i65"
    .word threecfetch
#include "page.i65"
    .word plit
    .word $ff00
#include "pad.i65"
    .word orx
#include "page.i65"
    .word zbits
#include "page.i65"
    .word two
#include "page.i65"
    .word lt
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       SCR?   ( addr -- flag )
;
; Return true if the packet at addr is a valid text screen
;
;": scr?   ( addr -- flag )
;     dup wrap? over $3e8 + 21 bl skip swap drop 0= or ;
;
scrquerylfa
    .byt $de,$ad
    .byt (_scrquery-*-1)|bit7
    .asc "SCR","?"|bit7
_scrquery
#include "enter.i65"
    .word dup
#include "page.i65"
    .word _wrapquery
#include "page.i65"
    .word over
#include "page.i65"
    .word plit
    .word 1000
#include "pad.i65"
    .word plus
#include "page.i65"
    .word clit
    .byt 21
#include "page.i65"
    .word bl
#include "page.i65"
    .word skip
#include "page.i65"
    .word swap
#include "page.i65"
    .word drop
#include "page.i65"
    .word zeq
#include "page.i65"
    .word orx
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       SCRWRITE?   ( -- addr )
;
; Variable reflecting whether the current screen is text (true)
; or a data block (false)
;
scrwritequerylfa
    .byt $de,$ad
    .byt (scrwritequery-*-1)|bit7
    .asc "SCRWRITE","?"|bit7
scrwritequery
    jsr docreate
    .word 0

;--------------------------------------------------------------
;
;       SCR@   ( scr -- )
;
; Locate or create the packet for this screen, set the current
; screen variable SCR, and display it with linewrap
;
;": scr@   ( scr -- )
;     dup scr ! (block)
;     dup scrwrite? !
;     if
;         CLR emit
;         drop
;     else
;         b/buf over scr?
;         if
;             scrwrite? on
;             over 3c@ wrap!
;             3 - swap 3 + swap
;         then
;         vidram swap cmove ;
;     then ;
;
;scrfetchlfa
;    .byt $de,$ad
;    .byt (_scrfetch-*-1)|bit7
;    .asc "SCR","@"|bit7
_scrfetch
#include "enter.i65"
    .word dup
#include "page.i65"
    .word scr
#include "page.i65"
    .word store
#include "page.i65"
    .word xyzzy
#include "page.i65"
screencreatedblock
    .word _pblock
#include "page.i65"
    .word dup
#include "page.i65"
    .word scrwritequery
#include "page.i65"
    .word store
#include "page.i65"
    .word qbranch
    .byt <(scrfetch01-*+1)
#include "pad.i65"
    .word clit
    .byt CLR
#include "pad.i65"
    .word emit
#include "page.i65"
    .word drop
#include "page.i65"
    .word branch
    .byt <(scrfetch03-*+1)
#include "pad.i65"
scrfetch01
    .word bperbuf
#include "page.i65"
    .word over
#include "page.i65"
    .word _scrquery
#include "page.i65"
    .word qbranch
    .byt <(scrfetch02-*+1)
#include "pad.i65"
    .word scrwritequery
#include "page.i65"
    .word on
#include "page.i65"
    .word over
#include "page.i65"
    .word threecfetch
#include "page.i65"
    .word wrapstore
#include "page.i65"
    .word three
#include "page.i65"
    .word minus
#include "page.i65"
    .word swap
#include "page.i65"
    .word three
#include "page.i65"
    .word plus
#include "page.i65"
    .word swap
#include "page.i65"
scrfetch02
    .word vidram
#include "page.i65"
    .word swap
#include "page.i65"
    .word cmove
#include "page.i65"
scrfetch03
    .word exit

;--------------------------------------------------------------
;
;       SCRDEL   ( scr -- packet )
;
; delete the screen from the packet buffer.
;
;": scrdel   ( scr -- packet )
;     blk@
;     dup @ 
;     vmbuf @ 2dup +
;     dup
;     vmbuf ! rot
;     cmove
;     vmsiz 1-! ;
;
;scrdelfa
;    .byt $de,$ad
;    .byt (_scrdel-*-1)|bit7
;    .asc "SCRDE","L"|bit7
_scrdel
#include "enter.i65"
    .word _pktfetch
#include "page.i65"
    .word dup
#include "page.i65"
    .word fetch
#include "page.i65"
    .word vmbuf
#include "page.i65"
    .word fetch
#include "page.i65"
    .word _twodup
#include "page.i65"
    .word plus
#include "page.i65"
    .word dup
#include "page.i65"
    .word vmbuf
#include "page.i65"
    .word store
#include "page.i65"
    .word rot
#include "page.i65"
    .word cmove
#include "page.i65"
    .word vmsiz
#include "page.i65"
    .word oneminusstore
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       MKPKT ( blkbuf -- size )
;
; Create a new packet at BLKBUF from the current video screen.
; The first three bytes of the packet are the linewrap bits for
; lines 1..24.  This is followed by RLE-encoded screen codes,
; and the last two bytes of the packet is the total size.
;
;": mkpkt   ( blkbuf -- size )
;     25 wrapabove                  ( blkbuf d )
;     rot dup >r                    ( d blkbuf ) ( R; blkbuf )
;     dup 3 + >r                    ( d blkbuf ) ( R; blkbuf blkbuf+3 )
;     3c!                           ( ) ( R; blkbuf blkbuf+3 )
;     vidram b/scr -trailing        ( vidram nonblanksiz ) ( R; blkbuf blkbuf+3 )
;     r> swap                       ( vidram blkbuf+3 nonblanksiz ) ( R; blkbuf )
;     rlencode                      ( targend ) ( R; blkbuf )
;     dup 2+ r>                     ( targend targend+2 blkbuf )
;     - dup rot ! ;                 ( size )
;
mkpktlfa
    .byt $de,$ad
    .byt (_mkpkt-*-1)|bit7
    .asc "MKPK","T"|bit7
_mkpkt
#include "enter.i65"
    .word clit
    .byt 25
#include "pad.i65"
    .word wrapabove
#include "page.i65"
    .word rot
#include "page.i65"
    .word dup
#include "page.i65"
    .word tor
#include "page.i65"
    .word dup
#include "page.i65"
    .word three
#include "page.i65"
    .word plus
#include "page.i65"
    .word tor
#include "page.i65"
    .word threecstore
#include "page.i65"
    .word vidram
#include "page.i65"
    .word bperscr
#include "page.i65"
    .word _dashtrailing
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word swap
#include "page.i65"
    .word rlencode
#include "page.i65"
    .word dup
#include "page.i65"
    .word twoplus
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word minus             ; ( addr size )
#include "page.i65"
    .word dup
#include "page.i65"
    .word rot
#include "page.i65"
    .word store
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       SCRINS   ( scr -- )
;
; insert the current screen into the packet buffer.
;
;": scrins   ( scr -- )
;     25 wrapabove
;     blkbuf dup >r dup 3 + >r 3c!
;     vidram r> 1000 rlencode
;     r> - >r
;     blk@                        
;     vmbuf @ dup r@ - r@
;     cmove>
;     r@ over !
;     r@ - 2+ blkbuf swap r>
;     cmove 
;     vmsiz 1+! ;
;
;scrinslfa
;    .byt $de,$ad
;    .byt (_scrins-*-1)|bit7
;    .asc "SCRIN","S"|bit7
;_scrins
;#include "enter.i65"
;    .word clit
;    .byt 25
;#include "pad.i65"
;    .word wrapabove
;#include "page.i65"
;    .word _blkbuf
;#include "page.i65"
;    .word dup
;#include "page.i65"
;    .word tor
;#include "page.i65"
;    .word dup
;#include "page.i65"
;    .word three
;#include "page.i65"
;    .word plus
;#include "page.i65"
;    .word tor
;#include "page.i65"
;    .word threecstore
;#include "page.i65"
;    .word vidram
;#include "page.i65"
;    .word rfrom
;#include "page.i65"
;    .word plit
;    .word 1000
;#include "pad.i65"
;    .word rlencode
;#include "page.i65"
;    .word rfrom
;#include "page.i65"
;    .word minus
;#include "page.i65"
;    .word tor
;#include "page.i65"
;    .word _pktfetch
;#include "page.i65"
;    .word vmbuf
;#include "page.i65"
;    .word fetch
;#include "page.i65"
;    .word dup
;#include "page.i65"
;    .word rfetch
;#include "page.i65"
;    .word minus
;#include "page.i65"
;    .word rfetch
;#include "page.i65"
;    .word cmovegt
;#include "page.i65"
;    .word rfetch
;#include "page.i65"
;    .word over
;#include "page.i65"
;    .word store
;#include "page.i65"
;    .word rfetch
;#include "page.i65"
;    .word minus
;#include "page.i65"
;    .word twoplus
;#include "page.i65"
;    .word _blkbuf
;#include "page.i65"
;    .word swap
;#include "page.i65"
;    .word rfrom
;#include "page.i65"
;    .word cmove
;#include "page.i65"
;    .word vmsiz
;#include "page.i65"
;    .word oneplusstore
;#include "page.i65"
;    .word exit

;--------------------------------------------------------------
;
;       EDITCOPY   ( -- )
;
; STOP-C   Copy current line to end of paste buffer
;
;": editcopy
;    currline >paste 2drop ;
;
;editcopylfa
;    .byt $de,$ad
;    .byt (_editcopy-*-1)|bit7
;    .asc "EDITCOP","Y"|bit7
_editcopy
#include "enter.i65"
    .word _paste
#include "page.i65"
    .word logline           ; ( paste line )
#include "page.i65"
    .word lineinfo          ; ( paste screen 40|80 )
#include "page.i65"
    .word ptopaste          ; ( paste+ screen+ screen paste+1 len )
#include "page.i65"
    .word cmove
#include "page.i65"
    .word twodrop          ; ( )
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       EDITDEL   ( -- )
;
; delete the current line, appending it to the paste buffer
;
;": editdel
;    \ append the current line to the paste buffer
;    editcopy
;    \ mark the tail of the paste buffer and start a new buffer here
;    paste dup >r               ( tpaste ) ( R; tpaste )
;    \ append all lines from the next one to the bottom of screen to paste
;    logline logline+ eos>paste ( ) ( R; tpaste )
;    \ put everything back, with linewrap
;    r@ logline lineinfo drop   ( tpaste screen ) ( R; tpaste )
;    paste>                     ( d tpaste+ screen+ )
;    VIDRAM+1000 over - blank   ( d tpaste+ ) ( R; tpaste )
;    drop r> off                ( d )
;    begin
;        40 wrapfill            ( d flag )
;    until
;    wrap! ;
;
;editdellfa
;    .byt $de,$ad
;    .byt (editdel-*-1)|bit7
;    .asc "EDITDE","L"|bit7
_editdel
#include "enter.i65"
    .word _editcopy             ; ( )
#include "page.i65"
    .word _paste                ; ( pastebuf2 )
#include "page.i65"
    .word dup                   ; ( pastebuf2 pastebuf2 )
#include "page.i65"
    .word tor                   ; ( pastebuf2 ) ( R; pastebuf2 )
#include "page.i65"
    .word logline               ; ( pastebuf2 logline ) ( R; pastebuf2 )
#include "page.i65"
    .word loglineplus           ; ( pastebuf2 logline+ ) ( R; pastebuf2 )
#include "page.i65"
    .word _eostopaste           ; ( ) ( R; pastebuf2 ) send nextline...EOS to pastebuf2
#include "page.i65"
    .word rfetch                ; ( pastebuf2 ) ( R; pastebuf2 )
#include "page.i65"
    .word logline               ; ( pastebuf2 logline ) ( R; pastebuf2 )
#include "page.i65"
    .word lineinfo              ; ( pastebuf2 screen 40|80 ) ( R; pastebuf2 )
#include "page.i65"
    .word drop                  ; ( pastebuf2 screen ) ( R; pastebuf2 )
#include "page.i65"
    .word _pastefrom            ; ( pastebuf2 screen ) ( R; pastebuf2 ) should exhaust the pastebuffer
#include "page.i65"
    .word plit                  ; ( d pastebuf2 screen 33768 ) ( R; pastebuf2 )
    .word VIDRAM+1000
#include "pad.i65"              
    .word over                  ; ( d pastebuf2 screen 33768 screen ) ( R; pastebuf2 ) 
#include "page.i65"
    .word minus                 ; should always get 40 or 80
#include "page.i65"
    .word _blank                ; ( d pastebuf2 ) ( R; pastebuf2 )
#include "page.i65"
    .word drop
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word off
#include "page.i65"
editdel01                       ; BEGIN
    .word clit
    .byt 40
#include "pad.i65"
    .word wrapfill
#include "page.i65"
    .word qbranch
    .byt <(editdel01-*+1)       ; UNTIL
#include "pad.i65"
    .word wrapstore
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       EDITPASTE   ( -- )
;
; STOP-P 
; insert the paste buffer before the current line
;
;": editpaste   ( -- )
;     \ mark the current tail of the paste buffer
;     paste dup >r                      ( tpaste ) ( R; tpaste )
;     \ append everything to end of screen to secondary paste buffer
;     logline eos>paste                 ( ) ( R; tpaste )
;     \
;     pad logline lineinfo drop         ( paste screen ) ( R; tpaste )
;     \ put everything back
;     paste>                            ( d paste+ screen+ ) ( R; tpaste )
;     2drop  r> off  wrap! ;
;
;editpastelfa
;    .byt $de,$ad
;    .byt (_editpaste-*-1)|bit7
;    .asc "EDITPAST","E"|bit7
_editpaste
#include "enter.i65"
    .word _paste                        ; ( tpaste )
#include "page.i65"
    .word dup                           ; ( tpaste tpaste )
#include "page.i65"
    .word tor                           ; ( tpaste ) ( R; tpaste )
#include "page.i65"
    .word logline                       ; ( tpaste logline ) ( R; tpaste )
#include "page.i65"
    .word _eostopaste                   ; ( ) ( R; tpaste )
#include "page.i65"
    .word _pad                          ; ( paste )
#include "page.i65"
    .word logline                       ; ( paste logline ) ( R; tpaste )
#include "page.i65"
    .word lineinfo                      ; ( paste screen 40|80 ) ( R; tpaste )
#include "page.i65"
    .word drop                          ; ( paste screen ) ( R; tpaste )
#include "page.i65"
    .word _pastefrom                    ; ( d paste+ screen+ ) ( R; tpaste )
#include "page.i65"
    .word twodrop
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word off
#include "page.i65"
    .word wrapstore
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       EDITZILCH   ( -- )
;
; STOP-Z   Zilch the paste buffer
;
;": editzilch   ( -- )
;     pad off ;
;
;editzilchlfa
;    .byt $de,$ad
;    .byt (editzilch-*-1)|bit7
;    .asc "EDITZILC","H"|bit7
_editzilch
#include "enter.i65"
    .word _pad
#include "page.i65"
    .word off
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       EDITNOWRAP   ( -- )
;
; reset the linewrap table and make this screen writeable
;
;editnowraplfa
;    .byt $de,$ad
;    .byt (_editnowrap-*-1)|bit7
;    .asc "EDITNOWRA","P"|bit7
_editnowrap
#include "enter.i65"
    .word scrwritequery
#include "page.i65"
    .word on
#include "page.i65"
    .word to6502
    stx storex
    ldx #24
editnowrap01
    asl $e0,x
    sec
    ror $e0,x
    dex
    bpl editnowrap01
    ldx storex
    jmp next

;--------------------------------------------------------------
;
;       EDITTOPSCR   ( -- )
;
; restore from the top (first) screen
;
;edittopscrlfa
;    .byt $de,$ad
;    .byt (edittopscr-*-1)|bit7
;    .asc "EDITTOPSC","R"|bit7
edittopscr
#include "enter.i65"
    .word exit

;--------------------------------------------------------------
;
;       EDITNEXTSCR   ( -- )
;
; restore from the next screen or append a blank one
;
;editnextscrlfa
;    .byt $de,$ad
;    .byt (editnextscr-*-1)|bit7
;    .asc "EDITNEXTSC","R"|bit7
editnextscr
#include "enter.i65"
    .word exit

;--------------------------------------------------------------
;
;       EDITPREVSCR   ( -- )
;
; restore from the previous screen or insert a blank one
;
editprevscrlfa
    .byt $de,$ad
    .byt (editprevscr-*-1)|bit7
    .asc "EDITPREVSC","R"|bit7
editprevscr
#include "enter.i65"
    .word exit

;--------------------------------------------------------------
;
;       EDITQUIT   ( -- )
;
; STOP-Q   Quit the editor
;
;editquitlfa
;    .byt $de,$ad
;    .byt (editquit-*-1)|bit7
;    .asc "EDITQUI","T"|bit7
_editquit
#include "enter.i65"
    .word scr
#include "page.i65"
    .word fetch
#include "page.i65"
    .word _scrstore
#include "page.i65"
    .word rfrom         ; discard returns
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word twodrop
#include "page.i65"
    .word drop          ; we won't be needing these
#include "page.i65"
    .word exit          ; exiting from EDIT

;--------------------------------------------------------------
;
;       EDITINDEX   ( -- )
;
; STOP-I   Present an index screen and let the user select one to edit
;
;editindexlfa
;    .byt $de,$ad
;    .byt (editindex-*-1)|bit7
;    .asc "EDITINDE","X"|bit7
editindex
#include "enter.i65"
    .word exit

;--------------------------------------------------------------
;
;       EDITSAVE   ( -- )
;
; STOP-S   Save all buffers to a PRG file
;
;editsavelfa
;    .byt $de,$ad
;    .byt (editsave-*-1)|bit7
;    .asc "EDITSAV","E"|bit7
editsave
#include "enter.i65"
    .word exit

;--------------------------------------------------------------
;
;       EDITLOAD   ( -- )
;
; STOP-L   Load a group of buffers from a PRG file
;
;editloadlfa
;    .byt $de,$ad
;    .byt (editload-*-1)|bit7
;    .asc "EDITLOA","D"|bit7
_editload
#include "enter.i65"
    .word _pdq
    .byt editload02-*-1
    .asc    CLR,"LOADING"
editload02
#include "pad.i65"
    .word exit

;--------------------------------------------------------------
;
;       EDITVERIFY   ( -- )
;
; STOP-V   Verify a buffer file vs. memory
;
;editverifylfa
;    .byt $de,$ad
;    .byt (editverify-*-1)|bit7
;    .asc "EDITVERIF","Y"|bit7
editverify
#include "enter.i65"
    .word exit

;--------------------------------------------------------------
;
;       EDITRESTORE   ( -- )
;
; STOP-R   Restore the current screen from the buffer
;
editrestorelfa
    .byt $de,$ad
    .byt (editrestore-*-1)|bit7
    .asc "EDITRESTOR","E"|bit7
editrestore
#include "enter.i65"
    .word exit

;--------------------------------------------------------------
;
;       EDITDELSCR   ( -- )
;
; delete the current screen.  restore from next, then prev, then blank
;
;editdelscrlfa
;    .byt $de,$ad
;    .byt (editdelscr-*-1)|bit7
;    .asc "EDITDELSC","R"|bit7
editdelscr
#include "enter.i65"
    .word exit

;--------------------------------------------------------------
;
;       EDITINSSCR   ( -- )
;
; insert a new, blank screen
;
;editinsscrlfa
;    .byt $de,$ad
;    .byt (editinsscr-*-1)|bit7
;    .asc "EDITINSSC","R"|bit7
editinsscr
#include "enter.i65"
    .word exit

;--------------------------------------------------------------
;
;       EDITINIT   ( scr -- )
;
; prepare before we drop into the editor infinite loop
;
;": editinit   ( scr -- )
;     dup scr ! (block)
;     scrwrite? !
;
;editinitlfa
;    .byt $de,$ad
;    .byt (_editinit-*-1)|bit7
;    .asc "EDITINI","T"|bit7
_editinit
#include "enter.i65"
    .word _scrfetch
#include "page.i65"
    .word _editzilch
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       EDITMENU   ( -- addr )
;
; returns the address of a counted string of menu commands
;
;editmenulfa
;    .byt $de,$ad
;    .byt (editmenu-*-1)|bit7
;    .asc "EDITMEN","U"|bit7
editmenu
     jsr docreate
     .byt editmenu01-*-1        ; number of menu items = 16
     .asc "QISLVZRDCP"          ; command keys
     .byt DELETE, INSERT, HOME, CLR, CRSRDOWN, CRSRUP
editmenu01
     .word _editquit             ; CFA of corresponding Forth word
     .word editindex
     .word editsave
     .word _editload
     .word editverify
     .word _editzilch
     .word editrestore
     .word _editdel
     .word _editcopy
     .word _editpaste
     .word editdelscr
     .word editinsscr
     .word edittopscr
     .word _editnowrap
     .word editnextscr
     .word editprevscr

;--------------------------------------------------------------
;
;       EDITCMD   ( -- )
;
; get a key and perform that command
;
;editcmdlfa
;    .byt $de,$ad
;    .byt (_editcmd-*-1)|bit7
;    .asc "EDITCM","D"|bit7
_editcmd
#include "enter.i65"
    .word editmenu              ; ( editmenu )
#include "page.i65"
    .word flipscr
#include "page.i65"
    .word key                   ; ( editmenu char )
#include "page.i65"
    .word flipscr
#include "page.i65"
    .word dolindex              ; ( index|0 )
#include "page.i65"
    .word qdup                  ; ( index index | 0 )
#include "page.i65"
    .word qbranch               ; IF
    .byt <(editcmd01-*+1)
#include "pad.i65"
    .word twostar               ; ( 2*index )
#include "page.i65"
    .word editmenu              ; ( 2*index editmenu ) 
#include "page.i65"
    .word dup                   ; ( 2*index editmenu editmenu ) 
#include "page.i65"
    .word cfetch                ; ( 2*index editmenu #items ) 
#include "page.i65"
    .word plus                  ; ( 2*index editmenu+#items ) 
#include "page.i65"
    .word plus                  ; ( 2*index+editmenu+#items ) 
#include "page.i65"
    .word oneminus              ; ( 2*index+editmenu+#items-1 ) 
#include "page.i65"
    .word fetch                 ; ( editcmdcfa )
#include "page.i65"
    .word execute               ; ( )
#include "page.i65"
editcmd01                       ; THEN
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       EDITIRQTOGGLE   ( -- )
;
; Enable or disable the IRQ handler within EDIT that checks for
; the STOP key in the screen editor.
;
;editirqtogglelfa
;    .byt $de,$ad
;    .byt (editirqtoggle-*-1)|bit7
;    .asc "EDITIRQTOGGL","E"|bit7
_editirqtoggle
#include "enter.i65"
    .word plit
    .word (MAINIRQ^edit02)
#include "pad.i65"
    .word clit
    .byt <CINV       ; $90
#include "pad.i65"
    .word togglevector
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       EDIT   ( scr -- )
;
editlfa
    .byt $de,$ad
    .byt (_edit-*-1)|bit7
    .asc "EDI","T"|bit7
_edit
#include "enter.i65"
    .word _editinit
#include "page.i65"
edit00              ; reentry to editor here
    .word _editirqtoggle   ; enable STOP key trap
#include "page.i65"
    .word to6502
    stx storex      ; preserve Forth data stack pointer
    tsx
    stx n           ; preserve machine stack frame pointer

edit01              ; PET screen editor forever loop
    jsr CHRIN       ; Kernel - blink the cursor, wait for a line of input, ignore it
    lda #$0d        ; don't just leave the cursor two characters past end of line
    jsr CHROUT      ; Kernel - so echo the carriage return
    jmp edit01      ; ... do this forever

edit02              ; this is edit's IRQ handler, enabled/disabled by _editirqtoggle
    lda $9b         ; copy of contents of PIA1 Port B for testing STOP key, etc...
    cmp #$ef        ; test STOP key
    bne edit03
                    ; looks like someone pressed STOP. Exit the editor
                    ; but not so fast!  Are we in quotes or inserts?
    lda $cd         ; nonzero is quotes mode
    ora $dc         ; number of inserts pending
    beq edit04
edit03
    jmp MAINIRQ     ; not yet?  perform normal system IRQ

; if we get here, clean up from cursor wink and bail out of the IRQ
edit04
    jsr UDTIM       ; keep the clock running even if someone leans on STOP
    ;sec            ; because f7a1 debounce loop always sets carry
    inc $a7         ; turn off cursor
    lda $a9         ; true character at cursor position
    jsr FIX_CHR     ; ROM $E606 on 40-column BASIC4 PET
    ;jsr UNFLIP_CRSR ; ~wut? probably need to flip off the cursor
    ldx n
    txs             ; reset stack frame
    ldx storex      ; restore Forth stack pointer
#include "toforth.i65"
    .word _editirqtoggle        ; disable STOP key trap, also does CLI
#include "page.i65"
    .word _editcmd  ; get and perform editor command
#include "page.i65"
    .word branch
    .byt <(edit00-*+1)
#include "pad.i65" ; this never executes. editquit breaks out by dropping returns
    .word exit
