; core-user.a65
#echo .       core-user.a65             Core User Variables

; user variables required for pettil-core

;--------------------------------------------------------------
#if 0
name=USERVAR
stack=( -- addr )
tags=uservar,nosymbol
Runtime action of all user variables.  Returns the address of
the user variable.

#endif
uservar
    clc
    ldy #1
    pla
    sta n
    pla
    sta n+1
    lda (n),y
    adc up
    ldy up+1
    bcc uservar02
    iny
uservar02
    jmp pushya

;--------------------------------------------------------------
#if 0
name=MEMSIZ
stack=( -- addr )
tags=uservar,kernel
!!!User variable
Top of RAM, initialized at COLD from BASIC zero page variable at $34
This variable may be adjusted, e.g. to allocate a contiguous block of
memory at the top of RAM
#endif
memsiz
    jsr uservar
    .byt usermemsiz-uarea

;--------------------------------------------------------------
#if 0
name=DP
stack=( -- addr )
tags=uservar,fig
Dictionary pointer
#endif
dp
    jsr uservar
    .byt userdp-uarea

;--------------------------------------------------------------
#if 0
name=FENCE
stack=( -- addr )
tags=uservar,fig
!!!User variable
Returns the address of the user variable FENCE which defines
the lower limit of FORGET
#endif
fence
    jsr uservar
    .byt userfence-uarea

;--------------------------------------------------------------
#if 0
name=SYMTAB
stack=( -- addr)
tags=uservar,interpreter,compiler
!!!User variable

base of symbol table

* `>thread` requires `symtab` to always be at a page boundary

|^`symtab @`|^get address of the symbol table|
|^`symtab off`|^discards all symbols<br/>`blkbuf` is now at top of RAM|
|^`forget`|^rebuilds symbol table|
!!!pronounced: "sim-tab"
#endif
symtab
    jsr uservar
    .byt usersymtab-uarea

;--------------------------------------------------------------
#if 0
name=SP0
stack=( -- addr )
tags=uservar,fig
User variable
The data stack initialization value ($31)

+1 is added to optimize [[?STACK]]
#endif
sp0
    jsr uservar
    .byt usersp0-uarea

;--------------------------------------------------------------
#if 0
name=RP0
stack=( -- addr )
tags=uservar,fig
[heading]User variable[/heading]
The return stack initialization value ($01FE)
#endif
rp0
    jsr uservar
    .byt userrp0-uarea

;--------------------------------------------------------------
#if 0
name=STARTUP
stack=( -- addr )
tags=uservar
!!!User variable
Code field address of the word that executes on startup.  In
the development environment, this is set to [[ABORT]]
#endif
startup
    jsr uservar
    .byt userstartup-uarea

;--------------------------------------------------------------
#if 0
name=WARNING
stack=( -- addr )
tags=uservar,fig,forth-79
User variable
A user variable containing a value controlling messages.

* 0 = messages will be presented by number
* addr = address of the error messages table
#endif
warning
    jsr uservar
    .byt userwarning-uarea

;--------------------------------------------------------------
#if 0
name=BASE
stack=( -- addr )
tags=uservar,fig,forth-79,forth-83
!!!User variable
current system number base.  Resets to decimal (base 10) on ABORT
#endif
base
    jsr uservar
    .byt userbase-uarea

;--------------------------------------------------------------
#if 0
name=FILENAME
stack=( -- addr )
tags=uservar,vm,i/o
!!!User variable
User variable that holds the address of a counted string which is
the filename that will be used on the next [[SAVE-BUFFERS]]
[[LOAD-BUFFERS]] or STOP-S STOP-V STOP-L in the editor
#endif
filename
    jsr uservar
    .byt userfilename-uarea

;--------------------------------------------------------------
#if 0
name=SA#
stack=( -- addr )
tags=uservar,vm,i/o
!!!User variable
User variable that holds the secondary address for [[FILE]]

!!!pronounced: "S-A-num"
#endif
sanum
    jsr uservar
    .byt usersanum-uarea

;--------------------------------------------------------------
#if 0
name=DRV#
stack=( -- addr )
tags=uservar,vm,i/o
!!!User variable
User variable that holds the device # used by [[SAVE-BUFFERS]]
[[LOAD-BUFFERS]] STOP-S STOP-V and STOP-L in the editor

!!!pronounced: "drive-num"
#endif
drvnum
    jsr uservar
    .byt userdrvnum-uarea



;--------------------------------------------------------------
#if 0
name=VMBUF
stack=( -- addr )
tags=uservar,vm
!!!User variable
User variable that points to the bottom of the virtual memory
packet buffer.  Save and Verify operations use this as their
base address.  Load operations will load from magnetic media
to [[PAD]], then [[move|MOVE]] that data up so it ends just below
[[BLKBUF]] before setting `VMBUF`.  Creating and destroying
packets changes the value of `VMBUF`

!!!pronounced: "v-m-buff"
#endif
vmbuf
    jsr uservar
    .byt uservmbuf-uarea

;--------------------------------------------------------------
#if 0
name=#BLK
tags=uservar,vm
stack=( -- addr )
!!!User variable
Number of virtual memory packets
#endif
numblk
    jsr uservar
    .byt usernumblk-uarea

;--------------------------------------------------------------
#if 0
name=SCR
stack=( -- addr )
tags=uservar
The address of a user variable containing the
number of the screen most recently LISTed or EDITed
#endif
scr
    jsr uservar
    .byt userscr-uarea

;--------------------------------------------------------------
#if 0
name=BLK
stack=( -- addr )
tags=uservar,fig,forth-79,forth-83
!!!User variable
The address of a variable containing the number of the mass
storage block being interpreted as the input stream.  If the
value of BLK is zero the input stream is taken from the text
input buffer.  {{0..the number of blocks available -1}}
#endif
blk
    jsr uservar
    .byt userblk-uarea

;--------------------------------------------------------------
#if 0
name=IN
stack=( -- addr )
tags=uservar,fig,forth-79,forth-83
User variable containing the present character offset within the input stream.
#endif
in
    jsr uservar
    .byt userin-uarea

;--------------------------------------------------------------
#if 0
name=SPAN
stack=( -- addr )
tags=uservar,fig,forth-79,forth-83
User variable containing the count of characters actually received and
stored by the last execution of [[EXPECT]]
#endif
span
    jsr uservar
    .byt userspan-uarea

;--------------------------------------------------------------
#if 0
name=EDITING
tags=uservar,vm,editor
stack=( -- addr )
!!!User variable
If `EDITING`

* [[BLOCK]] will generate new [[screen packets|PETTIL packet map]]
* [[VIDRAM]] buffer is used by [[BLOCK]] and [[UPDATE]]
* screen packets are displayed and updated
* data packets are displayed but not updated

If not `EDITING`

* [[BLOCK]] will generate new [[data packets|PETTIL packet map]]
* [[BLKBUF]] buffer is used by [[BLOCK]] and [[UPDATE]]
* [[screen and data packets|PETTIL packet map]] are updated
#endif
editing
    jsr uservar
    .byt userediting-uarea

;--------------------------------------------------------------
#if 0
name=DPL
stack=( -- addr )
tags=uservar
!!!User variable
User variable containing the number of digits following the
decimal in numeric input conversion

~#supernumber
#endif
dpl
    jsr uservar
    .byt userdpl-uarea

;--------------------------------------------------------------
#if 0
name=HLD
stack=( -- addr )
tags=uservar,fig,forth-79
!!!User variable

~#supernumber
#endif
hld
    jsr uservar
    .byt userhld-uarea

;--------------------------------------------------------------
#if 0
name=#LINE
stack=( -- addr )
tags=uservar,fig,forth-79
User variable
Counts the number of lines output
#endif
numline
    jsr uservar
    .byt usernumline-uarea

;--------------------------------------------------------------
#if 0
name=#OUT
stack=( -- addr )
tags=uservar,fig,forth-79
User variable
Counts number of characters that have been emitted
#endif
numout
    jsr uservar
    .byt usernumout-uarea

;--------------------------------------------------------------
#if 0
name=SCRPKT
tags=uservar,vm,editor
stack=( -- addr )
!!!User variable

This user variable indicates whether the current packet is
"data" or "screen"

`SCRPKT` reflects the screen/data bit of the current packet
`SCRPKT` is used by [[UPDATE]] when writing the current packet
`SCRPKT` is updated by [[BLOCK]] when a packet is read

Forth's traditional data blocks are 1024 bytes and usually
treated as 16 lines of 64 characters each.  Since this can't
be easily displayed on the PET's 40x25 hardware, the editor
will show only the first 1000 bytes.  Data blocks are read-only
in the editor, to preserve the invisible final 24 bytes.  [[LOAD]]
handles a data packet as 16 lines of 64 characters each.

Commodore provides a wonderful full screen editor that can show
1000 characters and divides the screen up into logical lines of
40 or 80 columns, which PETTIL takes advantage of.  Since [[LOAD]]
treats the line terminations as whitespace, source code can extend
all the way to the far right column(40 or 80) of a logical line.

The following table summarizes the differences between ''data''
and ''screen'' packets

|Data|Screen|h
|Forth tradition|PET hardware|
|1024 bytes|1003 bytes|
|^''LOAD'' //treats as://<br/>64x16 lines|^''LOAD'' //treats as://<br/>PET editor logical screen lines|
|null-trailing|blank-trailing|
|writeable=''0'' read-only|writeable=''1'' read/write|
|^''STOP-CLR'' converts to screen<br/>* truncates last 24 bytes<br/>* makes it writeable|^no conversion to data|
|^//typical usage://<br/>data<br/>imported source|^//typical usage://<br/>source code<br/>graphics|


The STOP-CLR editor command converts a data block into a screen,
discarding the last (unseen) 24 bytes and initializing the linewrap
to all 40-character lines, or it will reset the linewrap on existing
screens.  Changes aren't saved to the packet buffer until the screen
is exited.
#endif
scrpkt
    jsr uservar
    .byt userscrpkt-uarea       ;  ~#packrat

#print (*-uservar)
