; pettil-utils.a65
#echo .       pettil-utils.a65          Utility words

;--------------------------------------------------------------
#if 0
name=PETSCII"
stack=( -- c )
tags=string,ext
Converts a quoted character to its numeric value

usage: `petscii" x" .` responds `88  ok`

~#test
```
#endif
#include "align.i65"
_petscii
    jsr enter
#include "pass.i65"
    .word clit
    .byt 34
#include "page.i65"
    .word _name
#include "page.i65"
    .word oneplus
#include "page.i65"
    .word cfetch
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=.S
tags=i/o,stack,ext
Output the data stack

d;m 0 8f;m 1f0 1ff;m 74f0 751f;z


```
: .s ( ?? -- ?? )
    depth ?dup
    if
        0 do
            depth i - 1- pick  7 u.r space
        loop
    else
        ." stack empty"
    then ;
```
#endif
#include "align.i65"
_dots
    jsr enter
#include "page.i65"
    .word depth
#include "page.i65"
    .word qdup
#include "pass.i65"
    .word qbranch
    .byt <(dots02-*+1)
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pdo
    .byt <(dots04-*+1)
#include "page.i65"
dots01
    .word depth
#include "page.i65"
    .word i
#include "page.i65"
    .word minus
#include "page.i65"
    .word oneminus
#include "page.i65"
    .word pick
#include "page.i65"
    .word _udot
#include "pass.i65"
    .word ploop
    .byt <(dots01-*+1)
#include "pass.i65"
dots02
    .word _pdq
    .byt dots03-*-1
    .asc "STACK EMPTY "
dots03
#include "page.i65"
dots04
    .word exit

;--------------------------------------------------------------
#if 0
name=H.
stack=( c -- )
tags=i/o
Prints out a number as an unsigned hexadecimal byte
```
: h.   ( c -- )
    base @ hex swap
    0 <# # # #> type
    base ! ;
```
#endif
#include "align.i65"
_hdot
    jsr enter
#include "page.i65"
    .word base
#include "page.i65"
    .word fetch
#include "page.i65"
    .word hex
#include "page.i65"
    .word swap
#include "page.i65"
    .word zero
#include "page.i65"
    .word _ltsharp
#include "page.i65"
    .word _sharp
#include "page.i65"
    .word _sharp
#include "page.i65"
    .word _sharpgt
#include "page.i65"
    .word type
#include "page.i65"
    .word base
#include "page.i65"
    .word store
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=4H.
stack=( u -- )
tags=i/o
Prints out a number as an unsigned hexadecimal word
```
: 4h.   ( u -- )
    dup msb h.
    lsb h. ;
```
#endif
#include "align.i65"
_fourhdot
    jsr enter
#include "page.i65"
    .word dup
#include "page.i65"
    .word msb
#include "page.i65"
    .word _hdot
#include "page.i65"
    .word lsb
#include "page.i65"
    .word _hdot
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=XLATE
stack=( char -- printablechar )
tags=i/o,nosymbol

#endif
xlate
    lda tos
    and #$7f
    cmp #$20
    bcs xlate01
    lda #'.'
    sta tos
xlate01
    jmp next

;--------------------------------------------------------------
#if 0
name=DUMP
stack=( addr size -- )
tags=i/o
Dumps a region of memory as lines of eight bytes each

```
: dump   ( addr size -- )
    1+ 0
    ?do
        #out @ 0=
        if
            dup msb h.
            dup lsb h.
        then
        c@+ space h.
        l/scr #out @ <
        if
            space 18 ( RVSON ) emit
            dup 8 - under
            do i c@ xlate emit loop cr
        then
        ?terminal  if leave then
    loop
    drop ;
```
#endif
#include "align.i65"
_dump
    jsr enter
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pqdo
    .byt <(dump06-*+1)
#include "page.i65"
dump01
    .word numout
#include "page.i65"
    .word fetch
#include "page.i65"
    .word zeq
#include "pass.i65"
    .word qbranch
    .byt <(dump02-*+1)
#include "page.i65"
    .word dup
#include "page.i65"
    .word _fourhdot
#include "page.i65"
dump02
    .word cfetchplus
#include "page.i65"
    .word _space
#include "page.i65"
    .word _hdot
#include "page.i65"
    .word lperscr               ; 25
#include "page.i65"
    .word numout
#include "page.i65"
    .word fetch
#include "page.i65"
    .word lt
#include "pass.i65"
    .word qbranch
    .byt <(dump05-*+1)
#include "page.i65"
    .word _space
#include "pass.i65"
    .word clit
    .byt RVSON
#include "page.i65"
    .word emit
#include "page.i65"
    .word dup
#include "page.i65"
    .word eight
#include "page.i65"
    .word minus
#include "page.i65"
    .word under
#include "pass.i65"
    .word pdo
    .byt <(dump04-*+1)
#include "page.i65"
dump03
    .word i
#include "page.i65"
    .word cfetch
#include "page.i65"
    .word xlate
#include "page.i65"
    .word emit
#include "pass.i65"
    .word ploop
    .byt <(dump03-*+1)
#include "page.i65"
dump04
    .word _qpause
#include "page.i65"
    .word qterminal
#include "page.i65"
    .word pqleave
#include "page.i65"
    .word cr
#include "pass.i65"
dump05
    .word ploop
    .byt <(dump01-*+1)
#include "page.i65"
dump06
    .word drop
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=ID.
stack=( -- )
tags=compiler
Displays the name at the current `nfa` in `n3`

```
: id.   ( -- )
    <n3 1+ sym.len type ;
```
#endif
#include "align.i65"
_iddot
    jsr enter
#include "pass.i65"
    .word zpfrom
    .byt ACC+2*N3
#include "page.i65"
    .word oneplus
#include "page.i65"
    .word symlen
#include "page.i65"
    .word type
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=ID.L
stack=( -- )
tags=ext,nosymbol

#endif
#include "align.i65"
_iddotl
    jsr enter
#include "page.i65"
    .word _iddot
#include "page.i65"
    .word _space
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=?CR
stack=( -- )
tags=ext,nosymbol
emits a carriage return in `words` output to avoid wrapping lines

#endif
#include "align.i65"
_qcr
    jsr enter
#include "page.i65"
    .word symlen
#include "page.i65"
    .word numout
#include "page.i65"
    .word fetch
#include "page.i65"
    .word plus
#include "page.i65"
    .word oneplus
#include "page.i65"
    .word forty
#include "page.i65"
    .word _gt
#include "pass.i65"
    .word qbranch
    .byt <(qcr01-*+1)
#include "page.i65"
    .word _qpause
#include "page.i65"
    .word qterminal
#include "page.i65"
    .word _qexit
#include "page.i65"
    .word cr
qcr01
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=(VOC)
stack=( -- voc )
tags=ext,nosymbol
return the `voc` of the current `nfa` in `n3`
#endif
pvoc
    jsr symlens
    bcc pvoc05
    tay
    iny
    lda (ACC+2*N3),y
    .byt $24
pvoc05
    tya
    jmp push0a

;--------------------------------------------------------------
#if 0
name=WORD-LIST
stack=( voc -- )
tags=interpreter,dictionary,forth-83
Displays all words in vocabulary `n`

user symcurr  ( -- addr )


	symcurr off
	sym+  ( -- )

for each symbol
    is it in the right vocab?
        dup id.
next

dup c@ $40 and 0=               \ TRUE if in core


```
: word-list   ( voc -- )
    cr >syms >n3 drop           ( voc symtab )
    begin
        dup $40 and 0=          ( n symtab flag )
    while
        dup id.  bl ?pause
        8 #out @ 7 and - spaces
        nfa+
    until drop ;
```
#endif
#include "align.i65"
_wordlist
    jsr enter
#include "page.i65"
    .word _symrewind
#include "page.i65"
wordlist01
    .word pvoc
#include "page.i65"
    .word over
#include "page.i65"
    .word eq
#include "pass.i65"
    .word qbranch
    .byt <(wordlist02-*+1)
#include "page.i65"
    .word _qcr
#include "page.i65"
    .word _iddotl
#include "page.i65"
wordlist02
    .word symplus
    .byt 3
#include "page.i65"
    .word symlen
#include "page.i65"
    .word zeq
#include "pass.i65"
    .word qbranch
    .byt <(wordlist01-*+1)
#include "page.i65"
    .word drop
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=WORDS
stack=( -- )
tags=interpreter,dictionary,forth-83
Display the entire dictionary.

[40]

```
: words
    cr >syms 2+
    begin
        dup nfalen ?terminal 0= and
    while
        dup id.  bl ?pause
        8 #out @ 7 and - spaces
        nfa+
    until drop ;

: words
    cr >syms >n3 drop
    begin
        sym.len ?terminal 0= and
    while
        <n3 id.  bl ?pause
        8 #out @ 7 and - spaces
        nfa+
    repeat ;
: words
    vocabs
    begin
        c@+ ?dup
    while
        word-list
    repeat
    vocabs 1+ <> dup
    ?: drop word-list  ;
```
#endif
#include "align.i65"
_words
    jsr enter
#include "page.i65"
    .word vocabs
#include "page.i65"
words01
    .word cfetchplus
#include "page.i65"
    .word qdup
#include "pass.i65"
    .word qbranch
    .byt <(words02-*+1)
#include "page.i65"
    .word _wordlist
#include "pass.i65"
    .word branch
    .byt <(words01-*+1)
#include "page.i65"
words02
    .word vocabs
#include "page.i65"
    .word oneplus
#include "page.i65"
    .word ne
#include "page.i65"
    .word dup
#include "pass.i65"
    .word pquerycolon
    .word drop
    .word _wordlist
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=ID.14
stack=( cfa -- )
tags=ext,nosymbol
formatted output, three-column layout used by `info`

#endif
#include "align.i65"
_iddot14
    jsr enter
#include "page.i65"
    .word dup
#include "page.i65"
    .word _toname
#include "page.i65"
    .word drop
#include "page.i65"
    .word seven
#include "page.i65"
    .word symlen
#include "page.i65"
    .word minus
#include "page.i65"
    .word i
#include "pass.i65"
    .word dlit
    .word 3
    .word 0
#include "page.i65"
    .word udslashmod
#include "page.i65"
    .word twodrop
#include "pass.i65"
    .word pquerycolon
    .word twoplus
    .word next
#include "page.i65"
    .word _spaces
#include "page.i65"
    .word _iddotl
#include "page.i65"
    .word execute
#include "pass.i65"
    .word exit
;--------------------------------------------------------------
#if 0
name=INFO
stack=( -- )
tags=editor
Displays info on various editor and memory system variables

```
: info   ( -- )
    info05 c@ 0
    do
        i ?: 6spaces next
        i 2* 1+ info05 + @ dup
        >name.l10 execute
        @ 4h.
    loop
    cr ['] vocabs >name id. 3 spaces
    vocabs 10 0
    do
        c@+ space h.
    loop
    drop cr
    ['] filename >name.l10
    filename @ dup 4h. space dup c@ h.
    space $. cr
    ['] startup >name.l10
    startup @ >name.l10 ;

: info   ( -- )
    info05
    begin
        @+ ?dup
    while
        dup
        >name.l10 execute
        @ 4h.
    repeat
    do
        i ?: 6spaces next
```
#endif
#include "align.i65"
_info
    jsr enter
#include "page.i65"
    .word cr
#include "pass.i65"
    .word clit
    .byt (info06-info05)/2
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pdo
    .byt <(info02-*+1)
#include "page.i65"
info01
    .word i
#include "page.i65"
    .word twostar
#include "pass.i65"
    .word plit
    .word info05
#include "page.i65"
    .word plus
#include "page.i65"
    .word fetch
#include "page.i65"
    .word _iddot14
#include "page.i65"
    .word fetch
#include "page.i65"
    .word _fourhdot
#include "pass.i65"
    .word ploop
    .byt <(info01-*+1)
#include "pass.i65"
info02
    .word plit
    .word vocabs
#include "page.i65"
    .word _toname
#include "page.i65"
    .word drop
#include "page.i65"
    .word _iddotl
#include "page.i65"
    .word vocabs
#include "page.i65"
    .word count
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pdo
    .byt <(info04-*+1)
#include "page.i65"
info03
    .word cfetchplus
#include "page.i65"
    .word _hdot
#include "page.i65"
    .word _space
#include "pass.i65"
    .word ploop
    .byt <(info03-*+1)
#include "page.i65"
info04
    .word drop
#include "page.i65"
    .word cr
#include "pass.i65"
    .word plit
    .word filename
#include "page.i65"
    .word _toname
#include "page.i65"
    .word drop
#include "page.i65"
    .word _iddotl
#include "page.i65"
    .word filename
#include "page.i65"
    .word fetch
#include "page.i65"
    .word dup
#include "page.i65"
    .word _fourhdot
#include "page.i65"
    .word _space
#include "page.i65"
    .word dup
#include "page.i65"
    .word cfetch
#include "page.i65"
    .word _hdot
#include "page.i65"
    .word _space
#include "page.i65"
    .word _stringdot
#include "pass.i65"
    .word exit
info05
; 3-column layout

;            BASE  CURRENT    VMBUF
    .word    base, current,   vmbuf

;           FENCE     #VOC   SYMTAB
    .word   fence,  numvoc,  symtab

;              DP     #BLK   SYMNEW
    .word      dp,  numblk,  symnew

;          MEMSIZ      BLK  SYMTAIL
    .word  memsiz,     blk, symtail

;            DRV#      SCR    TDICT
    .word  drvnum,     scr,   tdict

;             SA#  EDITING      TDP
    .word   sanum, editing,     tdp
info06
