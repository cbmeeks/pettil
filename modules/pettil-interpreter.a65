; pettil-interpreter.a65
#echo .       pettil-interpreter.a65    Outer Interpreter

bloom
    .dsb 8,0      ; 64 bits, used by hash2 (bloom filter)
bloomx
pearson
	.byt 27, 120, 229, 241, 111, 44, 47, 141
pearsonx

;==============================================================
;==== Error messages                                       ====
;==============================================================
errptr
    .word msg01,msg02,msg03,msg04,msg05,msg06,msg07,msg08

msg01
    .byt msg02-*-1
    .asc "STACK EMPTY"
msg02
    .byt msg03-*-1
    .asc "STACK FULL"
msg03
    .byt msg04-*-1
    .asc "NOT FOUND"
msg04
    .byt msg05-*-1
    .asc "DEFINITION UNFINISHED"
msg05
    .byt msg06-*-1
    .asc "COMPILATION ONLY"
msg06
    .byt msg07-*-1
    .asc "UNPAIRED CONDITIONALS"
msg07
    .byt msg08-*-1
    .asc "CAN'T FORGET BELOW FENCE"
msg08
    .byt msg09-*-1
    .asc "BLOCK OUT OF RANGE"
msg09

;--------------------------------------------------------------
;
;       INTERPRET
;
; tdict
;
;
;": interpret   ( )
;       begin   ?stack
;               exists?
;               if      link>
;                       execute
;               else    number dpl @ 1+ 0=
;                       if      drop
;                       then
;               then
;               false
;               quit?
;       again ;
;
#ifdef HEADERS
interpretlfa
    .byt $de,$ad
    .byt (_interpret-*-1)|bit7
    .asc "INTERPRE","T"|bit7
#endif
_interpret
#include "enter.i65"
interpret01
    .word qstack            ; ( )
#include "page.i65"
    .word _existsq          ; ( addr flag )
#include "page.i65"
    .word qbranch
    .byt <(interpret02-*+1)
#include "pad.i65"
    .word execute
#include "page.i65"
    .word branch
    .byt <(interpret03-*+1)
#include "pad.i65"
interpret02
    .word _number
#include "page.i65"
    .word dpl
#include "page.i65"
    .word fetch
#include "page.i65"
    .word oneplus
#include "page.i65"
    .word zeq
#include "page.i65"
    .word qbranch
    .byt <(interpret03-*+1)
#include "pad.i65"
    .word drop
#include "page.i65"
interpret03
    .word false
#include "page.i65"
    .word _quitq
#include "page.i65"
    .word qbranch
    .byt <(interpret01-*+1)
#include "pad.i65"
    .word exit

;--------------------------------------------------------------
;
;       FORTH
;
; * 83 interpreter tdict
;
; when all is over, said and done with, the PFA of FORTH (aka FORTH+3)
; should be stored in user variable CONTEXT
#ifdef HEADERS
forthlfa
    .byt $de,$ad
    .byt (forth-*-1)|bit7
    .asc "FORT","H"|bit7
#endif
forth
    jsr vocabdoes
    .word 0                 ; flag as root vocabulary
    .byt 1|bit7
    .byt ' '|bit7           ; $a081
lastvoc
    .word 0                 ; link to next vocabulary, 0 for last

;--------------------------------------------------------------
;
;       DEFINITIONS
;
; * 83 interpreter tdict
;
#ifdef HEADERS
definitionslfa
  .byt $de,$ad
    .byt (_definitions-*-1)|bit7
    .asc "DEFINITION","S"|bit7
#endif
_definitions
#include "enter.i65"
    .word context
#include "page.i65"
    .word fetch
#include "page.i65"
    .word current
#include "page.i65"
    .word store
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       (
;
; * 83 interpreter tdict
;
#ifdef HEADERS
lparenlfa
    .byt $de,$ad
    .byt (_lparen-*-1)|bit7
    .asc "("|bit7
#endif
_lparen
#include "enter.i65"
    .word clit
    .asc ')'
#include "pad.i65"
    .word _qchar
#include "page.i65"
    .word twodrop
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       ABORT
;
; * 83 interpreter tdict
;
#ifdef HEADERS
abortlfa
    .byt $de,$ad
    .byt (_abort-*-1)|bit7
    .asc "ABOR","T"|bit7
#endif
_abort
#include "enter.i65"
    .word spstore
#include "page.i65"
    .word _quit
#include "page.i65"
    .word exit      ; make the decompiler happy

;--------------------------------------------------------------
;
;       QUIT
;
; tdict
;
;"This is the infinite outer interpreter loop:
;       - resets the return stack (RP!)
;       - outputs a carriage return (CR)
;       - waits for a line of input (QUERY)
;       - interprets that line
; * 83 interpreter outer
;
#ifdef HEADERS
quitlfa
    .byt $de,$ad
    .byt (_quit-*-1)|bit7
    .asc "QUI","T"|bit7
#endif
_quit
#include "enter.i65"
    .word blk
#include "page.i65"
    .word off
#include "page.i65"
    .word _lbracket         ; STATE OFF
#include "page.i65"
quit01                                  ; BEGIN
    .word rpstore
#include "page.i65"
    .word cr
#include "page.i65"
    .word _query
#include "page.i65"
    .word _interpret
#include "page.i65"
    .word state
#include "page.i65"
    .word fetch
#include "page.i65"
    .word zeq
#include "page.i65"
    .word qbranch           ; IF
    .byt <(quit03-*+1)
#include "pad.i65"
    .word _pdq
    .byt (quit02-*-1)
    .asc    " OK"
quit02
#include "pad.i65"
quit03                                  ; THEN AGAIN
    .word branch
    .byt <(quit01-*+1)
#include "pad.i65"
    .word exit

;--------------------------------------------------------------
;
;       '   ( -- cfa )
;
; * 83 interpreter tdict
;
; scans ahead in the input stream for the next word and finds
; it in the dictionary, else ABORT" NOT FOUND"
;
#ifdef HEADERS
ticklfa
    .byt $de,$ad
    .byt (_tick-*-1)|bit7
    .asc "'"|bit7
#endif
_tick
#include "enter.i65"
    .word _existsq
#include "page.i65"
    .word zeq
#include "page.i65"
    .word _qfind
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       QUERY
;
; tdict
;
#ifdef HEADERS
querylfa
    .byt $de,$ad
    .byt (_query-*-1)|bit7
    .asc "QUER","Y"|bit7
#endif
_query
#include "enter.i65"
    .word tib
#include "page.i65"
    .word clit
    .byt 80
#include "pad.i65"
    .word expect
#include "page.i65"
    .word span
#include "page.i65"
    .word fetch
#include "page.i65"
    .word numtib
#include "page.i65"
    .word store
#include "page.i65"
    .word blk
#include "page.i65"
    .word off
#include "page.i65"
    .word toin
#include "page.i65"
    .word off
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       PEARSONHASH   ( nfa -- pearsonhash )
;
; tdict
;
; input is NFA or address of a counted string
; pearsonhash is the thread index (0..f)
;
; the pearson hash should return an evenly distributed
; value between $00-$0f based on the wordset in the
; core dictionary.  In other words, all 16 threads
; are initially balanced with the same number of words,
; to reduce searches to (on average) 1/16th of the
; diction  ary.
;
;symbol table
;
;+---------------+
;|    CFA[low]   |  +0      Code field address
;|    CFA[high]  |
;+-+-+-+-+-+-+-+-+
;|     [   len   ]  +2      Length field
;[I]             |          Immediate bit
;| [V]           |          Vocabulary bit
;|   [S]         |          Smudge bit
;+-+-+-+-+-+-+-+-+
;|   name[1]     |  +3      Name field
;|           ... |
;|   name[len]   |
;+~~~~~~~~~~~~~~~+
;?  vocab ident  ?  +len+3  Vocabulary token (if V bit set)
;+~~~~~~~~~~~~~~~+
;
;#ifdef HEADERS
;pearsonhashlfa
;    .byt $de,$ad
;    .byt (pearsonhash-*-1)|bit7
;    .asc "PEARSONHAS","H"|bit7
;#endif
pearsonhash
    stx storex
    jsr nfalen01            ; A=length; Y=0
    sta n                   ; seed hash1 with length
    tay                     ; count backwards 
pearsonhash01
    lda (tos),y                     ;[5]
    and #(pearsonx-pearson-1)       ;[2]
    tax                             ;[2]
    lda n                           ;[3]
    eor pearson,x                   ;[4]
    sta n                           ;[3]
    dey
    bne pearsonhash01
    lsr
    lsr                     ; xor the pearson hash byte
    lsr                     ; into a single nybble
    lsr                     ; - - - - [ 7 6 5 4 ]
    eor n                   ; 7 6 5 4 [ 3 2 1 0 ]
    and #$0f                ; - - - - [4bit hash]
    ldx storex
    jmp put

;--------------------------------------------------------------
;
;       BLOOMHASH   ( nfa -- mask addr )
;
; The PETTIL Bloom filter tries to answer the question,
; 'is this word a number or does it contain numbers?'
; returning zero (no digits present) or the sum (mod64)
; of each digits in this word plus how many digits.  If
; any digit is present, BLOOMHASH will not return zero.
;
; This is expected to sparsely populate the 64-bit wide
; bloom filter field, allowing FIND to bypass the symbol 
; table search if the bit is turned off.
;
; Calculate the bloom filter hash between 0..63.  Returns
; a mask and address (starting at bloom) suitable for CBIT! 
; or CBIT@.
;
;#ifdef HEADERS
;bloomhashlfa
;    .byt $de,$ad
;    .byt (bloomhash-*-1)|bit7
;    .asc "BLOOMHAS","H"|bit7
;#endif
bloomhash
    stx storex
    jsr nfalen01                ; A=length; Y=0
    sty n
    tay
bloomhash01
    lda (tos),y                 ;[5]
    clc                         ;[2]
    adc #$FF-('9')              ;[2]
    adc #'9'-'0'+1              ;[2]
    bcc bloomhash02             ;[3] carry is set only for digits 
    adc n                       ;[3] anything with digits is nonzero
    and #(8*(bloomx-bloom))-1   ;[2] keep it within the filter bits
    sta n                       ;[3]
    bne bloomhash02             ; never return 0 if any digits present
    ldy #1                      ; if total of digits hits some multiple
    tya                         ; of 64, returns a nonzero value
bloomhash02
    dey
    bne bloomhash01
    lda n
    sty tos+1
    pha
    and #7
    tax
    lda power2,x
    sta tos                     ; mask
    pla
    lsr
    lsr
    lsr
    clc
    adc #<bloom
    ldy #>bloom
    bcc bloomhash03
    iny
bloomhash03
    ldx storex
    jmp pushya

;--------------------------------------------------------------
;
;       (FIND)   ( name nfa fflag -- name false | cfa flag )
;
; * outer interpreter
;
; name is the address of a counted string we are searching for.
; nfa is the first nfa in the list
; fflag is the type of search we are doing
;   0 = corelist - names are in ascending order by size
;   1 = newlist - names are random sizes, with a 0-length name to terminate
;
; returns
;       ( cfa -1 ) if found normal word
;       ( cfa 1 ) if found immediate word
;       ( name 0 ) if not in dictionary
;
;#ifdef HEADERS
;pfindlfa
;    .byt $de,$ad
;    .byt (pfind-*-1)|bit7
;    .asc "(FIND",")"|bit7
;#endif
pfind
    brk
    .byt sub | R0
    .byt st | N3
    .byt ld | TOS
    .byt st | N2
    .byt pull
    .byt st | N0
    .byt ext
    .word wordlen16
    .byt ld | R11           ; set search length
    .byt st | N1
    .byt ld | N2
pfind02
    .byt st | N0
    .byt ext
    .word wordlen16
    .byt ld | N1            ; search length
    .byt cpr | R11          ; dict length
    .byt bnc , <(pfind06-*-2)       ; we went past it.  outtie
    .byt bnz , <(pfind03-*-2)       ; different lengths, skip
    .byt ext
    .word strcomp16
    .byt bc , <(pfind04-*-2)
pfind03
    .byt ldd | N0                   ; hop
    .byt br , <(pfind02-*-2)
pfind04 ;winner!
    .byt ldd | N0           ; add 2 to the LFA
    .byt ld | N0            ; now it's an NFA
    .byt add | N1           ; add the length
    .byt st | TOS           ; now it's almost a CFA
    .byt inr | TOS          ; add 1, now it's a CFA
    .byt ldi | N0           ; fetch dictionary length byte
    .byt sub | N1           ; subtract clean length leaving only bits
    .byt set | N0
    .word $80
    .byt dcr | N3           ; assume it's a normal word
    .byt cpr | N0
    .byt bz , <(pfind06-*-2)
    .byt inr | N3
    .byt inr | N3
pfind06
    .byt ld | N3
    .byt push
    .byt st | TOS
    .byt nxt

;--------------------------------------------------------------
;
;       FIND   ( addr1 -- addr2 flag )
;
; * 83 interpreter tdict
;
; addr1 is the address of a counted string, which is the word to look
; up in the dictionary.
;
; if not found, addr2 is the original addr1, and flag = 0
; if found, addr2 is the code field address of the word,
; and flag = -1 for normal words, +1 for immediate words
;
#ifdef HEADERS
findlfa
    .byt $de,$ad
    .byt (_find-*-1)|bit7
    .asc "FIN","D"|bit7
#endif
_find
#include "enter.i65"        ; ( name )
    .word context           ; ( name context )
#include "page.i65"
    .word fetch             ; ( name vocabulary )
#include "page.i65"
    .word fetch             ; ( name LFA|0 )
#include "page.i65"
    .word qbranch
    .byt <(find01-*+1)
#include "pad.i65"                      ; ( name LFA )
    .word clit
    .byt 7
#include "pad.i65"
    .word fail              ; vocabularies unimplemented
#include "page.i65"
find01                                  ; ( name )
    .word dup               ; ( name name )
#include "page.i65"
;    .word dhash             ; ( name hash1 hash2 )
#include "page.i65"
;    .word bloomfetch        ; ( name hash1 flag )
#include "page.i65"
    .word qbranch           ; IF
    .byt <(find02-*+1)
#include "pad.i65"
;    .word dhashfetch        ; ( name LFA )
#include "page.i65"
    .word swap              ; ( LFA name )
#include "page.i65"
    .word twominus          ; ( LFA name-2 )
#include "page.i65"
    .word swap              ; ( name-2 LFA )
#include "page.i65"
    .word pfind             ; ( addr flag )
#include "page.i65"
    .word qdup              ; ( addr flag flag | addr 0 )
#include "page.i65"
    .word zeq               ; ( addr flag 0 | name-2 true )
#include "page.i65"
    .word qbranch           ; found? exit
    .byt <(find03-*+1)
#include "pad.i65"
    ; bloom filter false positive
    .word twoplus           ; ( name )
#include "page.i65"
    .word false             ; ( name false )
#include "page.i65"
    .word branch
    .byt <(find03-*+1)
#include "pad.i65"
find02                                  ; ELSE
    ; bloom filter negative
    ; ( name hash1 )
    .word drop              ; ( name )
#include "page.i65"
    .word false             ; ( here false )
#include "page.i65"
find03                                  ; THEN
    .word exit              ; ( addr flag )

;--------------------------------------------------------------
;
;       EXISTS?   ( -- addr flag )
;
; tdict
;
; scans ahead in the input stream for the next blank-delimited word,
; and returns either
#ifdef HEADERS
existsqlfa
    .byt $de,$ad
    .byt (_existsq-*-1)|bit7
    .asc "EXISTS","?"|bit7
#endif
_existsq
#include "enter.i65"
    .word bl                ; ( c )
#include "page.i65"
    .word _word             ; ( nfa )
#include "page.i65"
    .word _find             ; ( nfa -1|+1 | here false )
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       NFALEN   ( nfa -- length )
;
; return the length of this name
;
;#ifdef HEADERS
;nfalenlfa
;    .byt $de,$ad
;    .byt (nfalen-*-1)|bit7
;    .asc "NFALE","N"|bit7
;#endif
nfalen
    jsr nfalen01
    jmp put
nfalen01
    ldy #0
    lda (tos),y
    and #$1f
    rts

;--------------------------------------------------------------
;
;        NFA>CFA   ( nfa -- cfa )
;
; return the cfa of a given name field
;
;#ifdef HEADERS
;nfatocfalfa
;    .byt $de,$ad
;    .byt (nfatocfa-*-1)|bit7
;    .asc "NFA>CF","A"|bit7
;#endif
nfatocfa
    sec
    lda tos
    sbc #2
    sta tos
    bcs nfatocfa01
    dec tos+1
nfatocfa01
    ldy #0
    lda (tos),y
    pha
    iny
    lda (tos),y
    tay
    pla
    jmp put ;[24]

;--------------------------------------------------------------
;
;       INDICT?   ( nfa -- flag )
;
; return true if the code field is in either dictionary
;
;": indict?   ( nfa -- flag )
;       nfa>cfa tdict @ over u< swap here u< or ;
;#ifdef HEADERS
;indictqlfa
;    .byt $de,$ad
;    .byt (_indictq-*-1)|bit7
;    .asc "INDICT","?"|bit7
;#endif
_indictq
#include "enter.i65"
    .word twominus
#include "page.i65"
    .word fetch
#include "page.i65"
    .word tdict
#include "page.i65"
    .word fetch
#include "page.i65"
    .word over
#include "page.i65"
    .word ult
#include "page.i65"
    .word swap
#include "page.i65"
    .word here
#include "page.i65"
    .word ult
#include "page.i65"
    .word orx
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       ELIGIBLE?   ( hash searchlen nfa -- flag )
;
; returns true iff
; searchleng matches the current length? (I)
; and (CFA < DP or CFA > TDICT?)
; calculate its pearson hash
; and that matches the current hash?
;
; this word tries to be cheap with processing
;
;": eligible?   ( hash searchlen nfa -- flag )
;     dup nfalen
;     ( hash searchlen nfa len )
;     rot =
;     ( hash nfa samelength? )
;     if
;         ( hash nfa )
;         dup indict?
;         ( hash nfa indict? )
;         if
;             ( hash nfa )
;             pearsonhash =
;             ( flag )
;         else                  ( code smell alert -- )
;             2drop false       ( both elses are sort of cheesily combined )
;         then
;     else
;         2drop false
;     then ;
;
;#ifdef HEADERS
;eligibleqlfa
;    .byt $de,$ad
;    .byt (_eligibleq-*-1)|bit7
;    .asc "ELIGIBLE","?"|bit7
;#endif
_eligibleq
#include "enter.i65"
    .word dup
#include "page.i65"
    .word nfalen
#include "page.i65"
    .word rot
#include "page.i65"
    .word eq
#include "page.i65"
    .word qbranch
    .byt <(eligibleq04-*+1)
#include "pad.i65"
    .word dup
#include "page.i65"
    .word _indictq
#include "page.i65"
    .word qbranch
    .byt <(eligibleq04-*+1)
#include "pad.i65"
    .word pearsonhash
#include "page.i65"
    .word eq
#include "page.i65"
    .word branch
    .byt <(eligibleq05-*+1)
#include "pad.i65"
eligibleq04
    .word twodrop
#include "page.i65"
    .word false
#include "page.i65"
eligibleq05
    .word exit

;--------------------------------------------------------------
;
;       >SYMS   ( -- addr )
;
; returns the address of the symbol portion of the symbol table
;
;#ifdef HEADERS
;tosymslfa
;    .byt $de,$ad
;    .byt (_tosyms-*-1)|bit7
;    .asc ">SYM","S"|bit7
;#endif
_tosyms
#include "enter.i65"
    .word symtab
#include "page.i65"
    .word fetch
#include "page.i65"
    .word clit
    .byt 32
#include "page.i65"
    .word plus
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       >SYMTAIL   ( nfa -- lastnfa )
;
; Skip through the symbol table until finding the 0-length byte.
; Return the address of the symbol table tail
;
;#ifdef HEADERS
;tosymtaillfa
;    .byt $de,$ad
;    .byt (tosymtail-*-1)|bit7
;    .asc ">SYMTAI","L"|bit7
;#endif
tosymtail
    jsr nfalen01                ; A=length; Y=0; Z=(A==0)
    beq symsiz02
    clc
    adc #3
    adc tos
    sta tos
    bcc tosymtail
    inc tos+1
    bcs tosymtail
symsiz02
    jmp next

;--------------------------------------------------------------
;
;       SYM+   ( target nfa -- )
;
; move a symbol up to pad and turn on its bloomfilter bit
;
;": sym+
;     ( target nfa )
;     dup>r
;     ( target nfa ) ( R; nfa )
;     nfalen 3 +
;     ( target len+3 ) ( R; nfa )
;     r@ 2- -rot
;     ( nfa-2 target len+3 ) ( R; nfa )
;     cmove
;     ( R; nfa )
;     r> bloomhash cbit! ;
;#ifdef HEADERS
;sympluslfa
;    .byt $de,$ad
;    .byt (_symplus-*-1)|bit7
;    .asc "SYM","+"|bit7
;#endif
_symplus
#include "enter.i65"
    .word duptor
#include "page.i65"
    .word nfalen
#include "page.i65"
    .word threeplus
#include "page.i65"
    .word rfetch
#include "page.i65"
    .word twominus
#include "page.i65"
    .word _dashrot
#include "page.i65"
    .word cmove
#include "page.i65"
#ifdef ENTERTAINMENT
    .word rfetch
#include "page.i65"
    .word dup
#include "page.i65"
    .word nfalen
#include "page.i65"
    .word one
#include "page.i65"
    .word plusunder
#include "page.i65"
    .word type
#include "page.i65"
    .word one
#include "page.i65"
    .word _spaces
#include "page.i65"
#endif
    .word rfrom
#include "page.i65"
    .word bloomhash
#include "page.i65"
    .word cbitstore
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       NFA+   ( nfa -- nfa+ )
;
; description
;
;#ifdef HEADERS
;nfapluslfa
;    .byt $de,$ad
;    .byt (nfaplus-*-1)|bit7
;    .asc "NFA","+"|bit7
;#endif
nfaplus
    jsr nfalen01
    clc
    adc #3
    adc tos
    sta tos
    bcc nfaplus01
    inc tos+1
nfaplus01
    jmp next

;--------------------------------------------------------------
;
;       SYMBYSIZE   ( searchlen nfa -- flag )
;
; returns true iff
; searchleng matches the current length? (I)
; and (CFA < DP or CFA > TDICT?)
;
;": symbysize   ( searchlen nfa -- flag )
;     dup nfalen rot =
;     ( nfa samelength? ) 
;     dup
;     if
;         ( nfa samelength? )
;         drop indict? 
;     then nip ;  ( flag )
;
;#ifdef HEADERS
;symbysizelfa
;    .byt $de,$ad
;    .byt (_symbysize-*-1)|bit7
;    .asc "SYMBYSIZ","E"|bit7
;#endif
_symbysize
#include "enter.i65"
    .word dup
#include "page.i65"
    .word nfalen
#include "page.i65"
    .word rot
#include "page.i65"
    .word eq
#include "page.i65"
    .word dup
#include "page.i65"
    .word qbranch
    .byt <(symbysize01-*+1)
#include "pad.i65"
    .word swap
#include "page.i65"
    .word _indictq
#include "page.i65"
symbysize01
    .word nip
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       SYMBYHASH   ( hash nfa -- flag )
;
; returns true iff
; calculate its pearson hash
; and that matches the current hash?
;
;": symbyhash   ( hash nfa -- flag )
;     pearsonhash = ;
;
;#ifdef HEADERS
;symbyhashlfa
;    .byt $de,$ad
;    .byt (_symbyhash-*-1)|bit7
;    .asc "SYMBYHAS","H"|bit7
;#endif
_symbyhash
#include "enter.i65"
    .word pearsonhash
#include "page.i65"
    .word eq
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       SYMSORT   ( 'compare searchfor src dest -- dest+ )
;
; Make a pass through the symbol table at PAD, copying eligible
; symbols to target
;
;": symsort   ( 'compare searchfor src dest )
;     >r 2+
;     ( 'compare searchfor nfa ) ( R; target )
;     begin
;         \ not done yet?
;         dup nfalen
;         ( 'compare searchfor nfa currlen ) ( R; target )
;     while
;         ( 'compare searchfor nfa ) ( R; target )
;         3dup rot execute
;         ( 'compare searchfor nfa flag ) ( R; target )
;         if
;             \ copy it up to the new symbol table
;             ( 'compare searchfor nfa ) ( R; target )
;             r@ over
;             ( 'compare searchfor nfa target nfa ) ( R; target )
;             sym+
;             ( 'compare searchfor nfa ) ( R; target )
;             \ advance target pointer
;             r> 2+ nfa+ 2- >r
;             ( 'compare searchfor nfa ) ( R; target+ )
;         then
;         \ advance source pointer
;         nfa+
;         ( 'compare searchfor nfa+ ) ( R; target+ )
;     repeat
;     ( 'compare searchfor nfa+ ) ( R; target+ )
;     3drop r> ;   ( dest+ )
;
;#ifdef HEADERS
;symsortlfa
;    .byt $de,$ad
;    .byt (_symsort-*-1)|bit7
;    .asc "SYMSOR","T"|bit7
;#endif
_symsort
#include "enter.i65"
    .word tor
#include "page.i65"
    .word twoplus
#include "page.i65"
symsort01
    .word dup
#include "page.i65"
    .word nfalen
#include "page.i65"
    .word qbranch
    .byt <(symsort03-*+1)
#include "pad.i65"
    .word threedup
#include "page.i65"
    .word rot
#include "page.i65"
    .word execute
#include "page.i65"
    .word qbranch
    .byt <(symsort02-*+1)
#include "pad.i65"
    .word rfetch
#include "page.i65"
    .word over
#include "page.i65"
    .word _symplus
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word twoplus
#include "page.i65"
    .word nfaplus
#include "page.i65"
    .word twominus
#include "page.i65"
    .word tor
#include "page.i65"
symsort02
    .word nfaplus
#include "page.i65"
    .word branch
    .byt <(symsort01-*+1)
#include "pad.i65"
symsort03
    .word threedrop
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       >BLOOM   ( n -- mask offset )
;
; transform an integer into a bitmask and offset, suitable for
; addressing a bloom filter
;
;": >bloom   ( n -- mask offset )
;         dup 7 and [ power2 ] literal + c@
;         swap 2/ 2/ 2/ ;
;
;#ifdef HEADERS
;tobloomlfa
;    .byt $de,$ad
;    .byt (_tobloom-*-1)|bit7
;    .asc ">BLOO","M"|bit7
;#endif
_tobloom
#include "enter.i65"
    .word dup
#include "page.i65"
    .word clit
    .byt 7
#include "pad.i65"
    .word andx
#include "page.i65"
    .word plit
    .word power2
#include "pad.i65"
    .word plus
#include "page.i65"
    .word cfetch
#include "page.i65"
    .word swap
#include "page.i65"
    .word twoslash
#include "page.i65"
    .word twoslash
#include "page.i65"
    .word twoslash
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       PASSFILTER   ( symbols -- )
;
; During the first half of rehash, it is unnecessary to make a
; pass through the entire symbol table searching for words of a
; given length, if none of that length exist.  This is a 
; bloom filter to eliminate those symbol table passes.
;
;": passfilter   ( symbols -- )
;     2+
;     ( nfa )
;     begin
;         dup nfalen ?dup
;     while
;         dup 7 and [ power2 ] literal + c@
;         swap 2/ 2/ 2/ [ passbits ] literal +
;     ( mask addr )
;         cbit!
;         nfa+
;     repeat drop ;
;
;#ifdef HEADERS
;passfilterlfa
;    .byt $de,$ad
;    .byt (_passfilter-*-1)|bit7
;    .asc "PASSFILTE","R"|bit7
;#endif
_passfilter
#include "enter.i65"
    .word plit
    .word passbits
#include "pad.i65"
    .word four
#include "page.i65"
    .word _erase
#include "page.i65"
    .word twoplus
#include "page.i65"
passfilter01
    .word dup
#include "page.i65"
    .word nfalen
#include "page.i65"
    .word qdup
#include "page.i65"
    .word qbranch
    .byt <(passfilter02-*+1)
#include "pad.i65"
    .word _tobloom
#include "page.i65"
    .word plit
    .word passbits
#include "pad.i65"
    .word plus
#include "page.i65"
    .word cbitstore
#include "page.i65"
    .word nfaplus
#include "page.i65"
    .word branch
    .byt <(passfilter01-*+1)
#include "page.i65"
passfilter02
    .word drop
#include "page.i65"
    .word exit

passbits
    .word 0,0

;--------------------------------------------------------------
;
;       (REHASH)   ( 'compare flag src targ end start -- )
;
;": (rehash)   ( 'compare flag src targ end start -- )
;     do 
;         ( 'compare flag src targ )
;         i >bloom [ passbits ] literal + cbit@
;         ( 'compare flag src targ flag )
;         if
;             ( 'compare flag src targ )
;             >r 3dup r>
;             ( 'compare flag src 'compare flag src targ )
;             2swap 
;             ( 'compare flag src src targ 'compare flag )
;             if
;             ( 'compare flag src src targ 'compare )
;                   over i 2* symtab + !
;             ( 'compare flag src src targ 'compare )
;             then
;             ( 'compare flag src src targ 'compare )
;             i 2swap
;             ( 'compare flag src 'compare i src targ )
;             symsort
;             ( 'compare flag src targ+ )
;         then
;         ( 'compare flag src targ+ )
;     loop
;     ( 'compare flag src targ+ )
;     3 erase 3drop ;
;     ()
;
;#ifdef HEADERS
;prehashlfa
;    .byt $de,$ad
;    .byt (_prehash-*-1)|bit7
;    .asc "(REHASH",")"|bit7
;#endif
_prehash
#include "enter.i65"
    .word pdo
#include "page.i65"
prehash01
#include "page.i65"
    .word i
#include "page.i65"
    .word _tobloom
#include "page.i65"
    .word plit
    .word passbits
#include "pad.i65"
    .word plus
#include "page.i65"
    .word cbitfetch
#include "page.i65"
    .word qbranch
    .byt <(prehash03-*+1)
#include "page.i65"
#ifdef ENTERTAINMENT
	.word cr
#include "page.i65"
	.word i
#include "page.i65"
	.word _dot
#include "page.i65"
#endif
    .word tor
#include "page.i65"
    .word threedup
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word twoswap
#include "page.i65"
    .word qbranch
    .byt <(prehash02-*+1)
#include "pad.i65"
    .word over
#include "page.i65"
    .word i
#include "page.i65"
    .word twostar
#include "page.i65"
    .word symtab
#include "page.i65"
    .word fetch
#include "page.i65"
    .word plus
#include "page.i65"
    .word store
#include "page.i65"
prehash02
    .word i
#include "page.i65"
    .word twoswap
#include "page.i65"
    .word _symsort
#include "page.i65"
prehash03
    .word ploop
    .byt <(prehash01-*+1)
#include "pad.i65"
    .word xyzzy
#include "page.i65"
    .word three
#include "page.i65"
    .word _erase
#include "page.i65"
    .word threedrop
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;        REHASH   ( -- )
;
; rebuilds the symbol table in high memory.
;
;": rehash  ( -- )
;     pad >syms
;     ( pad symbols )
;     ['] symbysize false
;     ( pad symbols 'compare flag )
;     2over swap
;     ( pad symbols 'compare flag symbols pad )
;     32 1  (rehash)
;     ( pad symbols  )
;     symtab @ 32 erase
;     ( pad symbols  )
;     [ bloom ] literal 8 erase
;     ( pad symbols  )
;     [ passbits ] literal on
;     ['] symbyhash true 2swap 16 0  (rehash)
;     ( )
;
#ifdef HEADERS
rehashlfa
    .byt $de,$ad
    .byt (_rehash-*-1)|bit7
    .asc "REHAS","H"|bit7
#endif
_rehash
#include "enter.i65"
    .word _pad
#include "page.i65"
    .word _tosyms
#include "page.i65"
    .word dup
#include "page.i65"
    .word _passfilter
#include "page.i65"
    .word plit
    .word _symbysize
#include "pad.i65"
    .word false
#include "page.i65"
    .word twoover
#include "page.i65"
    .word swap
#include "page.i65"
    .word clit
    .byt 32
#include "pad.i65"
    .word one
#include "page.i65"
    .word _prehash
#include "page.i65"
    .word symtab
#include "page.i65"
    .word fetch
#include "page.i65"
    .word clit
    .byt 32
#include "pad.i65"
    .word _erase
#include "page.i65"
    .word plit
    .word bloom
#include "pad.i65"
    .word clit
    .byt 8
#include "pad.i65"
    .word _erase
#include "page.i65"
    .word plit
    .word passbits
#include "pad.i65"
	.word on
#include "page.i65"
    .word plit
    .word _symbyhash
#include "pad.i65"
    .word true
#include "page.i65"
    .word twoswap
#include "page.i65"
    .word clit
    .byt 16
#include "pad.i65"
    .word zero
#include "page.i65"
    .word _prehash
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       FORGET   ( -- )
;
;   ( cfa -- ; special COLD mode - does not scan input )
;
; * 83 interpreter
;
; checks FENCE, moves DP, sorts symbol table
;
#ifdef HEADERS
forgetlfa
    .byt $de,$ad
    .byt (_forget-*-1)|bit7
    .asc "FORGE","T"|bit7
#endif
_forget
#include "enter.i65"
    .word rfetch                ; ( cfa caller )
#include "page.i65"
    .word plit
    .word launch01              ; ( cfa caller launch01 )
#include "pad.i65"
    .word eq                    ; ( cfa iscold? )
#include "page.i65"
    .word qbranch               ; ( cfa )
    .byt <(forget01-*+1)
#include "pad.i65"
    .word plit
    .word errptr                ; We got here from COLD. Do the things
#include "pad.i65"              ; COLD didn't know how to do.  Don't scan
    .word errmess               ; input stream for the next word, because
#include "page.i65"             ; there's a CFA on the stack already.
    .word store
#include "page.i65"
    .word plit
    .word warm
#include "pad.i65"
    .word startup
#include "page.i65"
    .word store                 ; set startup to WARM
#include "page.i65"
    .word branch
    .byt <(forget02-*+1)
#include "pad.i65"
forget01
    .word _tick
#include "page.i65"
forget02
    .word dup
#include "page.i65"
    .word fence
#include "page.i65"
    .word fetch
#include "page.i65"
    .word ult
#include "page.i65"
    .word qbranch
    .byt <(forget03-*+1)
#include "pad.i65"
    .word clit
    .byt 7
#include "pad.i65"
    .word fail                  ; CAN'T FORGET BELOW FENCE
#include "page.i65"
forget03
    .word dp
#include "page.i65"
    .word store
#include "page.i65"
    .word _rehash
#include "page.i65"
    .word exit
