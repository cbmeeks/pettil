; core-pet.a65
#echo .       core-pet.a65              PET-specific features

;--------------------------------------------------------------
#if 0
name=EMIT
stack=( c -- )
tags=forth-83,i/o
[desc]
[/desc]
#endif
emit
    jmp emitvector
emitvector
    ldy numout+3
    clc
    lda (up),y
    adc #1
    sta (up),y
    bne emit01
    iny
    clc
    lda (up),y
    adc #1
    sta (up),y
emit01
    lda tos
    jsr CHROUT
    jmp pops

;--------------------------------------------------------------
#if 0
name=KEY
stack=( -- c )
tags=forth-83,i/o
[desc]
Wait for a keypress by the user
[/desc]
#endif
key
    stx storex
key01
    jsr GETIN
    beq key01
    ldx storex
    ldy #0
    jmp pushya

;--------------------------------------------------------------
#if 0
name=?TERMINAL
stack=( -- flag )
tags=forth-83,i/o
[desc]
Returns true if the stop key was pressed
[/desc]
#endif
qterminal
    ldy #0
    lda $9b
    cmp #$ef            ; check STOP key
    bne qterminal01
    dey
qterminal01
    tya
    jmp pushya

;--------------------------------------------------------------
#if 0
name=CR
stack=( -- )
tags=forth-83,i/o
[desc]
Output a carriage return
[/desc]
#endif
cr
    jmp crvector
crvector
    lda #$0d
    jsr CHROUT
    lda #0
    ldy numout+3
    sta (up),y
    iny
    sta (up),y
    ldy numline+3
    clc
    lda (up),y
    adc #1
    sta (up),y
    bcc cr01
    iny
    lda (up),y
    adc #0
    sta (up),y
cr01
    jmp next

;--------------------------------------------------------------
#if 0
name=VIDRAM
stack=( -- $8000 )
tags=i/o,const
[desc]
Constant, address of PET video memory $8000
[/desc]
#endif
vidram
    jsr doconst
    .word VIDRAM

;--------------------------------------------------------------
#if 0
name=MON
stack=( -- )
[desc]
Restores BASIC zero page and exits to the TIM monitor
[/desc]
#endif
mon
    jsr aloha      ; restore BASIC zpage
    brk
    jsr aloha      ; restore BASIC zpage
plover              ; if we get here, it's unimplemented
xyzzy
    jmp next        ; used as a breakpoint in secondaries

;--------------------------------------------------------------
#if 0
name=JIFFY@
stack=( -- d )
[desc]
The number of jiffies since powerup or midnight as a double
[/desc]
#endif
_jiffyfetch
#include "enter.i65"
    .word notirq                ; don't let IRQ interrupt the copy
#include "page.i65"
    .word clit
    .byt TIME
#include "page.i65"
    .word threecfetch
#include "page.i65"
    .word notirq                ; reenable
#include "page.i65"
    .word exit  ; [14]

;--------------------------------------------------------------
#if 0
name=CMDOFF
tags=i/o,kernel
stack=( -- )
[desc]
Restore default I/O channels
[/desc]
#endif
cmdoff
    stx storex
    jsr CLRCHN
    ldx storex
    jmp next

;--------------------------------------------------------------
#if 0
name=EXPECT
stack=( addr +n -- )
tags=forth-83,i/o
[desc]
Stores up to +n characters into memory beginning at addr.
Receive characters and store each into memory.
The transfer begins at addr proceeding towards
higher addresses one byte per character until
either "return" is received or until +n characters have been transfered.  No more than +n
characters will be stored.  The "return" is not
stored into memory.  No characters are received
or transfered if +n is zero.  All characters
actually received and stored into memory will
be displayed, with the "return" displaying as a
space.
[/desc]
#endif
expect
    jmp expectvector
expectvector
    ldy #1
    jsr locals
    stx storex
    dey
expect01
    iny
    cpy tos
    bcs expect02
    jsr CHRIN
    cmp #$0d
    beq expect02
    sta (n),y
    bne expect01
expect02
    tya
    ldy span+3
    sta (up),y
    iny
    lda #0
    sta (up),y
    ldx storex
    jmp pops

;--------------------------------------------------------------
#if 0
name=FILENAME
stack=( addr n -- )
tags=i/o,kernel
[desc]
Set the filename for file operations.  Must be used before
OPEN or CSAVE.
[/desc]
#endif
_filename

;--------------------------------------------------------------
#if 0
name=OPEN
stack=( n1 n2 n3 -- f )
tags=i/o,kernel
[desc]
Open the logical file number n1 on device n2 with secondary
address n3.  Filename must have been set with NAME.  Returns
an error flag f (0=none, 24=error).
ftp://www.zimmers.net/pub/cbm/vic20/programming/VIC-Forth/Manual.txt
[/desc]
#endif
_open

;--------------------------------------------------------------
#if 0
name=HPIN
stack=( n -- f )
tags=i/o,kernel
[desc]
Send the current input stream to logical file number n.
Returns and error flag f (0=none, 24=error).  See OPEN.
Pronounced "h-p-in".
[/desc]
#endif
_hpin

;--------------------------------------------------------------
#if 0
name=HPOFF
stack=( -- )
tags=i/o,kernel
[desc]
Restore the current input and output stream to the
keyboard and screen respectively.  Pronounced "h-p-off".
[/desc]
#endif
_hpoff

;--------------------------------------------------------------
#if 0
name=HPOUT
stack=( n -- f )
tags=i/o,kernel
[desc]
 consider CMDIN CMDOUT CMDOFF
 Send the current output stream to logical file number n.
 Returns an error flag f (0=none, 24=error).  See OPEN.
 Pronounced "h-p-out".
[/desc]
#endif
_hpout

;--------------------------------------------------------------
#if 0
name=CSAVE
stack=( -- f )
tags=i/o,kernel
[desc]
 Save the wordlist and USER-variables to cassette.  The
 wordlist may be given a name (see NAME).  Returns an error
 flag (0=none, 24=error).  See CLOAD.
[/desc]
#endif
_csave

;--------------------------------------------------------------
;--------------------------------------------------------------
#if 0
name=CLOAD
stack=( -- f )
tags=i/o,kernel
[desc]
 Load the saved wordlist from cassette.  Returns an error
 flag f (0=none, 24=error).  See CSAVE.
[/desc]
#endif
_cload

;--------------------------------------------------------------
;--------------------------------------------------------------
#if 0
name=?DISC
stack=( -- )
tags=i/o,kernel
[desc]
          Read the disk error channel storing the message at address
          $8C0 (C64-FORTH) or $1295 (VIC-FORTH) and the length byte
          at $8BF (C64-FORTH) or $1294 (VIC-FORTH).  See COUNT and
          TYPE.  Pronounced "question-disc".
[/desc]
#endif
_qdisc
