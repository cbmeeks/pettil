; pettil-user.a65
#echo .       pettil-user.a65           User variables for dev env

;context
;current
;fence
;dp
;symtab
;symnew
;symtail
;state
;csp
;vocid
;#voc
;--------------------------------------------------------------
;
;       USER   ( n -- )
;
; compiler tdict
;
#ifdef HEADERS
userlfa
    .byt $de,$ad
    .byt (user-*-1)|bit7
    .asc "USE","R"|bit7
#endif
user
#include "enter.i65"
    .word _constant
#include "page.i65"
    .word _psemi
    jmp uservar
    
;--------------------------------------------------------------
;
;       +ORIGIN
;
; compiler tdict
;
#ifdef HEADERS
plusoriginlfa
    .byt $de,$ad
    .byt (_plusorigin-*-1)|bit7
    .asc "+ORIGI","N"|bit7
#endif
_plusorigin
#include "enter.i65"
    .word plit
    .word userarea
#include "pad.i65"
    .word plus
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;		CONTEXT   ( -- addr )
;
; search vocabulary
;	0 = core
;	1 = editor
;	2 = assembler
;
#ifdef HEADERS
contextlfa
	.byt $de,$ad
	.byt (context-*-1)|bit7
	.asc "CONTEX","T"|bit7
#endif
context
    jsr uservar
    .byt usercontext-userarea

;--------------------------------------------------------------
;
;       CURRENT   ( -- addr )
;
; tdict
;
#ifdef HEADERS
currentlfa
    .byt $de,$ad
    .byt (current-*-1)|bit7
    .asc "CURREN","T"|bit7
#endif
current
    jsr uservar
    .byt usercurrent-userarea

;--------------------------------------------------------------
;
;       FENCE
;
; tdict
;
#ifdef HEADERS
fencelfa
    .byt $de,$ad
    .byt (fence-*-1)|bit7
    .asc "FENC","E"|bit7
#endif
fence
    jsr uservar
    .byt userfence-userarea

;--------------------------------------------------------------
;
;		SYMNEW   ( -- )
;
; User variable points to the start of new (unhashed) symbols
; These are searched first, regardless of length
;
#ifdef HEADERS
symnewlfa
	.byt $de,$ad
	.byt (symnew-*-1)|bit7
	.asc "SYMNE","W"|bit7
#endif
symnew
    jsr uservar
    .byt usersymnew-userarea

;--------------------------------------------------------------
;
;		#VOC   ( -- )
;
; Total number of vocabularies (initially 2)
;
#ifdef HEADERS
numvoclfa
	.byt $de,$ad
	.byt (numvoc-*-1)|bit7
	.asc "#VO","C"|bit7
#endif
numvoc
	jsr uservar
    .byt usernumvoc-userarea
	
;--------------------------------------------------------------
;
;       STATE   ( -- addr )
;
; * 83 compiler tdict
;
; The address of the user variable containing the
; compilation  state.    A non-zero content indi-
; cates compilation is occuring,  but  the  value
; itself is system dependent.  A Standard Program
; may not modify this variable.
;
#ifdef HEADERS
statelfa
    .byt $de,$ad
    .byt (state-*-1)|bit7
    .asc "STAT","E"|bit7
#endif
state
    jsr uservar
    .byt userstate-userarea

;--------------------------------------------------------------
;
;       CSP   ( -- addr )
;
; tdict
;
#ifdef HEADERS
csplfa
    .byt $de,$ad
    .byt (csp-*-1)|bit7
    .asc "CS","P"|bit7
#endif
csp
    jsr uservar
    .byt usercsp-userarea

