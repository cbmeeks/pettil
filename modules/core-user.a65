; core-user.a65
#echo .       core-user.a65             Core User Variables

; user variables required for pettil-core
; sp0 rp0 memsiz startup vmbuf vmsiz tdict base dpl hld
; blk >in span #tib #out #line errmess scr

;--------------------------------------------------------------
;
;       USERVAR   ( -- addr )
;
; Runtime action of all user variables.  Returns the address of
; the variable
;
uservar
    pla
    tay
    pla
    sta n+1
    iny
    bne uservar01
    inc n+1
uservar01
    sty n
    ldy #0
    clc
    lda up
    adc (n),y
    sta n
    lda up+1
    adc #0
    tay
    lda n
    jmp pushya

;--------------------------------------------------------------
;
;       SP0
;
#ifdef HEADERS
spzlfa
    .byt $de,$ad
    .byt (sp0-*-1)|bit7
    .asc "SP","0"|bit7
#endif
sp0
    jsr uservar
    .byt usersp0-userarea

;--------------------------------------------------------------
;
;       RP0
;
#ifdef HEADERS
rpzlfa
    .byt $de,$ad
    .byt (rp0-*-1)|bit7
    .asc "RP","0"|bit7
#endif
rp0
    jsr uservar
    .byt userrp0-userarea

;--------------------------------------------------------------
;
;       DP
;
; tdict
;
#ifdef HEADERS
dplfa
    .byt $de,$ad
    .byt (dp-*-1)|bit7
    .asc "D","P"|bit7
#endif
dp
    jsr uservar
    .byt userdp-userarea

;--------------------------------------------------------------
;
;       MEMSIZ
;
; top of RAM
;
#ifdef HEADERS
memsizlfa
    .byt $de,$ad
    .byt (memsiz-*-1)|bit7
    .asc "MEMSI","Z"|bit7
#endif
memsiz
    jsr uservar
    .byt usermemsiz-userarea

;--------------------------------------------------------------
;
;       SYMTAB
;
; Symbol table start address
;
; First 32 bytes are thread pointers for each possible Pearson
; hash value, followed by symbols.  This variable could be set
; = MEMSIZ if symbol table isn't loaded.
;
#ifdef HEADERS
symtablfa
    .byt $de,$ad
    .byt (symtab-*-1)|bit7
    .asc "SYMTA","B"|bit7
#endif
symtab
    jsr uservar
    .byt usersymtab-userarea

;--------------------------------------------------------------
;
;		SYMTAIL   ( -- addr )
;
; description
;
#ifdef HEADERS
symtaillfa
	.byt $de,$ad
	.byt (symtail-*-1)|bit7
	.asc "SYMTAI","L"|bit7
#endif
symtail
    jsr uservar
    .byt usersymtail-userarea

;--------------------------------------------------------------
;
;       STARTUP   ( -- addr )
;
#ifdef HEADERS
startuplfa
    .byt $de,$ad
    .byt (startup-*-1)|bit7
    .asc "STARTU","P"|bit7
#endif
startup
    jsr uservar
    .byt userstartup-userarea

;--------------------------------------------------------------
;
;       VMBUF
;
#ifdef HEADERS
vmbuflfa
    .byt $de,$ad
    .byt (vmbuf-*-1)|bit7
    .asc "VMBU","F"|bit7
#endif
vmbuf
    jsr uservar
    .byt uservmbuf-userarea

;--------------------------------------------------------------
;
;       #VMPKT   ( -- addr )
;
; Number of virtual memory packets
;
#ifdef HEADERS
numvmpktlfa
    .byt $de,$ad
    .byt (numvmpkt-*-1)|bit7
    .asc "#VMPK","T"|bit7
#endif
numvmpkt
    jsr uservar
    .byt usernumvmpkt-userarea

;--------------------------------------------------------------
;
;       TDICT   ( -- addr )
;
#ifdef HEADERS
tdictlfa
    .byt $de,$ad
    .byt (tdict-*-1)|bit7
    .asc "TDIC","T"|bit7
#endif
tdict
    jsr uservar
    .byt usertdict-userarea

;--------------------------------------------------------------
;
;       BASE
;
; * 83 interpreter
;
#ifdef HEADERS
baselfa
    .byt $de,$ad
    .byt (base-*-1)|bit7
    .asc "BAS","E"|bit7
#endif
base
    jsr uservar
    .byt userbase-userarea

;--------------------------------------------------------------
;
;       DPL
;
#ifdef HEADERS
dpllfa
    .byt $de,$ad
    .byt (dpl-*-1)|bit7
    .asc "DP","L"|bit7
#endif
dpl
    jsr uservar
    .byt userdpl-userarea

;--------------------------------------------------------------
;
;       HLD
;
#ifdef HEADERS
hldlfa
    .byt $de,$ad
    .byt (hld-*-1)|bit7
    .asc "HL","D"|bit7
#endif
hld
    jsr uservar
    .byt userhld-userarea

;--------------------------------------------------------------
;
;       BLK   ( -- addr )
;
; * 83 interpreter tdict
;
; The address of a variable containing the number of the mass
; storage block being interpreted as the input stream.  If the
; value of BLK is zero the input stream is taken from the text
; input buffer.  {{0..the number of blocks available -1}}
; -1 = cassette tape 1 ~
; -2 = cassette tape 2 ~
#ifdef HEADERS
blklfa
    .byt $de,$ad
    .byt (blk-*-1)|bit7
    .asc "BL","K"|bit7
#endif
blk
    jsr uservar
    .byt userblk-userarea

;--------------------------------------------------------------
;
;       >IN   ( -- addr )
;
; * 83 interpreter tdict
;
; Leaves the address of the user variable >IN which contains the
; number of bytes from the beginning of the input stream at any
; particular moment during interpretation.
; The address of a user variable which contains the present
; character offset within the input stream.  
#ifdef HEADERS
toinlfa
    .byt $de,$ad
    .byt (toin-*-1)|bit7
    .asc ">I","N"|bit7
#endif
toin
    jsr uservar
    .byt usertoin-userarea

;--------------------------------------------------------------
;
;       SPAN   ( -- addr )
;
; * 83 interpreter tdict
;
; The address of a variable containing the count of characters
; actually received and stored by the last execution of EXPECT
#ifdef HEADERS
spanlfa
    .byt $de,$ad
    .byt (span-*-1)|bit7
    .asc "SPA","N"|bit7
#endif
span
    jsr uservar
    .byt userspan-userarea

;--------------------------------------------------------------
;
;       #TIB
;
; * 83 interpreter 
;
;  The address of a variable containing the number of bytes in
;  the text input buffer.  #TIB is accessed by WORD when BLK is
;" zero.  {{0..capacity of TIB}}  
;
#ifdef HEADERS
numtiblfa
    .byt $de,$ad
    .byt (numtib-*-1)|bit7
    .asc "#TI","B"|bit7
#endif
numtib
    jsr uservar
    .byt usertib-userarea

;--------------------------------------------------------------
;
;       #OUT
;
; counts number of characters that have been emitted
;
#ifdef HEADERS
numoutlfa
    .byt $de,$ad
    .byt (numout-*-1)|bit7
    .asc "#OU","T"|bit7
#endif
numout
    jsr uservar
    .byt usernumout-userarea

;--------------------------------------------------------------
;
;       #LINE
;
#ifdef HEADERS
numlinelfa
    .byt $de,$ad
    .byt (numline-*-1)|bit7
    .asc "#LIN","E"|bit7
#endif
numline
    jsr uservar
    .byt usernumline-userarea

;--------------------------------------------------------------
;
;       ERRMESS   ( -- addr )
;
; address of the error messages table
;
#ifdef HEADERS
errmesslfa
    .byt $de,$ad
    .byt (errmess-*-1)|bit7
    .asc "ERRMES","S"|bit7
#endif
errmess
    jsr uservar
    .byt usererrmess-userarea

;--------------------------------------------------------------
;
;       SCR   ( -- addr )
;
; The address of a user variable containing the
; number of the screen most recently LISTed or EDITed
;
#ifdef HEADERS
scrlfa
    .byt $de,$ad
    .byt (scr-*-1)|bit7
    .asc "SC","R"|bit7
#endif
scr
    jsr uservar
    .byt userscr-userarea
