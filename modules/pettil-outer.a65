; pettil-outer.a65
#echo pettil-outer.a65          Outer Interpreter

;--------------------------------------------------------------
pearson
    .byt 150,191,252,0,194,202,129,7
pearsonx

;--------------------------------------------------------------
;
; Tables used by Pearson hash function and Bloom filter for root
; vocabulary.  The Pearson hash is used by hash1 to evenly distribute
; words among the multiple threads of the dictionary. The Bloom
; filter lets us skip looking for things that we know aren't in
; the dictionary (e.g. numbers).  For now, keep bloom and lfalist
; consecutive in memory, with bloom first so RETHREAD won't break
bloom
;    .dsb 8,$b1      ; 64-bit, used by hash2 (bloom filter)
bloomx

lfalist
;    .word $efbe,$efbe,$efbe,$efbe,$efbe,$efbe,$efbe,$efbe
;    .word $efbe,$efbe,$efbe,$efbe,$efbe,$efbe,$efbe,$efbe
    ; heads of link threads for root vocabulary


;==============================================================
;==== Error messages                                       ====
;==============================================================
errptr
    .word msg01,msg02,msg03,msg04,msg05,msg06,msg07,msg08

msg01
    .byt msg02-*-1
    .asc "STACK EMPTY"
msg02   
    .byt msg03-*-1
    .asc "STACK FULL"
msg03
    .byt msg04-*-1
    .asc "NOT FOUND"
msg04
    .byt msg05-*-1
    .asc "DEFINITION UNFINISHED"
msg05
    .byt msg06-*-1
    .asc "COMPILATION ONLY"
msg06
    .byt msg07-*-1
    .asc "UNPAIRED CONDITIONALS"
msg07
    .byt msg08-*-1
    .asc "CAN'T FORGET BELOW FENCE"
msg08
    .byt msg09-*-1
    .asc "BLOCK OUT OF RANGE"
msg09


;--------------------------------------------------------------
;
;       INTERPRET
;
; tdict
;
;
;": interpret   ( )
;       begin   ?stack
;               exists?
;               if      link>
;                       execute
;               else    number dpl @ 1+ 0=
;                       if      drop
;                       then
;               then
;               false
;               quit?
;       again ;
;
#ifdef HEADERS
interpretlfa
    .byt $de,$ad
    .byt (_interpret-*-1)|bit7
    .asc "INTERPRE","T"|bit7
#endif
_interpret
#include "enter.i65"
interpret01
    .word qstack            ; ( )
#include "page.i65"
    .word _existsq          ; ( addr flag )
#include "page.i65"
    .word qbranch
    .byt <(interpret02-*+1)
#include "pad.i65"
    .word execute
#include "page.i65"
    .word branch
    .byt <(interpret03-*+1)
#include "pad.i65"
interpret02
    .word _number
#include "page.i65"
    .word dpl
#include "page.i65"
    .word fetch
#include "page.i65"
    .word oneplus
#include "page.i65"
    .word zeq
#include "page.i65"
    .word qbranch
    .byt <(interpret03-*+1)
#include "pad.i65"
    .word drop
#include "page.i65"
interpret03
    .word false
#include "page.i65"
    .word _quitq
#include "page.i65"
    .word qbranch
    .byt <(interpret01-*+1)
#include "pad.i65"
    .word exit

;--------------------------------------------------------------
;
;       IMMEDIATE
;
; tdict
;
; * 83 compiler
;
#ifdef HEADERS
immediatelfa
    .byt $de,$ad
    .byt (_immediate-*-1)|bit7
    .asc "IMMEDIAT","E"|bit7
#endif
_immediate
#include "enter.i65"
    .word _latest
#include "page.i65"
    .word clit
    .byt $40
#include "pad.i65"
    .word toggle
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       VOCABULARY
;
; * 83 compiler tdict
;
; see FD-V05N3 p. 5
#ifdef HEADERS
vocabularylfa
    .byt $de,$ad
    .byt (_vocabulary-*-1)|bit7
    .asc "VOCABULAR","Y"|bit7
#endif
_vocabulary
#include "enter.i65"
    .word _create
#include "page.i65"
    .word exit
;#include "page.i65"
;               .word current
;#include "page.i65"
;               .word fetch
;#include "page.i65"
;               .word twoplus
;#include "page.i65"
;               .word _comma
;#include "page.i65"
;               .word here
;#include "page.i65"
;               .word voclink
;#include "page.i65"
;               .word fetch
;#include "page.i65"
;               .word _comma
;#include "page.i65"
;               .word voclink
;#include "page.i65"
;               .word store
;#include "page.i65"
;               .word _psemi
vocabdoes
    jsr dodoes
#include "page.i65"
    .word context
#include "page.i65"
    .word store
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       FORTH
;
; * 83 interpreter tdict
;
; when all is over, said and done with, the PFA of FORTH (aka FORTH+3)
; should be stored in user variable CONTEXT
#ifdef HEADERS
forthlfa
    .byt $de,$ad
    .byt (forth-*-1)|bit7
    .asc "FORT","H"|bit7
#endif
forth
    jsr vocabdoes
    .word 0                 ; flag as root vocabulary
    .byt 1|bit7
    .byt ' '|bit7           ; $a081
lastvoc
    .word 0                 ; link to next vocabulary, 0 for last

;--------------------------------------------------------------
;
;       DEFINITIONS
;
; * 83 interpreter tdict
;
#ifdef HEADERS
definitionslfa
  .byt $de,$ad
    .byt (_definitions-*-1)|bit7
    .asc "DEFINITION","S"|bit7
#endif
_definitions
#include "enter.i65"
    .word context
#include "page.i65"
    .word fetch
#include "page.i65"
    .word current
#include "page.i65"
    .word store
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       (
;
; * 83 interpreter tdict
;
#ifdef HEADERS
lparenlfa
    .byt $de,$ad
    .byt (_lparen-*-1)|bit7
    .asc "("|bit7
#endif
_lparen
#include "enter.i65"
    .word clit
    .asc ')'
#include "pad.i65"
    .word _qchar
#include "page.i65"
    .word twodrop
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       ABORT
;
; * 83 interpreter tdict
;
#ifdef HEADERS
abortlfa
    .byt $de,$ad
    .byt (_abort-*-1)|bit7
    .asc "ABOR","T"|bit7
#endif
_abort
#include "enter.i65"
    .word spstore
#include "page.i65"
    .word _quit
#include "page.i65"
    .word exit      ; make the decompiler happy

;--------------------------------------------------------------
;
;       QUIT
;
; tdict
;
;"This is the infinite outer interpreter loop:
;       - resets the return stack (RP!)
;       - outputs a carriage return (CR)
;       - waits for a line of user input (QUERY)
;       - interprets that line
; * 83 interpreter outer
;
#ifdef HEADERS
quitlfa
    .byt $de,$ad
    .byt (_quit-*-1)|bit7
    .asc "QUI","T"|bit7
#endif
_quit
#include "enter.i65"
    .word blk
#include "page.i65"
    .word off
#include "page.i65"
    .word _lbracket         ; STATE OFF
#include "page.i65"
quit01                                  ; BEGIN
    .word rpstore
#include "page.i65"
    .word cr
#include "page.i65"
    .word _query
#include "page.i65"
    .word _interpret
#include "page.i65"
    .word state
#include "page.i65"
    .word fetch
#include "page.i65"
    .word zeq
#include "page.i65"
    .word qbranch           ; IF
    .byt <(quit03-*+1)
#include "pad.i65"
    .word _pdq
    .byt (quit02-*-1)
    .asc    " OK"
quit02
#include "pad.i65"
quit03                                  ; THEN AGAIN
    .word branch
    .byt <(quit01-*+1)
#include "pad.i65"
    .word exit

;--------------------------------------------------------------
;
;       '
;
; * 83 interpreter tdict
;
#ifdef HEADERS
ticklfa
    .byt $de,$ad
    .byt (_tick-*-1)|bit7
    .asc "'"|bit7
#endif
_tick
#include "enter.i65"
    .word _existsq
#include "page.i65"
    .word zeq
#include "page.i65"
    .word _qfind
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       [']
;
; * 83 compiler tdict
;
#ifdef HEADERS
brticklfa
    .byt $de,$ad
    .byt (_brtick-*-1)|bit7
    .asc "['","]"|bit7
#endif
_brtick
#include "enter.i65"
    .word _qcomp
#include "page.i65"
    .word _tick
#include "page.i65"
    .word _literal
#include "page.i65"
    .word exit


;--------------------------------------------------------------
;
;       ?>MARK
;
; tdict
;
;#ifdef HEADERS
;qtomarklfa
;    .byt $de,$ad
;    .byt (_qtomark-*-1)|bit7
;    .asc "?>MAR","K"|bit7
;#endif
_qtomark
#include "enter.i65"
    .word _qcomp
#include "page.i65"
    .word here
#include "page.i65"
    .word swap
#include "page.i65"
    .word _comma
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       ?<MARK
;
; tdict
;
;#ifdef HEADERS
;qfrommarklfa
;   .byt $de,$ad
;    .byt (_qfrommark-*-1)|bit7
;    .asc "?<MAR","K"|bit7
;#endif
_qfrommark
#include "enter.i65"
    .word _qcomp
#include "page.i65"
    .word here
#include "page.i65"
    .word zero
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       ?>RESOLVE
;
; tdict
;
;#ifdef HEADERS
;qtoresolvelfa
;  .byt $de,$ad
;    .byt (_qtoresolve-*-1)|bit7
;    .asc "?>RESOLV","E"|bit7
;#endif
_qtoresolve
#include "enter.i65"
qtoresolve01
    .word qdup
#include "page.i65"
    .word qbranch
    .byt <(qtoresolve02-*+1)
#include "pad.i65"
    .word dup
#include "page.i65"
    .word fetch
#include "page.i65"
    .word here
#include "page.i65"
    .word rot
#include "page.i65"
    .word store
#include "page.i65"
    .word branch
    .byt <(qtoresolve01-*+1)
#include "pad.i65"
qtoresolve02
    .word exit

;--------------------------------------------------------------
;
;       ?<RESOLVE
;
; tdict
;
;#ifdef HEADERS
;qltresolvelfa
;  .byt $de,$ad
;    .byt (_qltresolve-*-1)|bit7
;    .asc "?<RESOLV","E"|bit7
;#endif
_qltresolve
#include "enter.i65"
    .word swap
#include "page.i65"
    .word _comma
#include "page.i65"
    .word _qtoresolve
    .word exit

;--------------------------------------------------------------
;
;       ADD>MARK
;
; tdict
;
;#ifdef HEADERS
;addtomarklfa
;    .byt $de,$ad
;    .byt (_addtomark-*-1)|bit7
;    .asc "ADD>MAR","K"|bit7
;#endif
_addtomark
#include "enter.i65"
    .word true
#include "page.i65"
    .word tor
#include "page.i65"
addtomark01     .word one
#include "page.i65"
    .word roll
#include "page.i65"
    .word _twodup
#include "page.i65"
    .word tor
#include "page.i65"
    .word eq
#include "page.i65"
    .word qbranch
    .byt <(addtomark01-*+1)
#include "pad.i65"
    .word drop
#include "page.i65"
    .word _qtomark
#include "page.i65"
addtomark02     .word rfrom
#include "page.i65"
    .word dup
#include "page.i65"
    .word true
#include "page.i65"
    .word eq
#include "page.i65"
    .word qbranch
    .byt <(addtomark02-*+1)
#include "pad.i65"
    .word drop
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       BEGIN
;
; * 83 compiler tdict
;
#ifdef HEADERS
beginlfa
    .byt $de,$ad
    .byt (_begin-*-1)|bit7
    .asc "BEGI","N"|bit7
#endif
_begin
#include "enter.i65"
    .word _qfrommark
#include "page.i65"
    .word one
    .word exit

;--------------------------------------------------------------
;
;       THEN
;
; * 83 compiler tdict
;
#ifdef HEADERS
thenlfa
    .byt $de,$ad
    .byt (_then-*-1)|bit7
    .asc "THE","N"|bit7
#endif
_then
#include "enter.i65"
    .word abs
#include "page.i65"
    .word two
#include "page.i65"
    .word _qpairs
#include "page.i65"
    .word _qtoresolve
#include "page.i65"
    .word _qtoresolve
    .word exit

;--------------------------------------------------------------
;
;       DO
;
; * 83 compiler tdict
;
#ifdef HEADERS
dolfa
    .byt $de,$ad
    .byt (_do-*-1)|bit7
    .asc "D","O"|bit7
#endif
_do
#include "enter.i65"
    .word _compile
#include "page.i65"
    .word pdo
#include "page.i65"
    .word _qfrommark
#include "page.i65"
    .word three
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       ?DO
;
; tdict
;
#ifdef HEADERS
qdolfa
    .byt $de,$ad
    .byt (_qdo-*-1)|bit7
    .asc "?D","O"|bit7
#endif
_qdo
#include "enter.i65"
    .word zero
#include "page.i65"
    .word _compile
    .word pqdo
#include "pad.i65"
    .word _qtomark
#include "page.i65"
    .word _qfrommark
#include "page.i65"
    .word drop
#include "page.i65"
    .word swap
#include "page.i65"
    .word three
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       LOOP
;
; * 83 compiler tdict
;
#ifdef HEADERS
looplfa
    .byt $de,$ad
    .byt (_loop-*-1)|bit7
    .asc "LOO","P"|bit7
#endif
_loop
#include "enter.i65"
    .word three
#include "page.i65"
    .word _qpairs
#include "page.i65"
    .word _compile
    .word ploop
#include "pad.i65"
    .word _qltresolve
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       +LOOP
;
; * 83 compiler tdict
;
#ifdef HEADERS
pluslooplfa
    .byt $de,$ad
    .byt (_plusloop-*-1)|bit7
    .asc "+LOO","P"|bit7
#endif
_plusloop
#include "enter.i65"
    .word three
#include "page.i65"
    .word _qpairs
#include "page.i65"
    .word _compile
    .word pploop
#include "pad.i65"
    .word _qltresolve
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       LEAVE
;
; * 83 compiler tdict
;
#ifdef HEADERS
leavelfa
    .byt $de,$ad
    .byt (_leave-*-1)|bit7
    .asc "LEAV","E"|bit7
#endif
_leave
#include "enter.i65"
    .word _compile
    .word pleave
#include "pad.i65"
    .word three
#include "page.i65"
    .word _addtomark
    .word exit

;--------------------------------------------------------------
;
;       ?LEAVE
;
; tdict
;
#ifdef HEADERS
qleavelfa
    .byt $de,$ad
    .byt (_qleave-*-1)|bit7
    .asc "?LEAV","E"|bit7
#endif
_qleave
#include "enter.i65"
    .word _compile
    .word pqleave
#include "page.i65"
    .word three
#include "page.i65"
    .word _addtomark
    .word exit

;--------------------------------------------------------------
;
;       UNTIL
;
; * 83 compiler tdict
;
#ifdef HEADERS
untillfa
    .byt $de,$ad
    .byt (_until-*-1)|bit7
    .asc "UNTI","L"|bit7
#endif
_until
#include "enter.i65"
    .word one
#include "page.i65"
    .word _qpairs
#include "page.i65"
    .word _compile
    .word qbranch
#include "pad.i65"
    .word _qltresolve
    .word exit

;--------------------------------------------------------------
;
;       AGAIN
;
; tdict
;
#ifdef HEADERS
againlfa
    .byt $de,$ad
    .byt (_again-*-1)|bit7
    .asc "AGAI","N"|bit7
#endif
_again
#include "enter.i65"
    .word one
#include "page.i65"
    .word _qpairs
#include "page.i65"
    .word _compile
    .word branch
#include "pad.i65"
    .word _qltresolve
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       REPEAT
;
; * 83 compiler tdict
;
#ifdef HEADERS
repeatlfa
    .byt $de,$ad
    .byt (_repeat-*-1)|bit7
    .asc "REPEA","T"|bit7
#endif
_repeat
#include "enter.i65"
    .word _again
    .word exit

;--------------------------------------------------------------
;
;       IF
;
; * 83 compiler tdict
;
#ifdef HEADERS
iflfa
    .byt $de,$ad
    .byt (_if-*-1)|bit7
    .asc "I","F"|bit7
#endif
_if
#include "enter.i65"
    .word zero
#include "page.i65"
    .word zero
#include "page.i65"
    .word _compile
    .word qbranch
#include "pad.i65"
    .word _qtomark
#include "page.i65"
    .word two
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       ELSE
;
; * 83 compiler tdict
;
#ifdef HEADERS
elselfa
    .byt $de,$ad
    .byt (_else-*-1)|bit7
    .asc "ELS","E"|bit7
#endif
_else
#include "enter.i65"
    .word two
#include "page.i65"
    .word _qpairs
#include "page.i65"
    .word _compile
    .word branch
#include "pad.i65"
    .word swap
#include "page.i65"
    .word _qtomark
#include "page.i65"
    .word swap
#include "page.i65"
    .word _qtoresolve
#include "page.i65"
    .word zero
#include "page.i65"
    .word plit
    .word -2
#include "pad.i65"
    .word exit

;--------------------------------------------------------------
;
;       WHILE
;
; * 83 compiler tdict
;
#ifdef HEADERS
whilelfa
    .byt $de,$ad
    .byt (_while-*-1)|bit7
    .asc "WHIL","E"|bit7
#endif
_while
#include "enter.i65"
    .word _compile
    .word qbranch
#include "pad.i65"
    .word one
#include "page.i65"
    .word _addtomark
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       2CONSTANT
;
; tdict
;
#ifdef HEADERS
twoconstlfa
    .byt $de,$ad
    .byt (_twoconst-*-1)|bit7
    .asc "2CONSTAN","T"|bit7
#endif
_twoconst
#include "enter.i65"
    .word _create
#include "page.i65"
    .word _comma
#include "page.i65"
    .word _comma
#include "page.i65"
    .word _psemi
    jsr dodoes
#include "page.i65"
    .word twofetch
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       2VARIABLE
;
; tdict
;
#ifdef HEADERS
twovariablelfa
  .byt $de,$ad
    .byt (_twovariable-*-1)|bit7
    .asc "2VARIABL","E"|bit7
#endif
_twovariable
#include "enter.i65"
    .word _create
#include "page.i65"
    .word clit
    .byt 4
#include "pad.i65"
    .word _allot
#include "page.i65"
    .word exit

;--------------------------------------------------------------
;
;       DHASH   ( nfa -- hash1 hash2 )
;
; tdict
;
; input is NFA or address of a counted string
; hash1 is the thread index for the core vocabulary (0-15)
; hash2 is used by the Bloom filter
;
;symbol table 
;+---------------+
;|    CFA[low]   |  +0      Code field address
;|    CFA[high]  |
;+-+-+-+-+-+-+-+-+
;|     [   len   ]  +2      Length field
;[I]             |          Immediate bit
;| [V]           |          Vocabulary bit
;|   [S]         |          Smudge bit
;+-+-+-+-+-+-+-+-+
;|   name[1]     |  +3      Name field
;|           ... |
;|   name[len]   |
;+~~~~~~~~~~~~~~~+
;?    LFA[low]   ?  +len+3  Link field address
;?    LFA[high]  ?         (present iff Vocabulary)
;+~~~~~~~~~~~~~~~+
;
#ifdef HEADERS
dhashlfa
    .byt $de,$ad
    .byt (dhash-*-1)|bit7
    .asc "DHAS","H"|bit7
#endif
dhash
    stx storex
    ldy #0
    lda (tos),y
    and #$3f                ; turn off 7 and 6, not 5 (smudge)
    sta n                   ; seed hash1 with length
    sty n+1                 ; seed hash2 with 0
    tay                     ; count backwards to 1 from length
    iny                     ;       hash2   hash1
dhash01
    dey                             ;[2]
    beq dhash02                     ;[2]
    ; the pearson hash should return an evenly distributed
    ; value between $00-$0f based on the wordset in the
    ; core dictionary.  In other words, all 16 threads
    ; are initially balanced with the same number of words,
    ; to reduce searches to (on average) 1/16th of the
    ; dictionary.
    lda (tos),y                     ;[5]
    ;sec                             ;[2] ~wut? doesn't and 7 make this unnecessary?
    ;sbc #$20                        ;[2] control chars
    and #(pearsonx-pearson-1)       ;[2]
    tax                             ;[2]
    lda n                           ;[3]
    eor pearson,x                   ;[4]
    sta n                           ;[3]
    ; the bloom filter hash tries to answer the question,
    ; 'is this a number or does it contain numbers?'
    ; returning zero (no digits present) or the sum (mod64)
    ; of all digits in this word
    lda (tos),y             ;[5]
    and #$7f                ;[2]    ; ignore bit7
    clc                     ;[2]
    adc #$FF-('9')          ;[2]
    adc #'9'-'0'+1          ;[2]    ; carry is set only
    ; for digits '0'-'9'
    bcc dhash01             ;[3]  [12]hash2 [27]hash1
    adc n+1                 ; 0> -1 0 1 2 3 0= 0< 0<> sp0 rp0
    sta n+1                 ; 1+ 1- 2+ 2- 2/ 2* forth-83 dr0 dr1
    jmp dhash01             ; 2drop 2dup 2over 2rot 2swap 2! 2@
    ; 2constant 2variable d0= d2/ d2*
dhash02
    lda n
    lsr
    lsr                     ; xor the pearson hash byte
    lsr                     ; into a single nybble
    lsr                     ; - - - - [ 7 6 5 4 ]
    eor n                   ; 7 6 5 4 [ 3 2 1 0 ]
    and #$0f                ; - - - - [4bit hash]
; DEBUG
;    jsr debug               ; print out some entertainment
; /DEBUG
    sta tos
    sty tos+1       ; for both hashes, high byte always 0
    lda n+1         ; sum of all digits 0..9
    ldx storex
    jmp pushya

;DEBUG
; hex dump the byte in A
;debug
;    pha
;    pha
;    and #$0f
;    jsr print
;    pla
;    lsr
;    lsr
;    lsr
;    lsr
;    jsr print
;    pla
;dbout
;    rts
;print
;    sed
;    cmp #10
;    adc #'0'
;    cld
;    jmp CHROUT
; ;/DEBUG

;--------------------------------------------------------------
;
;       DHASH@   ( hashkey -- LFA )
;
; tdict
;
; retrieve the head of this hash thread
;
;#ifdef HEADERS
;dhashfetchlfa
;  .byt $de,$ad
;    .byt (dhashfetch-*-1)|bit7
;    .asc "DHASH","@"|bit7
;#endif
dhashfetch
    brk
    .byt set  | ACC
    .word lfalist
    .byt add  | TOS
    .byt add  | TOS
    .byt st   | TOS
    .byt ldd  | TOS
    .byt st   | TOS
    .byt nxt

;--------------------------------------------------------------
;
;       BLOOM!   ( hash -- )
;
; tdict
;
; set the bit in the dictionary's bloom filter
;
; hash is an 8-bit hash code indexing a 256-bit bitfield
;#ifdef HEADERS
;bloomstorelfa
;  .byt $de,$ad
;    .byt (bloomstore-*-1)|bit7
;    .asc "BLOOM","!"|bit7
;#endif
bloomstore
    lda tos                 ; set bloom filter bit for hash2
    and #7
    tay
    lda power2,y
    sta n
    lda tos
    lsr
    lsr
    lsr
;    and #(bloomx-bloom-1)   ; don't write outside filter area  ~wut?
    and #7   ; don't write outside filter area
    tay
    lda n
    ora bloom,y
    sta bloom,y
    jmp pops

;--------------------------------------------------------------
;
;       BLOOM@   ( hash -- flag )
;
; tdict
;
; test a bit in the filter
; hash indexes a single bit in the bloom filter
; input value is in the range 0-63, representing which bit to test
;
; flag values
; false = it can't be in there (bit was clear)
; true = it might be in there (bit was set)
;#ifdef HEADERS
;bloomfetchlfa
;    .byt $de,$ad
;    .byt (bloomfetch-*-1)|bit7
;    .asc "BLOOM","@"|bit7
;#endif
bloomfetch
    lda tos                 ; read bloom filter bit for hash2
    and #7
    tay
    lda power2,y
    sta n
    lda tos
    lsr
    lsr
    lsr
;    and #(bloomx-bloom-1)   ; don't write outside filter area  ~wut?
    and #7   ; don't write outside filter area
    tay
    lda bloom,y
    ldy #0
    and n
    beq bloomfetch01
    dey
bloomfetch01
    tya
    jmp put

;--------------------------------------------------------------
;
;       DHASH!   ( LFAnew hash1 -- )
;
; tdict
;
; links the current LFA onto the top of this hash' thread
;
; When we're done, the word whose LFAnew is on the stack will become
; the new top of this hash thread, and the new word's LFA will link
; to the previous top of the chain.
;
; sweet16 saved 51 bytes vs. 6502
;#ifdef HEADERS
;dhashstorelfa
;    .byt $de,$ad
;    .byt (dhashstore-*-1)|bit7
;    .asc "DHASH","!"|bit7
;#endif
dhashstore
    ldy #1
    jsr locals               ; LFAnew -> N0
    brk
    .byt set  | R11
    .word lfalist
    .byt sub  | ACC
    .byt st   | N2          ; 0 -> N2
    .byt ld   | R11
    .byt add  | TOS
    .byt add  | TOS
    .byt st   | R11         ; R11+hash1*2 -> R11
    .byt ldd  | R11
    .byt popd | R11         ; back up the pointer
    .byt bnz, <(dhashstore01-*-2)
    .byt set  | ACC
    .word 0 ; was rootlfa  ~wut?
    .byt std  | R11
    .byt popd | R11
dhashstore01
    .byt st   | N1          ; head -> N1
    .byt rtn
    ldy #2
    lda (n),y
    and #$1f
    sta n+7                 ; length of name being inserted
dhashstore02
    lda (n+2),y
    and #$1f
    sta n+6
    lda n+7
    cmp n+6                 ; compare lengths
    bcc dhashstore05
    bne dhashstore04
    ;sec
    adc #1
    tay                     ; last char in names
dhashstore03
    lda (n),y
    eor (n+2),y
    asl                     ; compare char ignoring bit7
    bne dhashstore04
    dey
    cpy #2
    bne dhashstore03        ; stop at first char
    dey
    brk
    .byt set  | ACC
    .byt $de,$ad
    .byt std  | N1
    .byt rtn
dhashstore04
    brk
    .byt ld   | N1
    .byt st   | N2          ; keep track of where we've just been
    .byt ldd  | N1
    .byt st   | N1          ; (N1) -> N1
    .byt rtn
    ldy #2
    bne dhashstore02
dhashstore05
    brk
    .byt ld   | N2
    .byt bnz, <(dhashstore06-*-2)
    .byt ld   | R11         ; empty list, insert at the head
    .byt st   | N2          ; head -> N2
dhashstore06
    .byt ld   | N0
    .byt std  | N2          ; N0 -> (N2)
    .byt ld   | N1
    .byt std  | N0          ; N1 -> (N0)
    .byt pull               ; drop the hash
    .byt nxt

;--------------------------------------------------------------
;
;        REHASH   ( -- )
;
; rebuilds the symbol table in high memory.
;
; *** TRICK ALERT ***
; Uses the address on the return stack to determine if the caller 
; was COLD.  Doesn't copy stuff to PAD if that's the case (it's 
; already there from load) 
;
#ifdef HEADERS
rehashlfa
    .byt $de,$ad
    .byt (_rehash-*-1)|bit7
    .asc "REHAS","H"|bit7
#endif
_rehash
#include "enter.i65"
    .word exit

;--------------------------------------------------------------
;
;       FORGET
;
; tdict
;
; * 83 interpreter
;
; unthread, move DP, then rethread
; don't forget to rechain vocabularies!
; ~ work this over to use pointers only (no RETHREAD/UNTHREAD)
#ifdef HEADERS
forgetlfa
    .byt $de,$ad
    .byt (_forget-*-1)|bit7
    .asc "FORGE","T"|bit7
#endif
_forget
#include "enter.i65"
    .word exit


