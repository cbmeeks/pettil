; pettil-assembler.a65
#echo .       pettil-assembler.a65      ASSEMBLER Vocabulary (2)

; >FORTH,
;
; compiles a page-aligned jsr toforth

;--------------------------------------------------------------
#if 0
name=ASSEMBLER
stack=( -- )
tags=vocabulary,ext
Sets context to the ASSEMBLER vocabulary
#endif
#include "align.i65"
assembler
    jsr dovocab
    .byt 1                  ; vocabulary identifier

;--------------------------------------------------------------
#if 0
name=XSAVE
stack=( -- n )
tags=vocabulary,ext
vocab=1
!!!Assembler constant
place to stash the X register

```
ff cconstant xsave
```
#endif
#include "align.i65"
asmxsave
    jsr docconst
    .byt $ff

;--------------------------------------------------------------
#if 0
name=UP
stack=( -- n )
tags=vocabulary,ext
vocab=1
!!!Assembler constant
User pointer, points to the user variable area

```
84 cconstant up
```
#endif
#include "align.i65"
asmup
    jsr docconst
    .byt <up

;--------------------------------------------------------------
#if 0
name=IP
stack=( -- n )
tags=vocabulary,ext
vocab=1
!!!Assembler constant
Forth instruction pointer

```
8b cconstant ip
```
#endif
#include "align.i65"
asmip
    jsr docconst
    .byt <ip

;--------------------------------------------------------------
#if 0
name=N
stack=( -- n )
tags=vocabulary,ext
vocab=1
!!!Assembler constant
N area, a scratch space for primitives

```
4 cconstant n
```
#endif
#include "align.i65"
asmn
    jsr docconst
    .byt <n

;--------------------------------------------------------------
#if 0
name=TOS
stack=( -- n )
tags=vocabulary,ext
vocab=1
!!!Assembler constant
Top of stack

```
2 cconstant tos
```
#endif
#include "align.i65"
asmtos
    jsr docconst
    .byt <tos

;--------------------------------------------------------------
#if 0
name=NEXT
stack=( -- n )
tags=vocabulary,ext
vocab=1
!!!Assembler constant
Address of NEXT

```
86 constant next
```
#endif
#include "align.i65"
asmnext
    jsr doconst
    .word next

;--------------------------------------------------------------
;" retyped from Blazin' Forth source screens 24-30, there may be some typos
;"
;" hex
;" vocabulary assembler
;" assembler definitions
;"  ( registers )
;" 8b constant xsave
;" 87 constant w
;" 89 constant up
;" 84 constant ip
;" 7c constant n
;"
;" (forth kernel locations )
;" 0957 constant pop
;" 0955 constant poptwo
;" 084c constant put
;" 084a constant push
;" 0851 constant next
;" 0879 constant setup
;"
;" -----------------------
;"
;" variable index -2 allot
;" 0909 , 1505 , 0115 , 8011 , 8009 , 1d0d , 8019 , 8080 ,
;" 0080 , 1404 , 8014 , 8080 , 8080 , 1c0c , 801c , 2c80 ,
;" variable mode  2 mode !
;" : .a  0 mode ! ; : #   1 mode ! ;  : mem 2 mode ! ;
;" : ,x  3 mode ! ; : ,y  4 mode ! ; : x)  5 mode ! ;
;" : )Y  6 mode ! ; : )   f mode ! ;
;"
;" : bot ,x 0 ;  ( address the bottom of the stack )
;" : sec ,x 2 ;  ( address the second item on data stack )
;" : rp) ,x 101 ;  ( address bottom of return stack )
;"
;" -----------------------
;"
;" : upmode  if  mode @ 8 and 0=  if 8 mode +!  then then
;"     1 mode @ 0f and  0 ?do dup + loop
;"     over 1+ @ and 0= ;
;" : cpu   create c, does> c@ c, mem ;
;"   00 cpu brk,  18 cpu clc,  d8 cpu cld,  58 cpu cli,
;"   b8 cpu clv,  ca cpu dex,  88 cpu dey,  e8 cpu inx,
;"   c8 cpu iny,  ea cpu nop,  48 cpu pha,  08 cpu php,
;"   68 cpu pla,  28 cpu plp,  40 cpu rti,  60 cpu rts,
;"   38 cpu sec,  f8 cpu sed,  78 cpu sei,  aa cpu tax,
;"   a8 cpu tay,  ba cpu tsx,  8a cpu txa,  9a cpu txs,
;"   98 cpu tya,
;"
;" -----------------------
;"
;" : m/cpu  create c, , does>
;"     dup 1+ @ 80 and  if 10 mode +! then over
;"     ff00 and upmode upmode  if mem cr latest id.
;"     abort" has incorrect address mode" then c@ mode c@
;"     index + c@ + c,  mode c@ 7 and if mode x@
;"     0f and 7 < if c, else , then then mem ;
;"
;"   1c6e 60 m/cpu adc,  1c6e 20 m/cpu and,  1c6e c0 m/cpu cmp,
;"   1c6e 40 m/cpu eor,  1c6e a0 m/cpu lda,  1c6e 00 m/cpu ora,
;"   1c6e e0 m/cpu sbc,  1c6c 80 m/cpu sta,  0d0d 01 m/cpu asl,
;"   0c0c c1 m/cpu dec,  0c0c e1 m/cpu inc,  0d0d 41 m/cpu lsr,
;"   0d0d 21 m/cpu rol,  0d0d 61 m/cpu ror,  0414 81 m/cpu stx,
;"   0486 e0 m/cpu cpx,  0486 c0 m/cpu cpy,  1496 a2 m/cpu ldx,
;"   0c8e a0 m/cpu ldy,  048c 80 m/cpu sty,  0480 14 m/cpu jsr,
;"   8480 40 m/cpu jmp,  0484 20 m/cpu bit,
;"
;" -----------------------
;"
;" : begin,   here 1 ; immediate
;" : until,   >r 1 ?pairs r> c, here 1+ - c, ; immediate
;" : if,   c, here 0 c, 3 ; immediate
;" : then,   abs 3 ?pairs here over c@
;"     if swap ! else over 1+ - swap c! then ; immediate
;" : else,   3 ?pairs here 1+   1 jmp,
;"     swap here over 1+ - swap c! -3 ; immediate
;"
;" -----------------------
;"
;" : again,   1 ?pairs jmp, ; immediate
;" : while,   >r dup 1 ?pairs r> [compile] if, 2+ ; immediate
;" : repeat,   >r >r 1 ?pairs jmp,
;"     r> r> 2- [compile] then, ; immediate
;" : not   20 + ;  ( reverse assembly test )
;" 90 constant cs ( assembler test for carry set )
;" d0 constant 0= ( assembler test for equal zero )
;" 10 constant 0< ( assembler test for less than or equal zero )
;" 90 constant >= ( assembler test for greater or equal zero )
;"                ( >= is only correct after sub, or cmp, )
;" 50 constant vs ( assembler test for overflow set )
;"
;" -----------------------
;"
;" forth definitions decimal
;" : end-code   current @ context ! ?csp smudge ;
;" : code   create smudge here dup 2- !
;"     [ assembler ] mem assembler !csp ;
;" : ;code   ?csp compile (;code)
;"     [compile] [ assembler !csp ; immediate
;" exit
;" : (;code)  r> latest name> ! ;
;" credit for the original form of this assemlber goes to William F. Ragsdale of FIG

;"  0 R0
;"  1 R1
;"  2 R2
;"  3 R3
;"  4 R4
;"  5 R5
;"  6 R6
;"  7 R7
;"  8 R8
;"  9 R9
;" 10 R10
;" 11 R11
;" 12 R12
;" 13 R13
;" 14 R14
;" 15 R15
;"
;"  0 ACC
;"  1 TOS
;"  2 N0
;"  3 N1
;"  4 N2
;"  5 N3
;"  6 N4
;"  7 N5
;"  8 N6
;"  9 N7
;" 0a N8
;"  0 R0L
;" R0L 1+ R0H
;" R0L 1c + R14L
;" R0L 1d + R14H
;" R0L 1e + R15L
;" R0L 1f + R15H
;"
;"
;"
;" 00 rtn,  01 bp,   02 bm,   03 bz,
;" 04 bnz,  05 bm1,  06 bnm1, 07 nxt,
;" 08 push, 09 pull, 0a br,   0b ext,
;" 0c bs,   0d rs,   0e bc,   0f bnc,
;" 10 set,  20 ld,   30 st,   40 ldi,
;" 50 sti,  60 ldd,  70 std,  80 pop,
;" 90 stpx, a0 add,  b0 sub,  c0 popd,
;" d0 cpr,  eo inr,  f0 dcr,
