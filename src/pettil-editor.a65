; pettil-editor.a65
#echo .       pettil-editor.a65         PET screen editor for Forth

;--------------------------------------------------------------
#if 0
name=CLRSCR
stack=( -- )
tags=editor
Clear the screen
#endif
#include "align.i65"
_clrscr
    jsr enter
#include "page.i65"
    .word clit
    .byt CLR
#include "pad.i65"
    .word emit
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=FLIPSCR
stack=( -- )
tags=editor

 invert the entire screen

#endif
flipscr
    ldy #0
flipscr01
    lda VIDRAM,y            ; [4]
    eor #$80                ; [2]
    sta VIDRAM,y            ; [5]
    lda VIDRAM+$100,y
    eor #$80
    sta VIDRAM+$100,y
    lda VIDRAM+$200,y
    eor #$80
    sta VIDRAM+$200,y
    lda VIDRAM+$300,y
    eor #$80
    sta VIDRAM+$300,y
    iny                     ; [2]
    bne flipscr01           ; [3] 49 * 256 = 12544 clocks
    jmp next

;--------------------------------------------------------------
#if 0
name=WRAP
stack=( -- addr )
tags=editor,nosymbol
Double variable, stores 25 bits of line wrap info for screen
#endif
wrap
    jsr docreate
    .word 0,0

;--------------------------------------------------------------
#if 0
name=PWRAP
stack=( -- addr )
tags=editor,nosymbol
Double variable, stores 25 bits of line wrap info for paste buffer
#endif
pwrap
    jsr docreate
    .word 0,0

;--------------------------------------------------------------
#if 0
name=PASTE
stack=( -- addr )
tags=editor,nosymbol
Paste buffer pointer, starts at [[PAD]]
#endif
paste
    jsr docreate
    .word 0

;--------------------------------------------------------------
#if 0
name=WRAP*
stack=( d1 d2 -- d )
tags=editor,nosymbol

Combines two linewrap tables into one.  It is expected that

* "d2" contains the top of the screen
* "d1" contains the remainder of the screen
* There are at least 25 "1" (40-column) and "10" (80-column) bits available

#endif
wrapstar
    ;ldy #6                  ; TOS = D2H; N0 = D1L; N1 = D1H; N2 = D2L
    jsr locals6
    stx xsave
    lda tos+1
    bne wrapstar03              ; done already?
wrapstar01
    sec                         ; make sure we stop eventually
    ldy #4
    jsr wrapstar04
    bit n+3
    bpl wrapstar01              ; 0000 0000 0000 0000 0110 1011 1111   1111 1111 1111 1110 1111 0000 0000 0000
wrapstar02                      ; 0001 1111 1111 1101 1111 1010 1111
    clc
    ldy #6
    jsr wrapstar04
    rol tos
    rol tos+1
    beq wrapstar02
wrapstar03
    ldx xsave
    dex
    lda n+4
    sta stackl,x
    lda n+5
    sta stackh,x
    jmp next

wrapstar04
    ldx #0
wrapstar05
    rol n,x
    inx
    dey
    bne wrapstar05
    rts

;--------------------------------------------------------------
#if 0
name=WRAP+
stack=( d columns -- d' flag )
tags=editor,primitive,nosymbol
Append bits to the linewrap double `d` based on whether `columns`
is 40 or 80.  For 80, a '10' bit pair is appended,  and for 40 a
single '1' bit.  The return `flag` is zero if there are not yet 25
bits of linewrap in `d'`

!!!pronounced: "wrap-plus"
#endif
wrapplus
    sec                         ; always shift in a 1
wrapplus01
    ldy stackh,x                ; check msb 25.  full?
    bne wrapplus03
    rol stackl+1,x              ; shift in a single bit
    rol stackh+1,x
    rol stackl,x
    rol stackh,x
    lda #40
    cmp tos
    sta tos                     ; so we only do this once
    bcc wrapplus01              ; maybe shift in a 0 (if 80-column)
    ldy stackh,x
wrapplus03
    tya
    jmp put

;--------------------------------------------------------------
#if 0
name=WRAPROLL
stack=( logline 40|80 -- )
tags=editor,nosymbol
Rolls the screen linewrap table up one or two lines
#endif
wraproll
    stx xsave
    lda stackl,x
    tax
    asl LDTB1,x
wraproll02
    cpx #24
    bcs wraproll03
    asl LDTB1+1,x
    ror LDTB1,x
    inx
    bne wraproll02
wraproll03
    sec
    ror LDTB1,x
    ldx xsave
    ;clc
    lda tos
    sbc #40
    sta tos
    bpl wraproll
    jmp twodrop

;--------------------------------------------------------------
#if 0
name=LINEINFO
stack=( logline -- addr 40|80 )
tags=editor,nosymbol,primitive,nosymbol

Returns the start address and length of the logical line.
 `logline` is a physical screen line that is assumed to
 point to the upper physical line if the line is 80 columns.

#endif
lineinfo
    stx xsave
    ldx tos
    lda WRAPLO,x
    sta tos
    lda LDTB1,x
    sta tos+1
    lda #40
    cpx #24
    beq lineinfo01
    ldy LDTB1+1,x
    bmi lineinfo01
    asl                     ; 80 char
lineinfo01
    ldx xsave
    jmp push0a

lineinfob
    stx xsave
    ldx tos

;--------------------------------------------------------------
#if 0
name=LOGLINE
stack=( -- logline )
tags=editor,nosymbol,primitive,nosymbol
 Returns the physical line number of the logical line where the
 PET cursor is currently located.  The `logline` value returned
 is the first/top/upper line if the logical line has 80 characters.

 From this position, [[leapfrogging forward|LOGLINE+]] down the
 screen will always return logical line addresses (with
 wraptable bit7 set), never continuation lines.
#endif
logline
    stx xsave
    ldx TBLX        ; $d8 = Current Cursor Physical Line Number
    inx
logline01
    dex
    ldy LDTB1,x     ; $e0 = 25-byte screen wrap table
    bpl logline01
    txa
    ldx xsave
    jmp push0a

;--------------------------------------------------------------
#if 0
name=LOGLINE+
stack=( logline -- logline+|0 )
tags=editor,nosymbol

 Return the next logical line number or 0 after bottom of screen

!!!pronounced "log-line-plus"
#endif
loglineplus
    stx xsave
    lda #0
    ldx tos
loglineplus01
    cpx #24
    beq loglineplus02
    inx
    ldy LDTB1,x
    bpl loglineplus01
    txa
loglineplus02
    ldy #0
    ldx xsave
    jmp put

;--------------------------------------------------------------
#if 0
name=EDITCOPY
stack=( -- )
tags=editor,nosymbol
STOP-C Copy Line

Appends a copy of the current logical screen line to the paste buffer

```
: editcopy
   paste logline lineinfo
   (>paste) cmove 2drop ;
: editcopy   ( -- )
    logline lineinfo >r paste @  r@ cmove
    paste r@ +!
    pwrap 2@ r> 40/mod nip wrap+ pwrap 2! ;
```
#endif
#include "align.i65"
_editcopy
    jsr enter
#include "page.i65"
    .word logline
#include "page.i65"
    .word lineinfo
#include "page.i65"
    .word tor
#include "page.i65"
    .word paste
#include "page.i65"
    .word fetch
#include "page.i65"
    .word rfetch
#include "page.i65"
    .word cmove
#include "page.i65"
    .word rfetch
#include "page.i65"
    .word paste
#include "page.i65"
    .word plusstore
#include "page.i65"
    .word pwrap
#include "page.i65"
    .word twofetch
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word wrapplus
#include "page.i65"
    .word drop
#include "page.i65"
    .word pwrap
#include "page.i65"
    .word twostore
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=EDITDEL
stack=( -- )
tags=editor,nosymbol
STOP-D Delete Line

Append the current logical screen line and delete it from the
screen

```
: editdel   ( -- )
    editcopy  logline dup lineinfo >r >r
    logline+ ?dup
    if
        lineinfo drop r> 33768 third -
        2dup + >r cmove
    then
    r> r@ blank logline r> wraproll ;

: editdel   ( -- )
    editcopy logline dup lineinfo >r >r
    logline+ lineinfo drop r> 33768 third -
    2dup + >r cmove r> r@ blank logline r> wraproll ;
```
#endif
#include "align.i65"
_editdel
    jsr enter
#include "page.i65"
    .word _editcopy             ; ( )
#include "page.i65"
    .word logline
#include "page.i65"
    .word dup
#include "page.i65"
    .word lineinfo
#include "page.i65"
    .word tor
#include "page.i65"
    .word tor
#include "page.i65"
    .word loglineplus
#include "page.i65"
    .word qdup
#include "page.i65"
    .word qbranch
    .byt <(editdel01-*+1)
#include "pad.i65"
    .word lineinfo
#include "page.i65"
    .word drop
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word plit
    .word VIDRAM+1000
#include "pad.i65"
    .word third
#include "page.i65"
    .word minus
#include "page.i65"
    .word twodup
#include "page.i65"
    .word plus
#include "page.i65"
    .word tor
#include "page.i65"
    .word cmove
#include "page.i65"
editdel01
    .word rfrom
#include "page.i65"
    .word rfetch
#include "page.i65"
    .word _blank
#include "page.i65"
    .word logline
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word wraproll
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=EDITPASTE
stack=( -- )
tags=editor,nosymbol

STOP-P

Insert the paste buffer above the current logical line

```
: editpaste   ( -- )
    paste @  logline
    dup lineinfo drop over eos third - cmove
    pwrap 2@ logline
    begin
        dup>r
        lineinfo nip
        wrap+ drop
        r> logline+ dup 0=
    until drop
    logline wrap^ 2swap
    wrap* wrap!
    pad logline lineinfo eos over - cmove
    paste ! ;
```
#endif
#include "align.i65"
_editpaste
    jsr enter
#include "page.i65"
    .word paste
#include "page.i65"
    .word fetch
#include "page.i65"
    .word logline
#include "page.i65"
    .word lineinfo
#include "page.i65"
    .word drop
#include "page.i65"
    .word over
#include "page.i65"
    .word plit
    .word VIDRAM+1000
#include "pad.i65"
    .word third
#include "page.i65"
    .word minus
#include "page.i65"
    .word cmove
#include "page.i65"
    .word pwrap
#include "page.i65"
    .word twofetch
#include "page.i65"
    .word logline
#include "page.i65"
editpaste01
    .word duptor
#include "page.i65"
    .word lineinfo
#include "page.i65"
    .word nip
#include "page.i65"
    .word wrapplus
#include "page.i65"
    .word drop
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word loglineplus
#include "page.i65"
    .word qdup
#include "page.i65"
    .word zeq
#include "page.i65"
    .word qbranch
    .byt <(editpaste01-*+1)
#include "pad.i65"
    .word logline
#include "page.i65"
    .word wrapabove
#include "page.i65"
    .word wrapstar
#include "page.i65"
    .word wrapstore
#include "page.i65"
    .word _pad
#include "page.i65"
    .word logline
#include "page.i65"
    .word lineinfo
#include "page.i65"
    .word drop
#include "page.i65"
    .word plit
    .word VIDRAM+1000
#include "pad.i65"
    .word over
#include "page.i65"
    .word minus
#include "page.i65"
    .word cmove
#include "page.i65"
    .word paste
#include "page.i65"
    .word store
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=EDITZILCH
stack=( -- )
tags=editor,nosymbol

 STOP-Z   Zilch the paste buffer

```
: editzilch   ( -- )
     pad paste !  pwrap 4 erase ;
```
#endif
#include "align.i65"
_editzilch
    jsr enter
#include "page.i65"
    .word _pad
#include "page.i65"
    .word paste
#include "page.i65"
    .word store
#include "page.i65"
    .word pwrap
#include "page.i65"
    .word four
#include "page.i65"
    .word _erase
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=EDITNOWRAP
stack=( -- )
tags=editor,nosymbol

 reset the linewrap table and force this block to be a screen
 even if it was a data packet

#endif
_editnowrap
    stx xsave
    ldx #24
editnowrap01
    asl $e0,x
    sec
    ror $e0,x
    dex
    bpl editnowrap01
    inx
    stx uarea+userscrpkt-userarea
    ldx #$80
    stx uarea+userscrpkt-userarea+1
    ldx xsave
    jmp exit

;--------------------------------------------------------------
#if 0
name=>EDIT
stack=( scr -- )
tags=editor,nosymbol

 Save current editor screen in packet buffer
 Set `toscr` as the current [[SCR]] and edit it

```
: >edit   ( scr -- )
    update 0 max block drop ;
```
#endif
#include "align.i65"
_toedit
    jsr enter
#include "page.i65"
    .word _update
#include "page.i65"
    .word zero
#include "page.i65"
    .word _max
#include "page.i65"
    .word _block
#include "page.i65"
    .word drop
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=+EDIT
stack=( n -- )
tags=editor,nosymbol

Save current editor screen in packet buffer, edit the screen
`n` screens away from the current [[SCR]]

```
: +edit   ( n -- )
    scr @ + >edit ;
```
#endif
#include "align.i65"
_plusedit
    jsr enter
#include "page.i65"
    .word scr
#include "page.i65"
    .word fetch
#include "page.i65"
    .word plus
#include "page.i65"
    .word _toedit
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=_
stack=( -- )
tags=editor
A shortcut to get back into the editor. On the PET keyboard, there is no
underscore, it's the left-arrow character.

~ turn this into a word that does a screencap into the last packet

```
: _   ( -- )
    scr @ edit ;
```
!!!pronounced: "back"
#endif
#include "align.i65"
_back
    jsr enter
#include "page.i65"
    .word scr
#include "page.i65"
    .word fetch
#include "page.i65"
    .word _edit
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=^
stack=( -- )
tags=editor
Captures the contents (including linewrap) of the display into
an editor packet, appended to the end of the [[VMBUF]] area and
enters the editor.

```
: ^   ( -- )
    #vmpkt @  scr ! editing on vidram scrpkt !  0 mkpkts  update _ ;
```
!!!pronounced: "capture"
#endif
#include "align.i65"
_caret
    jsr enter
#include "page.i65"
    .word numvmpkt
#include "page.i65"
    .word fetch
#include "page.i65"
    .word scr
#include "page.i65"
    .word store
#include "page.i65"
    .word editing
#include "page.i65"
    .word on
#include "page.i65"
    .word vidram
#include "page.i65"
    .word scrpkt
#include "page.i65"
    .word store
#include "page.i65"
    .word zero
#include "page.i65"
    .word _mkpkts
#include "page.i65"
    .word _update
#include "page.i65"
    .word _back
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=EDITTOPSCR
stack=( -- )
tags=editor,nosymbol

 from the top (first) screen

#endif
#include "align.i65"
_edittopscr
    jsr enter
#include "page.i65"
    .word zero
#include "page.i65"
    .word _toedit
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=EDITNEXTSCR
stack=( -- )
tags=editor,nosymbol
restore from the next screen or append a blank one

```
: editnextscr   ( -- )
    1 +edit ;

```
#endif
#include "align.i65"
_editnextscr
    jsr enter
#include "page.i65"
    .word one
#include "page.i65"
    .word _plusedit
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=EDITPREVSCR
stack=( -- )
tags=editor,nosymbol

 restore from the previous screen or insert a blank one

```
: editprevscr   ( -- )
    -1 +edit ;
```
#endif
#include "align.i65"
_editprevscr
    jsr enter
#include "page.i65"
    .word minusone
#include "page.i65"
    .word _plusedit
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=EDITQUIT
stack=( -- )
tags=editor,nosymbol
STOP-Q   Quit the editor
#endif
#include "align.i65"
_editquit
    jsr enter
#include "page.i65"
    .word _update
#include "page.i65"
    .word editing
#include "page.i65"
    .word off
#include "page.i65"
    .word rdrop         ; discard returns
#include "page.i65"
    .word rdrop
#include "page.i65"
    .word rdrop
#include "page.i65"
    .word exit          ; exiting from EDIT

;--------------------------------------------------------------
#if 0
name=EDITINDEX
stack=( -- )
tags=editor,nosymbol,unimplemented

 STOP-I   Present an index screen and let the user select one to edit

#endif
#include "align.i65"
editindex
;    jsr enter
;#include "page.i65"
;    .word exit

;--------------------------------------------------------------
#if 0
name=EDITSAVE
stack=( -- )
tags=editor,nosymbol

 STOP-S   Save all buffers to a PRG file

#endif
#include "align.i65"
_editsave
    jsr enter
#include "page.i65"
    .word _update
#include "page.i65"
    .word _clrscr
#include "page.i65"
    .word _savebuffers
#include "page.i65"
    .word _editrestore
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=EDITLOAD
stack=( -- )
tags=editor,nosymbol

 STOP-L   Load a group of buffers from a PRG file

#endif
#include "align.i65"
_editload
    jsr enter
#include "page.i65"
    .word _clrscr
#include "page.i65"
    .word _loadbuffers
#include "page.i65"
    .word scr
#include "page.i65"
    .word off
#include "page.i65"
    .word _editrestore
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=EDITVERIFY
stack=( -- )
tags=editor,nosymbol

 STOP-V   Verify a buffer file vs. memory

#endif
#include "align.i65"
editverify
    jsr enter
#include "page.i65"
    .word _clrscr
#include "page.i65"
    .word _verifybuffers
#include "page.i65"
    .word true
#include "page.i65"
    .word _pause
#include "page.i65"
    .word _editrestore
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=EDITRESTORE
stack=( -- )
tags=editor,nosymbol

 STOP-R   Restore the current screen from the buffer

#endif
#include "align.i65"
_editrestore
    jsr enter
#include "page.i65"
    .word scr
#include "page.i65"
    .word fetch
#include "page.i65"
    .word _block
#include "page.i65"
    .word drop
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=EDITDELSCR
stack=( -- )
tags=editor,nosymbol,unimplemented

 delete the current screen.  restore from next, then prev, then blank

~ write this
#endif
#include "align.i65"
editdelscr
;    jsr enter
;#include "page.i65"
;    .word exit

;--------------------------------------------------------------
#if 0
name=SCRDEL
stack=( scr -- packet )
tags=editor,nosymbol,unimplemented
STOP-DEL Delete Screen

Deletes the current screen from the packet buffer.  The edit
screen is replaced by the first available of:

* The next screen in the packet buffer, if it already exists

* The previous screen in the packet buffer

* Screen 0 is blanked and written to the packet buffer

~ this is never called

```
: scrdel   ( scr -- packet )
    >pkt
    dup @
    vmbuf @ 2dup +
    dup
    vmbuf ! rot
    cmove
    #vmpkt 1-! ;
```
#endif
#include "align.i65"
_scrdel
;    jsr enter
;#include "page.i65"
;    .word _topkt
;#include "page.i65"
;    .word dup
;#include "page.i65"
;    .word fetch
;#include "page.i65"
;    .word vmbuf
;#include "page.i65"
;    .word fetch
;#include "page.i65"
;    .word twodup
;#include "page.i65"
;    .word plus
;#include "page.i65"
;    .word dup
;#include "page.i65"
;    .word vmbuf
;#include "page.i65"
;    .word store
;#include "page.i65"
;    .word rot
;#include "page.i65"
;    .word cmove
;#include "page.i65"
;    .word numvmpkt
;#include "page.i65"
;    .word oneminusstore
;#include "page.i65"
;    .word exit

;--------------------------------------------------------------
#if 0
name=EDITINSSCR
stack=( -- )
tags=editor,nosymbol,unimplemented

 insert a new, blank screen

~ still a little goofy when inserting multiple screens
#endif
#include "align.i65"
_editinsscr
    jsr enter
#include "page.i65"
    .word _update
#include "page.i65"
    .word vmbuf
#include "page.i65"
    .word fetch
#include "page.i65"
    .word scr
#include "page.i65"
    .word fetch
#include "page.i65"
    .word _topkt
#include "page.i65"
    .word duptor
#include "page.i65"
    .word oneplus
#include "page.i65"
    .word plit
    .word -5
#include "pad.i65"
    .word dup
#include "page.i65"
    .word vmbuf
#include "page.i65"
    .word plusstore
#include "page.i65"
    .word _plusmove
#include "page.i65"
    .word plit
    .word editinsscr01
#include "pad.i65"
    .word rfrom
#include "page.i65"
    .word threeminus
#include "page.i65"
    .word five
#include "page.i65"
    .word cmove
#include "page.i65"
    .word numvmpkt
#include "page.i65"
    .word oneplusstore
#include "page.i65"
    .word _editrestore
#include "page.i65"
    .word exit
editinsscr01
    .byt $ff, $ff, $ff, $05, $80

;--------------------------------------------------------------
#if 0
name=EDITINFO
stack=( -- )
tags=editor,nosymbol
Show the user an info screen
#endif
#include "align.i65"
_editinfo
    jsr enter
#include "page.i65"
    .word _update
#include "page.i65"
    .word _clrscr
#include "page.i65"
    .word _info
#include "page.i65"
    .word true
#include "page.i65"
    .word _pause
#include "page.i65"
    .word _clrscr
#include "page.i65"
    .word _editrestore
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=EDITINIT
stack=( scr -- )
tags=editor,nosymbol

 prepare before we drop into the editor infinite loop

```
: editinit   ( scr -- )
     scr@ editzilch ;

```
#endif
#include "align.i65"
_editinit
    jsr enter
#include "page.i65"
    .word editing
#include "page.i65"
    .word on
#include "page.i65"
    .word _block
#include "page.i65"
    .word drop
#include "page.i65"
    .word _editzilch
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=EDITSPACE
stack=( -- )
tags=editor,nosymbol

scan for shifted spaces

```
: editspace   ( -- )
     vidram b/scr + vidram
     do
       i c@ $60 =
       if $e0 i c! then
    loop ;

```
#endif
#include "align.i65"
_editspace
    jsr enter
#include "page.i65"
    .word vidram
#include "page.i65"
    .word bperscr
#include "page.i65"
    .word plus
#include "page.i65"
    .word vidram
#include "page.i65"
    .word pdo
#include "page.i65"
editspace01
    .word i
#include "page.i65"
    .word cfetch
#include "page.i65"
    .word clit
    .byt $60
#include "pad.i65"
    .word eq
#include "page.i65"
    .word qbranch               ; IF
    .byt <(editspace02-*+1)
#include "pad.i65"
    .word clit
    .byte $e0
#include "pad.i65"
    .word i
#include "page.i65"
    .word cstore
#include "page.i65"
editspace02
    .word ploop
    .byt <(editspace01-*+1)
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=EDITMENU
stack=( -- addr )
tags=editor,nosymbol

 returns the address of a counted string of menu commands

#endif
editmenu
     jsr docreate
     .byt editmenu01-*-1        ; number of menu items = 16
     .asc "QISLVZRDCP ?"         ; command keys
     .byt DELETE, INSERT, HOME, CLR, CRSRDOWN, CRSRUP
editmenu01
     .word _editquit             ; CFA of corresponding Forth word
     .word editindex            ; 01
     .word _editsave            ; 02
     .word _editload            ; 03
     .word editverify           ; 04
     .word _editzilch           ; 05
     .word _editrestore         ; 06
     .word _editdel             ; 07
     .word _editcopy            ; 08
     .word _editpaste           ; 09
     .word _editspace           ; 0a
     .word _editinfo            ; 0b
     .word editdelscr           ; 0c
     .word _editinsscr          ; 0d
     .word _edittopscr          ; 0e
     .word _editnowrap          ; 0f
     .word _editnextscr         ; 10
     .word _editprevscr         ; 11

;--------------------------------------------------------------
#if 0
name=$INDEX
stack=( addr char -- index|0 )
tags=string,ext,primitive
returns the position of char within the counted string at addr
otherwise returns 0
#endif
dolindex
    ;ldy #2
    jsr locals2
    lda (n),y
    tay             ; Y = length of string
dolindex01
    lda (n),y
    eor tos
    beq dolindex02
    dey
    bne dolindex01
dolindex02
    sty tos
    ;ldy #0         ; we started with a char at tos
    ;sty tos+1      ; so high byte is already 0
    jmp next

;--------------------------------------------------------------
#if 0
name=EDITCMD
stack=( -- )
tags=editor,nosymbol

 get a key and perform that command

#endif
#include "align.i65"
_editcmd
    jsr enter
#include "page.i65"
    .word editmenu              ; ( editmenu )
#include "page.i65"
    .word flipscr
#include "page.i65"
    .word key                   ; ( editmenu char )
#include "page.i65"
    .word flipscr
#include "page.i65"
    .word dolindex              ; ( index|0 )
#include "page.i65"
    .word qdup                  ; ( index index | 0 )
#include "page.i65"
    .word qbranch               ; IF
    .byt <(editcmd01-*+1)
#include "pad.i65"
    .word twostar               ; ( 2*index )
#include "page.i65"
    .word editmenu              ; ( 2*index editmenu )
#include "page.i65"
    .word dup                   ; ( 2*index editmenu editmenu )
#include "page.i65"
    .word cfetch                ; ( 2*index editmenu #items )
#include "page.i65"
    .word plus                  ; ( 2*index editmenu+#items )
#include "page.i65"
    .word plus                  ; ( 2*index+editmenu+#items )
#include "page.i65"
    .word oneminus              ; ( 2*index+editmenu+#items-1 )
#include "page.i65"
    .word fetch                 ; ( editcmdcfa )
#include "page.i65"
    .word execute               ; ( )
#include "page.i65"
editcmd01                       ; THEN
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=(EDIT)
stack=( scr -- )
tags=editor,nosymbol
#endif
pedit
    stx xsave       ; preserve Forth data stack pointer
    tsx
    stx n           ; preserve machine stack frame pointer

pedit01              ; PET screen editor forever loop
    jsr CHRIN       ; Kernel - blink the cursor, wait for a line of input, ignore it
    lda #$0d        ; don't just leave the cursor two characters past end of line
    jsr CHROUT      ; Kernel - so echo the carriage return
    jmp pedit01      ; ... do this forever

pedit02              ; this is edit's IRQ handler, enabled/disabled by _editirqtoggle
    lda $9b         ; copy of contents of PIA1 Port B for testing STOP key, etc...
    cmp #$ef        ; test STOP key
    bne pedit03
                    ; looks like someone pressed STOP. Exit the editor
                    ; but not so fast!  Are we in quotes or inserts?
    lda $cd         ; nonzero is quotes mode
    ora $dc         ; number of inserts pending
    beq pedit04
pedit03
    jmp MAINIRQ     ; not yet?  perform normal system IRQ

; if we get here, clean up from cursor wink and bail out of the IRQ
pedit04
    jsr UDTIM       ; keep the clock running even if someone leans on STOP
    ;sec            ; because f7a1 debounce loop always sets carry
    inc $a7         ; turn off cursor
    lda $a9         ; true character at cursor position
    jsr FIX_CHR     ; ROM $E606 on 40-column BASIC4 PET
    ldx n
    txs             ; reset stack frame
    ldx xsave       ; restore Forth stack pointer
    jmp next

;--------------------------------------------------------------
#if 0
name=EDIT
stack=( scr -- )
tags=editor
PETTIL's editor leverages the wonderful ROM screen editor
on the PET, using the `STOP` key as a substitute for escape,
not present on early PET keyboards.
#endif
#include "align.i65"
_edit
    jsr enter
#include "page.i65"
    .word _editinit
#include "page.i65"
edit00              ; reentry to editor here
    .word plit
    .word (MAINIRQ^pedit02)
#include "pad.i65"
    .word irqcaret   ; enable STOP key trap
#include "page.i65"
    .word pedit
#include "page.i65"
    .word plit
    .word (MAINIRQ^pedit02)
#include "pad.i65"
    .word irqcaret        ; disable STOP key trap, also does CLI
#include "page.i65"
    .word _editcmd  ; get and perform editor command
#include "page.i65"
    .word branch
    .byt <(edit00-*+1)
#include "pad.i65" ; this never executes. editquit breaks out by dropping returns
    .word exit

;--------------------------------------------------------------
#if 0
name=LIST
stack=( scr -- )
tags=editor
List the specified screen and set [[SCR]]
#endif
#include "align.i65"
_list
    jsr enter
#include "page.i65"
    .word editing
#include "page.i65"
    .word on
#include "page.i65"
    .word _block
#include "page.i65"
    .word editing
#include "page.i65"
    .word off
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=L
stack=( -- )
tags=editor
List the specified screen and set [[SCR]]
#endif
#include "align.i65"
_l
    jsr enter
#include "page.i65"
    .word scr
#include "page.i65"
    .word fetch
#include "page.i65"
    .word _list
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=N
stack=( -- )
tags=editor
List the specified screen and set [[SCR]]
#endif
#include "align.i65"
_n
    jsr enter
#include "page.i65"
    .word scr
#include "page.i65"
    .word oneplusstore
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=P
stack=( -- )
tags=editor
List the specified screen and set [[SCR]]
#endif
#include "align.i65"
_p
    jsr enter
#include "page.i65"
    .word scr
#include "page.i65"
    .word oneminusstore
#include "page.i65"
    .word exit
