; pettil-user.a65
#echo .       pettil-user.a65           User variables for dev env

;--------------------------------------------------------------
#if 0
name=USER
stack=( n -- )
tags=fig,defining
A defining word used in the form:

`n USER cccc`

which creates a user variable cccc.
The parameter field of cccc contains n as a fixed offset relative to
the user pointer register UP for this user variable. When cccc is
later executed, it places the sum of its offset and the user area
base address on the stack as the storage address of that
particular variable.

#endif
#include "align.i65"
user
    jsr enter
#include "page.i65"
    .word _constant
#include "page.i65"
   ;~ .word _psemi
    jmp uservar

;--------------------------------------------------------------
#if 0
name=+ORIGIN
stack=( n1 -- n2 )
tags=uservar,fig
Returns the address "n2" in the user variable area offset by
"n1" bytes from the start
#endif
#include "align.i65"
_plusorigin
    jsr enter
#include "pass.i65"
    .word plit
    .word userarea
#include "page.i65"
    .word plus
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=CURRENT
stack=( -- addr )
tags=vocabulary,uservar
!!!User variable
The vocabulary id of the compilation vocabulary, where new definitions
are added.  [[DEFINITIONS]] sets this to the first entry in [[VSTACK]]
#endif
current
    jsr uservar
    .byt usercurrent-userarea

;--------------------------------------------------------------
#if 0
name=FENCE
stack=( -- addr )
tags=uservar,fig
!!!User variable
Returns the address of the user variable FENCE which defines
the lower limit of FORGET
#endif
fence
    jsr uservar
    .byt userfence-userarea

;--------------------------------------------------------------
#if 0
name=SYMNEW
stack=( -- addr )
tags=uservar,ext
!!!User variable
Start of new (unhashed) symbols. These are [[searched|Search Order]]
first, regardless of length
#endif
symnew
    jsr uservar
    .byt usersymnew-userarea

;--------------------------------------------------------------
#if 0
name=#VOC
stack=( -- addr )
tags=uservar,ext
!!!User variable
User variable containing the total number of vocabularies
defined on the system.  Defining a new vocabulary increases
this by 1
#endif
numvoc
    jsr uservar
    .byt usernumvoc-userarea

;--------------------------------------------------------------
#if 0
name=NEWEST
stack=( -- addr )
tags=uservar,ext
!!!User variable
User variable containing the address (NFA) of the most recently
created symbol.  Used by LATEST
#endif
newest
    jsr uservar
    .byt usernewest-userarea

;--------------------------------------------------------------
#if 0
name=REDEFINED
stack=( -- addr )
tags=uservar,ext
!!!User variable
Makes something like `: DUP DUP ;` possible.  A little kludgy.  Hints to improve
this are welcome.

contents:

* 0 means we are not in a colon definition and/or not redefining anything
* nonzero means the current : definition is a redefinition

#endif
redefined
    jsr uservar
    .byt userredefined-userarea

;--------------------------------------------------------------
#if 0
name=STATE
stack=( -- addr )
tags=forth-83,uservar
!!!User variable
The address of the user variable containing the compilation
state.    A non-zero content indicates compilation is occuring,
but the value itself is system dependent.  A Standard Program
may not modify this variable.
#endif
state
    jsr uservar
    .byt userstate-userarea

;--------------------------------------------------------------
#if 0
name=CSP
stack=( -- addr )
tags=uservar
!!!User variable
User variable used to store the current stack pointer, used by
the compiler to check for balance.
#endif
csp
    jsr uservar
    .byt usercsp-userarea

;--------------------------------------------------------------
#if 0
name=NEWDP
stack=( -- addr )
tags=uservar,ext
!!!User variable
Used by REHASH to store the CFA (if invoked by FORGET)
or HERE (if REHASH is invoked standalone).  Determines
which ancestors to reawaken.  Used to set DP after REHASH

!!!pronounced: "new-d-p"
#endif
newdp
    jsr uservar
    .byt usernewdp-userarea

;--------------------------------------------------------------
#if 0
name=(SOURCE)
stack=( -- )
tags=uservar,nosymbol
!!!User variable
Vector for SOURCE word, depends on input source, one of:
TIB SCR BLK
#endif
qwertpsource
    jsr uservar
    .byt qwertuservsource-userarea

;--------------------------------------------------------------
#if 0
name=TDP
stack=( -- )
tags=uservar
!!!User variable
Transient Dictionary Pointer
#endif
tdp
    jsr uservar
    .byt usertdp-userarea
