; pettil-user.a65
#echo .       pettil-user.a65           User variables for dev env

;--------------------------------------------------------------
#if 0
name=USER
stack=( n -- )
tags=fig,defining
A defining word used in the form:

                        `n USER cccc`

        which creates a user variable cccc.
        The parameter field of cccc contains n as a fixed offset relative to
        the user pointer register UP for this user variable. When cccc is
        later executed, it places the sum of its offset and the user area
        base address on the stack as the storage address of that
        particular variable.
#endif
user
#include "enter.i65"
    .word _constant
#include "page.i65"
    .word _psemi
    jmp uservar

;--------------------------------------------------------------
#if 0
name=+ORIGIN
stack=( n1 -- n2 )
tags=uservar,fig
Returns the address "n2" in the user variable area offset by
"n1" bytes from the start
#endif
_plusorigin
#include "enter.i65"
    .word plit
    .word userarea
#include "pad.i65"
    .word plus
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=CONTEXT
stack=( -- addr )
tags=vocabulary,fig,forth-83,uservar
!!!User variable
Returns the address of the current search vocabulary.  If a word
is not found in the context vocabulary, its parent vocabulary is
searched next, chaining up to the core vocabulary

search vocabulary
  0 = core
  1 = assembler
#endif
context
    jsr uservar
    .byt usercontext-userarea

;--------------------------------------------------------------
#if 0
name=CURRENT
stack=( -- addr )
tags=vocabulary,fig,forth-83,uservar
!!!User variable
Returns the address of the vocabulary where new definitions are
added.
#endif
current
    jsr uservar
    .byt usercurrent-userarea

;--------------------------------------------------------------
#if 0
name=FENCE
stack=( -- addr )
tags=uservar,fig
!!!User variable
Returns the address of the user variable FENCE which defines
the lower limit of FORGET
#endif
fence
    jsr uservar
    .byt userfence-userarea

;--------------------------------------------------------------
#if 0
name=SYMNEW
stack=( -- addr )
tags=uservar,ext
!!!User variable
User variable points to the start of new (unhashed) symbols
These are searched first, regardless of length
#endif
symnew
    jsr uservar
    .byt usersymnew-userarea

;--------------------------------------------------------------
#if 0
name=#VOC
stack=( -- addr )
tags=uservar,ext
!!!User variable
User variable containing the total number of vocabularies
defined on the system.  Defining a new vocabulary increases
this by 1
#endif
numvoc
    jsr uservar
    .byt usernumvoc-userarea

;--------------------------------------------------------------
#if 0
name=NEWEST
stack=( -- addr )
tags=uservar,ext
!!!User variable
User variable containing the address (NFA) of the most recently
created symbol.  Used by LATEST
#endif
newest
    jsr uservar
    .byt usernewest-userarea

;--------------------------------------------------------------
#if 0
name=STATE
stack=( -- addr )
tags=forth-83,uservar
!!!User variable
The address of the user variable containing the compilation
state.    A non-zero content indicates compilation is occuring,
but the value itself is system dependent.  A Standard Program
may not modify this variable.
#endif
state
    jsr uservar
    .byt userstate-userarea

;--------------------------------------------------------------
#if 0
name=CSP
stack=( -- addr )
tags=uservar,forth-83
!!!User variable
User variable used to store the current stack pointer, used by
the compiler to check for balance.
#endif
csp
    jsr uservar
    .byt usercsp-userarea

;--------------------------------------------------------------
#if 0
name=NEWDP
stack=( -- addr )
tags=uservar,ext
!!!User variable
Used by REHASH to store the CFA (if invoked by FORGET)
or HERE (if REHASH is invoked standalone).  Determines
which ancestors to reawaken.  Used to set DP after REHASH

!!!pronounced: "new-d-p"
#endif
newdp
    jsr uservar
    .byt usernewdp-userarea

;--------------------------------------------------------------
#if 0
name=DONE?
stack=( -- addr )
tags=uservar
!!!User variable
Vector to a routine that leaves a flag on the stack to indicate INTERPRET
has exhausted the input stream

#endif
doneq
    jsr uservar
    .byt userisdoneq-userarea

;--------------------------------------------------------------
#if 0
name=SCR
stack=( -- addr )
tags=uservar,forth-83
The address of a user variable containing the
number of the screen most recently LISTed or EDITed
#endif
scr
    jsr uservar
    .byt userscr-userarea
